angular.module('actorWeb', ['ui.router', 'ngMaterial', 'ngStorage']);

var ActorConfig;

ActorConfig = (function() {
  function ActorConfig($stateProvider, $urlRouterProvider) {
    $stateProvider.state('home', {
      url: '/',
      views: {
        'sidebar': {
          templateUrl: 'app/shared/sidebar/sidebarDefaultView.html'
        },
        'toolbar': {
          templateUrl: 'app/shared/toolbar/toolbarDefaultView.html'
        },
        'content': {
          templateUrl: 'app/shared/messages/messagesListView.html'
        }
      }
    }).state('login', {
      url: '/login',
      data: {
        noLogin: true
      },
      views: {
        'content': {
          templateUrl: 'app/components/login/loginView.html'
        }
      }
    });
    $urlRouterProvider.otherwise('/');
  }

  return ActorConfig;

})();

ActorConfig.$inject = ['$stateProvider', '$urlRouterProvider'];

angular.module('actorWeb').config(ActorConfig);

var ActorRun;

ActorRun = (function() {
  function ActorRun($rootScope, $state, $stateParams, actorService) {
    console.log('[AW]Run');
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $rootScope.isLoggedIn = null;
    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
      return actorService.checkAccess(event, toState, toParams, fromState, fromParams);
    });
  }

  return ActorRun;

})();

ActorRun.$inject = ['$rootScope', '$state', '$stateParams', 'actorService'];

angular.module('actorWeb').run(ActorRun);

var ActorService,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ActorService = (function() {
  ActorService.prototype.messenger = null;

  function ActorService($rootScope, $sessionStorage) {
    this.$rootScope = $rootScope;
    this.$sessionStorage = $sessionStorage;
    this.setLoggedOut = bind(this.setLoggedOut, this);
    this.setLoggedIn = bind(this.setLoggedIn, this);
    console.log('[AW]ActorService constructor');
    this.isLoggedIn = this.$sessionStorage.isLoggedIn;
    window.jsAppLoaded = (function(_this) {
      return function() {
        _this.initActor();
        return _this.$rootScope.$broadcast('actorReady');
      };
    })(this);
  }

  ActorService.prototype.initActor = function() {
    console.log('[AW]ActorService initActor');
    this.messenger = new actor.ActorApp;
    this.uid = this.messenger.getUid();
    return console.log('[AW]ActorService initActor: @uid:', this.uid);
  };

  ActorService.prototype.checkAccess = function(event, toState, toParams, fromState, fromParams) {
    if (toState.data !== void 0) {
      if (toState.data.noLogin !== void 0 && toState.data.noLogin) {
        console.log('[AW]ActorService checkAccess: before login');
      }
    } else {
      if (this.$sessionStorage.isLoggedIn) {
        console.log('[AW]ActorService checkAccess: authenticated');
        return this.$rootScope.isLoggedIn = this.$sessionStorage.isLoggedIn;
      } else {
        console.log('[AW]ActorService checkAccess: redirect to login');
        event.preventDefault();
        return this.$rootScope.$state.go('login');
      }
    }
  };

  ActorService.prototype.setLoggedIn = function() {
    console.log('[AW]ActorService setLoggedIn');
    this.isLoggedIn = true;
    this.$rootScope.isLoggedIn = true;
    this.$sessionStorage.isLoggedIn = true;
    this.$rootScope.$state.go('home');
    return this.$rootScope.$broadcast('actorLoggedIn');
  };

  ActorService.prototype.setLoggedOut = function() {
    console.log('[AW]ActorService setLoggedOut');
    this.isLoggedIn = false;
    this.$rootScope.isLoggedIn = false;
    this.$sessionStorage.isLoggedIn = false;
    this.$rootScope.$state.go('login');
    return this.$rootScope.$broadcast('actorLoggedOut');
  };

  ActorService.prototype.requestSms = function(phone) {
    console.log('[AW]ActorService requestSms');
    return this.messenger.requestSms(phone.toString(), function(state) {
      return console.log('[AW]ActorService requestSms: state:', state);
    }, function(tag, message, canTryAgain, state) {
      return console.log('[AW]ActorService requestSms: error');
    });
  };

  ActorService.prototype.sendCode = function(code) {
    console.log('[AW]ActorService sendCode');
    return this.messenger.sendCode(code, (function(_this) {
      return function(state) {
        console.log('[AW]ActorService sendCode: state:', state);
        if (state === 'logged_in') {
          return _this.setLoggedIn();
        }
      };
    })(this), function(tag, message, canTryAgain, state) {
      return console.log('[AW]ActorService sendCode: error');
    });
  };

  ActorService.prototype.getDialogs = function(callback) {
    console.log('[AW]ActorService getDialogs');
    return this.messenger.bindDialogs(function(items) {
      console.log('[AW]ActorService getDialogs: items', items);
      return callback(items);
    });
  };

  ActorService.prototype.closeConversation = function(peer) {
    console.log('[AW]ActorService closeConversation');
    console.log('[AW]ActorService closeConversation: peer:', peer);
    this.messenger.onConversationClosed(peer);
    return this.$rootScope.$broadcast('closeConversation', peer);
  };

  ActorService.prototype.openConversation = function(peer) {
    console.log('[AW]ActorService openConversation');
    console.log('[AW]ActorService openConversation: peer:', peer);
    this.messenger.onConversationOpen(peer);
    return this.$rootScope.$broadcast('openConversation', peer);
  };

  ActorService.prototype.bindChat = function(peer, callback) {
    console.log('[AW]ActorService bindChat');
    console.log('[AW]ActorService bindChat: peer:', peer);
    return this.messenger.bindChat(peer, callback);
  };

  return ActorService;

})();

ActorService.$inject = ['$rootScope', '$sessionStorage'];

angular.module('actorWeb').service('actorService', ActorService);

var LoginController;

LoginController = (function() {
  function LoginController(actorService) {
    this.actorService = actorService;
    console.log('[AW]LoginController constructor');
  }

  LoginController.prototype.isCodeRequested = false;

  LoginController.prototype.allow = false;

  LoginController.prototype.requestCode = function(phone) {
    console.log('[AW]LoginController requestCode');
    this.actorService.requestSms(phone);
    return this.isCodeRequested = true;
  };

  LoginController.prototype.checkCode = function(code) {
    console.log('[AW]LoginController checkCode');
    return this.actorService.sendCode(code);
  };

  return LoginController;

})();

LoginController.$inject = ['actorService'];

angular.module('actorWeb').controller('loginController', LoginController);

var MainController;

MainController = (function() {
  function MainController($mdSidenav, $mdMedia, $mdBottomSheet, actorService) {
    this.$mdSidenav = $mdSidenav;
    this.$mdMedia = $mdMedia;
    this.$mdBottomSheet = $mdBottomSheet;
    this.actorService = actorService;
    console.log('[AW]MainController constructor');
  }

  MainController.prototype.showBottomSheet = function() {
    console.log('[AW]MainController showBottomSheet');
    return this.$mdBottomSheet.show({
      templateUrl: 'app/shared/bottomSheet/bottomSheetView.html',
      parent: '#content',
      disableParentScroll: false
    });
  };

  MainController.prototype.openSidebar = function() {
    console.log('[AW]MainController openSidebar');
    return this.$mdSidenav('left').toggle();
  };

  return MainController;

})();

MainController.$inject = ['$mdSidenav', '$mdMedia', '$mdBottomSheet', 'actorService'];

angular.module('actorWeb').controller('mainController', MainController);

var ChatsController;

ChatsController = (function() {
  ChatsController.prototype.selectedChat = null;

  function ChatsController($rootScope, actorService) {
    this.$rootScope = $rootScope;
    this.actorService = actorService;
    console.log('[AW]ChatsController constructor');
    this.$rootScope.$on('actorReady', (function(_this) {
      return function() {
        console.log('[AW]ChatsController constructor: actorReady fired.');
        return _this.getChats();
      };
    })(this));
  }

  ChatsController.prototype.getChats = function() {
    console.log('[AW]ChatsController getChats');
    this.actorService.getDialogs((function(_this) {
      return function(items) {
        return _this.list = items;
      };
    })(this));
    return console.log('[AW]ChatsController getChats: @list:', this.list);
  };

  ChatsController.prototype.selectChat = function(chat) {
    console.log('[AW]ChatsController selectChat');
    console.log('[AW]ChatsController selectChat: @selectedChat:', this.selectedChat);
    if (this.selectedChat) {
      this.actorService.closeConversation(this.selectedChat);
    }
    this.selectedChat = chat;
    return this.actorService.openConversation(this.selectedChat);
  };

  return ChatsController;

})();

ChatsController.$inject = ['$rootScope', 'actorService'];

angular.module('actorWeb').controller('chatsController', ChatsController);

var MessagesController,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

MessagesController = (function() {
  MessagesController.prototype.list = null;

  function MessagesController($rootScope, actorService) {
    this.$rootScope = $rootScope;
    this.actorService = actorService;
    this.renderMessages = bind(this.renderMessages, this);
    console.log('[AW]MessagesController constructor');
    this.$rootScope.$on('openConversation', (function(_this) {
      return function(event, peer) {
        return _this.getMessages(peer);
      };
    })(this));
  }

  MessagesController.prototype.getMessages = function(peer) {
    console.log('[AW]MessagesController getMessages');
    console.log('[AW]MessagesController getMessages: peer:', peer);
    return this.actorService.bindChat(peer, this.renderMessages);
  };

  MessagesController.prototype.renderMessages = function(messages) {
    console.log('[AW]MessagesController renderMessages');
    console.log('[AW]MessagesController renderMessages: messages:', messages);
    return this.list = messages;
  };

  return MessagesController;

})();

MessagesController.$inject = ['$rootScope', 'actorService'];

angular.module('actorWeb').controller('messagesController', MessagesController);



//# sourceMappingURL=data:application/json;base64,