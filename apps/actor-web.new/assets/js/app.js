angular.module('actorWeb', ['ui.router', 'ngMaterial', 'ngStorage']);

var ActorConfig;

ActorConfig = (function() {
  function ActorConfig($stateProvider, $urlRouterProvider) {
    $stateProvider.state('home', {
      url: '/',
      views: {
        'sidebar': {
          templateUrl: 'app/shared/sidebar/sidebarDefaultView.html'
        },
        'toolbar': {
          templateUrl: 'app/shared/toolbar/toolbarDefaultView.html'
        },
        'content': {
          templateUrl: 'app/shared/messages/messagesListView.html'
        }
      }
    }).state('login', {
      url: '/login',
      data: {
        noLogin: true
      },
      views: {
        'content': {
          templateUrl: 'app/components/login/loginView.html'
        }
      }
    });
    $urlRouterProvider.otherwise('/');
  }

  return ActorConfig;

})();

ActorConfig.$inject = ['$stateProvider', '$urlRouterProvider'];

angular.module('actorWeb').config(ActorConfig);

var ActorRun;

ActorRun = (function() {
  function ActorRun($rootScope, $state, $stateParams, actorService) {
    console.log('[AW]Run');
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $rootScope.isLogedIn = null;
    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
      return actorService.checkAccess(event, toState, toParams, fromState, fromParams);
    });
  }

  return ActorRun;

})();

ActorRun.$inject = ['$rootScope', '$state', '$stateParams', 'actorService'];

angular.module('actorWeb').run(ActorRun);

var ActorService,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ActorService = (function() {
  function ActorService($rootScope, $sessionStorage) {
    this.$rootScope = $rootScope;
    this.$sessionStorage = $sessionStorage;
    this.setLoggedOut = bind(this.setLoggedOut, this);
    this.setLoggedIn = bind(this.setLoggedIn, this);
    console.log('[AW]ActorService constructor');
    this.isLoggedIn = this.$sessionStorage.isLoggedIn;
    window.jsAppLoaded = (function(_this) {
      return function() {
        _this.messenger = new actor.ActorApp;
        return _this.$rootScope.$broadcast('actor-ready');
      };
    })(this);
  }

  ActorService.prototype.setLoggedIn = function() {
    console.log('[AW]ActorService setLoggedIn()');
    this.isLoggedIn = true;
    this.$rootScope.isLogedIn = true;
    this.$sessionStorage.isLogedIn = true;
    return this.$rootScope.$state.go('home');
  };

  ActorService.prototype.setLoggedOut = function() {
    console.log('[AW]ActorService setLoggedOut()');
    this.isLoggedIn = false;
    this.$rootScope.isLogedIn = false;
    this.$sessionStorage.isLogedIn = false;
    return this.$rootScope.$state.go('login');
  };

  ActorService.prototype.requestSms = function(phone) {
    console.log('[AW]ActorService requestSms()');
    return this.messenger.requestSms(phone.toString(), function(state) {
      return console.log('[AW]ActorService requestSms(): state:', state);
    }, function(tag, message, canTryAgain, state) {
      console.log('[AW]ActorService requestSms(): error');
      console.log('[AW]ActorService requestSms(): tag:', tag);
      console.log('[AW]ActorService requestSms(): message:', message);
      console.log('[AW]ActorService requestSms(): canTryAgain:', canTryAgain);
      return console.log('[AW]ActorService requestSms(): state:', state);
    });
  };

  ActorService.prototype.sendCode = function(code) {
    var setLoggedIn;
    console.log('[AW]ActorService sendCode()');
    setLoggedIn = this.setLoggedIn;
    return this.messenger.sendCode(code, function(state) {
      console.log('[AW]ActorService sendCode(): state:', state);
      if (state === 'logged_in') {
        return setLoggedIn();
      }
    }, function(tag, message, canTryAgain, state) {
      console.log('[AW]ActorService sendCode(): error');
      console.log('[AW]ActorService sendCode(): tag:', tag);
      console.log('[AW]ActorService sendCode(): message:', message);
      console.log('[AW]ActorService sendCode(): canTryAgain:', canTryAgain);
      return console.log('[AW]ActorService sendCode(): state:', state);
    });
  };

  ActorService.prototype.getDialogs = function(callback) {
    console.log('[AW]ActorService getDialogs()');
    return this.messenger.bindDialogs(function(items) {
      return callback(items);
    });
  };

  ActorService.prototype.checkAccess = function(event, toState, toParams, fromState, fromParams) {
    if (toState.data !== void 0) {
      if (toState.data.noLogin !== void 0 && toState.data.noLogin) {
        console.log('[AW]ActorService checkAccess(): before login');
      }
    } else {
      if (this.$sessionStorage.isLogedIn) {
        console.log('[AW]ActorService checkAccess(): authenticated');
        return this.$rootScope.isLogedIn = this.$sessionStorage.isLogedIn;
      } else {
        console.log('[AW]ActorService checkAccess(): redirect to login');
        event.preventDefault();
        return this.$rootScope.$state.go('login');
      }
    }
  };

  return ActorService;

})();

ActorService.$inject = ['$rootScope', '$sessionStorage'];

angular.module('actorWeb').service('actorService', ActorService);

var LoginController;

LoginController = (function() {
  function LoginController(actorService) {
    this.actorService = actorService;
    console.log('[AW]LoginController constructor');
  }

  LoginController.prototype.isCodeRequested = false;

  LoginController.prototype.requestCode = function(phone) {
    console.log('[AW]LoginController requestCode()');
    this.actorService.requestSms(phone);
    return this.isCodeRequested = true;
  };

  LoginController.prototype.checkCode = function(code) {
    console.log('[AW]LoginController checkCode()');
    return this.actorService.sendCode(code);
  };

  return LoginController;

})();

LoginController.$inject = ['actorService'];

angular.module('actorWeb').controller('loginController', LoginController);

var MainController;

MainController = (function() {
  function MainController($mdSidenav, $mdMedia, $mdBottomSheet, actorService) {
    this.$mdSidenav = $mdSidenav;
    this.$mdMedia = $mdMedia;
    this.$mdBottomSheet = $mdBottomSheet;
    this.actorService = actorService;
    console.log('[AW]MainController constructor');
  }

  MainController.prototype.showBottomSheet = function() {
    console.log('[AW]MainController showBottomSheet()');
    return this.$mdBottomSheet.show({
      templateUrl: 'app/shared/bottomSheet/bottomSheetView.html',
      parent: '#content',
      disableParentScroll: false
    });
  };

  MainController.prototype.openSidebar = function() {
    console.log('[AW]MainController openSidebar()');
    return this.$mdSidenav('left').toggle();
  };

  return MainController;

})();

MainController.$inject = ['$mdSidenav', '$mdMedia', '$mdBottomSheet', 'actorService'];

angular.module('actorWeb').controller('mainController', MainController);

var ChatsController;

ChatsController = (function() {
  function ChatsController($scope, actorService) {
    this.$scope = $scope;
    this.actorService = actorService;
    console.log('[AW]ChatsController constructor');
    this.$scope.$on('actor-ready', (function(_this) {
      return function() {
        return _this.getChats();
      };
    })(this));
  }

  ChatsController.prototype.getChats = function() {
    console.log('[AW]ChatsController getChats()');
    this.actorService.getDialogs((function(_this) {
      return function(items) {
        items.forEach(function(item) {
          console.log(item);
          if (!item.peer.avatar) {
            item.peer.avatar = 'http://api.adorable.io/avatars/48/';
            item.peer.avatar += item.peer.peer.id;
            return item.peer.avatar += '.png';
          }
        });
        return _this.list = items;
      };
    })(this));
    return console.log('[AW]ChatsController @list:', this.list);
  };

  return ChatsController;

})();

ChatsController.$inject = ['$scope', 'actorService'];

angular.module('actorWeb').controller('chatsController', ChatsController);

var MessagesController;

MessagesController = (function() {
  function MessagesController() {
    console.log('[AW]MessagesController constructor');
  }

  MessagesController.prototype.list = [
    {
      who: 'Min Li Chan',
      notes: ['A robot may not injure a human being or, through inaction, allow a human being to come to harm.', 'A robot must obey the orders given it by human beings, except where such orders would conflict with the First Law.', 'A robot must protect its own existence as long as such protection does not conflict with the First or Second Law.']
    }, {
      who: 'Толян',
      notes: ['Проверка блин']
    }, {
      who: 'Min Li Chan',
      notes: ['Brunch this weekend?']
    }, {
      who: 'Женя',
      notes: ["I'll be in your neighborhood doing errands"]
    }
  ];

  return MessagesController;

})();

angular.module('actorWeb').controller('messagesController', MessagesController);



//# sourceMappingURL=data:application/json;base64,