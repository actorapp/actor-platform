angular.module('actorWeb', ['ui.router', 'ngMaterial', 'ngStorage', 'luegg.directives']);

var ActorConfig;

ActorConfig = (function() {
  function ActorConfig($stateProvider, $urlRouterProvider) {
    $stateProvider.state('home', {
      url: '/',
      views: {
        'sidebar': {
          templateUrl: 'app/shared/sidebar/sidebarDefaultView.html'
        },
        'toolbar': {
          templateUrl: 'app/shared/toolbar/toolbarDefaultView.html'
        },
        'content': {
          templateUrl: 'app/shared/messages/messagesListView.html'
        },
        'compose': {
          templateUrl: 'app/shared/compose/copmoseView.html'
        }
      }
    }).state('login', {
      url: '/login',
      data: {
        noLogin: true
      },
      views: {
        'content': {
          templateUrl: 'app/components/login/loginView.html'
        }
      }
    });
    $urlRouterProvider.otherwise('/');
  }

  return ActorConfig;

})();

ActorConfig.$inject = ['$stateProvider', '$urlRouterProvider'];

angular.module('actorWeb').config(ActorConfig);

var ActorRun;

ActorRun = (function() {
  function ActorRun($rootScope, $state, $stateParams, actorService) {
    console.log('[AW]Run');
    $rootScope.$state = $state;
    $rootScope.$stateParams = $stateParams;
    $rootScope.isLoggedIn = null;
    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
      return actorService.checkAccess(event, toState, toParams, fromState, fromParams);
    });
  }

  return ActorRun;

})();

ActorRun.$inject = ['$rootScope', '$state', '$stateParams', 'actorService'];

angular.module('actorWeb').run(ActorRun);

var ActorService,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ActorService = (function() {
  ActorService.prototype.messenger = null;

  ActorService.prototype.currentPeer = null;

  ActorService.prototype.isLoggedIn = false;

  function ActorService($rootScope, $sessionStorage) {
    this.$rootScope = $rootScope;
    this.$sessionStorage = $sessionStorage;
    this.setLoggedOut = bind(this.setLoggedOut, this);
    this.setLoggedIn = bind(this.setLoggedIn, this);
    console.log('[AW]ActorService constructor');
    window.jsAppLoaded = (function(_this) {
      return function() {
        _this.initActor();
        console.log('[AW]ActorService $broadcast: actorReady');
        return _this.$rootScope.$broadcast('actorReady');
      };
    })(this);
  }

  ActorService.prototype.initActor = function() {
    console.log('[AW]ActorService initActor');
    this.messenger = new actor.ActorApp;
    this.isLoggedIn = this.messenger.isLoggedIn();
    console.log('[AW]ActorService initActor: @isLoggedIn:', this.isLoggedIn);
    if (this.isLoggedIn) {
      return this.setLoggedIn();
    }
  };

  ActorService.prototype.checkAccess = function(event, toState, toParams, fromState, fromParams) {
    console.log('[AW]ActorService checkAccess');
    if (toState.data !== void 0) {
      if (toState.data.noLogin !== void 0 && toState.data.noLogin) {
        console.log('[AW]ActorService checkAccess: before login');
      }
    } else {
      if (this.$sessionStorage.isLoggedIn) {
        console.log('[AW]ActorService checkAccess: authenticated');
        return this.$rootScope.isLoggedIn = this.$sessionStorage.isLoggedIn;
      } else {
        console.log('[AW]ActorService checkAccess: redirect to login');
        event.preventDefault();
        return this.$rootScope.$state.go('login');
      }
    }
  };

  ActorService.prototype.setLoggedIn = function() {
    console.log('[AW]ActorService setLoggedIn');
    this.isLoggedIn = true;
    this.$rootScope.isLoggedIn = true;
    this.$sessionStorage.isLoggedIn = true;
    this.$rootScope.$state.go('home');
    return this.$rootScope.$broadcast('actorLoggedIn');
  };

  ActorService.prototype.setLoggedOut = function() {
    console.log('[AW]ActorService setLoggedOut');
    this.isLoggedIn = false;
    this.$rootScope.isLoggedIn = false;
    this.$sessionStorage.isLoggedIn = false;
    this.$rootScope.$state.go('login');
    return this.$rootScope.$broadcast('actorLoggedOut');
  };

  ActorService.prototype.requestSms = function(phone) {
    console.log('[AW]ActorService requestSms');
    return this.messenger.requestSms(phone.toString(), function(state) {
      return console.log('[AW]ActorService requestSms: state:', state);
    }, function(tag, message, canTryAgain, state) {
      return console.log('[AW]ActorService requestSms: error');
    });
  };

  ActorService.prototype.sendCode = function(code) {
    console.log('[AW]ActorService sendCode');
    return this.messenger.sendCode(code, (function(_this) {
      return function(state) {
        console.log('[AW]ActorService sendCode: state:', state);
        if (state === 'logged_in') {
          return _this.setLoggedIn();
        }
      };
    })(this), function(tag, message, canTryAgain, state) {
      return console.log('[AW]ActorService sendCode: error');
    });
  };

  ActorService.prototype.bindDialogs = function(callback) {
    console.log('[AW]ActorService getDialogs');
    return this.messenger.bindDialogs(function(items) {
      console.log('[AW]ActorService getDialogs: items', items);
      return callback(items);
    });
  };

  ActorService.prototype.closeConversation = function(peer) {
    console.log('[AW]ActorService closeConversation');
    console.log('[AW]ActorService closeConversation: peer:', peer);
    this.messenger.onConversationClosed(peer);
    return this.$rootScope.$broadcast('closeConversation', peer);
  };

  ActorService.prototype.openConversation = function(peer) {
    console.log('[AW]ActorService openConversation');
    console.log('[AW]ActorService openConversation: peer:', peer);
    this.setCurrentPeer(peer);
    this.messenger.onConversationOpen(peer);
    return this.$rootScope.$broadcast('openConversation', peer);
  };

  ActorService.prototype.bindChat = function(peer, callback) {
    console.log('[AW]ActorService bindChat');
    console.log('[AW]ActorService bindChat: peer:', peer);
    return this.messenger.bindChat(peer, callback);
  };

  ActorService.prototype.setCurrentPeer = function(peer) {
    console.log('[AW]ActorService setCurrentPeer');
    console.log('[AW]ActorService setCurrentPeer: peer:', peer);
    return this.currentPeer = peer;
  };

  ActorService.prototype.onTyping = function() {
    console.log('[AW]ActorService onTyping');
    return this.messenger.onTyping(this.currentPeer);
  };

  ActorService.prototype.sendMessage = function(peer, message) {
    console.log('[AW]ActorService sendMessage');
    console.log('[AW]ActorService sendMessage: message:', message);
    console.log('[AW]ActorService sendMessage: peer:', peer);
    return this.messenger.sendMessage(peer, message);
  };

  return ActorService;

})();

ActorService.$inject = ['$rootScope', '$sessionStorage'];

angular.module('actorWeb').service('actorService', ActorService);

var LoginController;

LoginController = (function() {
  LoginController.prototype.isCodeRequested = false;

  function LoginController($rootScope, actorService) {
    this.$rootScope = $rootScope;
    this.actorService = actorService;
    console.log('[AW]LoginController constructor');
    if (this.actorService.isLoggedIn) {
      this.$rootScope.$state.go('home');
    }
  }

  LoginController.prototype.requestCode = function(phone) {
    console.log('[AW]LoginController requestCode');
    this.actorService.requestSms(phone);
    return this.isCodeRequested = true;
  };

  LoginController.prototype.checkCode = function(code) {
    console.log('[AW]LoginController checkCode');
    return this.actorService.sendCode(code);
  };

  return LoginController;

})();

LoginController.$inject = ['$rootScope', 'actorService'];

angular.module('actorWeb').controller('loginController', LoginController);

var MainController;

MainController = (function() {
  function MainController($mdSidenav, $mdMedia, actorService) {
    this.$mdSidenav = $mdSidenav;
    this.$mdMedia = $mdMedia;
    this.actorService = actorService;
    console.log('[AW]MainController constructor');
  }

  MainController.prototype.showCompose = function() {
    return console.log('[AW]MainController showCompose');
  };

  MainController.prototype.openSidebar = function() {
    console.log('[AW]MainController openSidebar');
    return this.$mdSidenav('left').toggle();
  };

  return MainController;

})();

MainController.$inject = ['$mdSidenav', '$mdMedia', 'actorService'];

angular.module('actorWeb').controller('mainController', MainController);

var ChatsController,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ChatsController = (function() {
  ChatsController.prototype.list = void 0;

  function ChatsController($scope, $rootScope, $timeout, actorService) {
    this.$scope = $scope;
    this.$rootScope = $rootScope;
    this.$timeout = $timeout;
    this.actorService = actorService;
    this.renderConversations = bind(this.renderConversations, this);
    console.log('[AW]ChatsController constructor');
    if (this.actorService.isLoggedIn) {
      console.log('[AW]ChatsController constructor: getConversations() if @actorService.isLoggedIn.');
      this.getConversations();
    }
    this.$rootScope.$on('actorReady', (function(_this) {
      return function() {
        console.log('[AW]ChatsController constructor: actorReady fired.');
        return _this.getConversations();
      };
    })(this));
  }

  ChatsController.prototype.getConversations = function() {
    console.log('[AW]ChatsController getChats');
    return this.actorService.bindDialogs((function(_this) {
      return function(items) {
        return _this.renderConversations(items);
      };
    })(this));
  };

  ChatsController.prototype.renderConversations = function(list) {
    console.log('[AW]MessagesController renderConversations');
    console.log('[AW]MessagesController renderConversations: list:', list);
    return this.$timeout((function(_this) {
      return function() {
        return _this.$scope.$apply(function(scope) {
          _this.scope = scope;
          _this.list = list;
          return _this.$rootScope.$broadcast('renderConversations');
        });
      };
    })(this));
  };

  ChatsController.prototype.selectChat = function(peer) {
    console.log('[AW]ChatsController selectChat');
    if (this.actorService.currentPeer) {
      this.actorService.closeConversation(this.actorService.currentPeer);
    }
    return this.actorService.openConversation(peer);
  };

  return ChatsController;

})();

ChatsController.$inject = ['$scope', '$rootScope', '$timeout', 'actorService'];

angular.module('actorWeb').controller('chatsController', ChatsController);

var ComposeController;

ComposeController = (function() {
  ComposeController.prototype.draft = null;

  ComposeController.prototype.message = null;

  ComposeController.prototype.isEnabled = false;

  function ComposeController($rootScope, actorService) {
    this.$rootScope = $rootScope;
    this.actorService = actorService;
    console.log('[AW]ComposeController constructor');
    this.$rootScope.$on('renderMessages', (function(_this) {
      return function() {
        console.log('[AW]ComposeController constructor: renderMessages fired.');
        return _this.enableCompose();
      };
    })(this));
  }

  ComposeController.prototype.enableCompose = function() {
    console.log('[AW]ComposeController enableCompose');
    this.isEnabled = true;
    if (this.draft) {
      this.message = this.draft;
    }
    console.log('[AW]ComposeController enableCompose: @message:', this.message);
    return console.log('[AW]ComposeController enableCompose: @draft:', this.draft);
  };

  ComposeController.prototype.onTyping = function() {
    console.log('[AW]ComposeController onTyping');
    return this.actorService.onTyping();
  };

  ComposeController.prototype.sendMessage = function() {
    console.log('[AW]ComposeController sendMessage');
    console.log('[AW]ComposeController sendMessage: @message:', this.message);
    console.log('[AW]ComposeController sendMessage: @draft:', this.draft);
    this.actorService.sendMessage(this.actorService.currentPeer, this.message);
    return this.message = null;
  };

  return ComposeController;

})();

ComposeController.$inject = ['$rootScope', 'actorService'];

angular.module('actorWeb').controller('composeController', ComposeController);

var MessagesController,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

MessagesController = (function() {
  MessagesController.prototype.list = null;

  function MessagesController($scope, $rootScope, $timeout, actorService) {
    this.$scope = $scope;
    this.$rootScope = $rootScope;
    this.$timeout = $timeout;
    this.actorService = actorService;
    this.renderMessages = bind(this.renderMessages, this);
    console.log('[AW]MessagesController constructor');
    this.$rootScope.$on('openConversation', (function(_this) {
      return function(event, peer) {
        console.log('[AW]MessagesController constructor: openConversation fired.');
        return _this.getMessages(peer);
      };
    })(this));
  }

  MessagesController.prototype.getMessages = function(peer) {
    console.log('[AW]MessagesController getMessages');
    console.log('[AW]MessagesController getMessages: peer:', peer);
    return this.actorService.bindChat(peer, this.renderMessages);
  };

  MessagesController.prototype.renderMessages = function(messages) {
    console.log('[AW]MessagesController renderMessages');
    console.log('[AW]MessagesController renderMessages: messages:', messages);
    return this.$timeout((function(_this) {
      return function() {
        return _this.$scope.$apply(function(scope) {
          _this.scope = scope;
          _this.list = messages;
          return _this.$rootScope.$broadcast('renderMessages');
        });
      };
    })(this));
  };

  return MessagesController;

})();

MessagesController.$inject = ['$scope', '$rootScope', '$timeout', 'actorService'];

angular.module('actorWeb').controller('messagesController', MessagesController);



//# sourceMappingURL=data:application/json;base64,