package im.actor.apiLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class ApiDescription_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    this.append("{");
    this.append("\"aliases\":[");
    Boolean isFirstAlias = true;
    for (SNode al : ListSequence.fromList(SLinkOperations.getTargets(node, "aliases", true))) {
      if (!(isFirstAlias)) {
        this.append(",");
      } else {
        isFirstAlias = false;
      }
      this.append("{\"type\":");
      appendNode(SLinkOperations.getTarget(al, "sourceType", true));
      this.append(",");
      this.append("\"alias\":\"");
      this.append(SPropertyOperations.getString(al, "name"));
      this.append("\"}");
    }
    this.append("],");
    this.appendNewLine();
    this.append("\"obj-c-prefix\":\"");
    this.append(SPropertyOperations.getString(node, "objcPrefix"));
    this.append("\",");
    this.append("\"java-package\":\"");
    this.append(SPropertyOperations.getString(node, "javaPackage"));
    this.append("\",");
    this.append("\"sections\":[");
    this.appendNewLine();
    Boolean isFirst = true;
    for (SNode section : ListSequence.fromList(SLinkOperations.getTargets(node, "sections", true))) {
      if (!(isFirst)) {
        this.append(",");
      } else {
        isFirst = false;
      }
      this.append("{\"title\":\"");
      this.append(SPropertyOperations.getString(section, "name"));
      this.append("\"");
      this.appendNewLine();
      this.append(",\"package\":\"");
      this.append(SPropertyOperations.getString(section, "package"));
      this.append("\"");
      this.appendNewLine();
      if (SLinkOperations.getTargets(section, "docs", true) != null && SLinkOperations.getTargets(section, "docs", true).size() > 0) {
        this.append(",\"doc\":[");
        this.appendNewLine();
        Boolean isFirstAttribute = true;
        for (SNode doc : ListSequence.fromList(SLinkOperations.getTargets(section, "docs", true))) {
          if (!(isFirstAttribute)) {
            this.append(",");
          } else {
            isFirstAttribute = false;
          }
          this.append("\"");
          this.append(SPropertyOperations.getString(doc, "text").replace("\"", "\\\""));
          this.append("\"");
        }
        this.append("]");
      }
      this.append(",\"items\":[");
      this.appendNewLine();
      this.increaseDepth();
      Boolean isFirstSection = true;
      for (SNode def : ListSequence.fromList(SLinkOperations.getTargets(section, "definitions", true))) {
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(def), "im.actor.apiLanguage.structure.Struct")) {
          if (!(isFirstSection)) {
            this.append(",");
          } else {
            isFirstSection = false;
          }
          appendNode(SNodeOperations.cast(def, "im.actor.apiLanguage.structure.Struct"));
        }
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(def), "im.actor.apiLanguage.structure.Enum")) {
          if (!(isFirstSection)) {
            this.append(",");
          } else {
            isFirstSection = false;
          }
          appendNode(SNodeOperations.cast(def, "im.actor.apiLanguage.structure.Enum"));
        }
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(def), "im.actor.apiLanguage.structure.Rpc")) {
          if (!(isFirstSection)) {
            this.append(",");
          } else {
            isFirstSection = false;
          }
          appendNode(SNodeOperations.cast(def, "im.actor.apiLanguage.structure.Rpc"));
        }
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(def), "im.actor.apiLanguage.structure.Update")) {
          if (!(isFirstSection)) {
            this.append(",");
          } else {
            isFirstSection = false;
          }
          appendNode(SNodeOperations.cast(def, "im.actor.apiLanguage.structure.Update"));
        }
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(def), "im.actor.apiLanguage.structure.UpdateBox")) {
          if (!(isFirstSection)) {
            this.append(",");
          } else {
            isFirstSection = false;
          }
          appendNode(SNodeOperations.cast(def, "im.actor.apiLanguage.structure.UpdateBox"));
        }
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(def), "im.actor.apiLanguage.structure.Response")) {
          if (!(isFirstSection)) {
            this.append(",");
          } else {
            isFirstSection = false;
          }
          appendNode(SNodeOperations.cast(def, "im.actor.apiLanguage.structure.Response"));
        }
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(def), "im.actor.apiLanguage.structure.Trait")) {
          if (!(isFirstSection)) {
            this.append(",");
          } else {
            isFirstSection = false;
          }
          appendNode(SNodeOperations.cast(def, "im.actor.apiLanguage.structure.Trait"));
        }

        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(def), "im.actor.apiLanguage.structure.ApiEmptyDef")) {
          if (!(isFirstSection)) {
            this.append(",");
          } else {
            isFirstSection = false;
          }
          this.append("{\"type\":\"empty\"}");
        }
        if (SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(def), "im.actor.apiLanguage.structure.ApiComment")) {
          if (!(isFirstSection)) {
            this.append(",");
          } else {
            isFirstSection = false;
          }
          this.append("{\"type\":\"comment\",\"content\":\"");
          this.append(SPropertyOperations.getString(SNodeOperations.cast(def, "im.actor.apiLanguage.structure.ApiComment"), "text"));
          this.append("\"}");
        }


      }
      this.decreaseDepth();
      this.append("]");
      this.append("}");
    }
    this.append("]");
    this.append("}");
  }

  public String getExtension(SNode node) {
    return "json";
  }

  @Override
  public String getFilename(SNode node) {
    return SPropertyOperations.getString(node, "name");
  }
}
