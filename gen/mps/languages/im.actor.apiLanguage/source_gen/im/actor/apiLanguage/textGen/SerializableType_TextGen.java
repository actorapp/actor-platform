package im.actor.apiLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class SerializableType_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    if (SNodeOperations.isInstanceOf(node, "im.actor.apiLanguage.structure.List")) {
      SNode list = SNodeOperations.cast(node, "im.actor.apiLanguage.structure.List");
      this.append("{\"type\":\"list\",\"childType\":");
      appendNode(SLinkOperations.getTarget(list, "type", true));
      this.append("}");
    } else if (SNodeOperations.isInstanceOf(node, "im.actor.apiLanguage.structure.Optional")) {
      SNode opt = SNodeOperations.cast(node, "im.actor.apiLanguage.structure.Optional");
      this.append("{\"type\":\"opt\",\"childType\":");
      appendNode(SLinkOperations.getTarget(opt, "type", true));
      this.append("}");
    } else if (SNodeOperations.isInstanceOf(node, "im.actor.apiLanguage.structure.StructType")) {
      SNode str = SNodeOperations.cast(node, "im.actor.apiLanguage.structure.StructType");
      this.append("{\"type\":\"struct\",\"childType\":\"");
      this.append(SPropertyOperations.getString(SLinkOperations.getTarget(str, "struct", false), "name"));
      this.append("\"}");
    } else if (SNodeOperations.isInstanceOf(node, "im.actor.apiLanguage.structure.EnumType")) {
      SNode en = SNodeOperations.cast(node, "im.actor.apiLanguage.structure.EnumType");
      this.append("{\"type\":\"enum\",\"childType\":\"");
      this.append(SPropertyOperations.getString(SLinkOperations.getTarget(en, "struct", false), "name"));
      this.append("\"}");
    } else if (SNodeOperations.isInstanceOf(node, "im.actor.apiLanguage.structure.AliasType")) {
      SNode at = SNodeOperations.cast(node, "im.actor.apiLanguage.structure.AliasType");
      this.append("{\"type\":\"alias\",\"childType\":\"");
      this.append(SPropertyOperations.getString(SLinkOperations.getTarget(at, "alias", false), "name"));
      this.append("\"}");
    } else if (SNodeOperations.isInstanceOf(node, "im.actor.apiLanguage.structure.TraitType")) {
      SNode tt = SNodeOperations.cast(node, "im.actor.apiLanguage.structure.TraitType");
      this.append("{\"type\":\"trait\",\"childType\":\"");
      this.append(SPropertyOperations.getString(SLinkOperations.getTarget(tt, "trait", false), "name"));
      this.append("\"}");
    } else {
      this.append("\"");
      this.append(node + "");
      this.append("\"");
    }
  }
}
