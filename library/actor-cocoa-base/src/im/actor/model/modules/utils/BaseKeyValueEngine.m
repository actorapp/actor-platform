//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/utils/BaseKeyValueEngine.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/utils/BaseKeyValueEngine.java"

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/engine/KeyValueItem.h"
#include "im/actor/model/droidkit/engine/KeyValueRecord.h"
#include "im/actor/model/droidkit/engine/KeyValueStorage.h"
#include "im/actor/model/modules/utils/BaseKeyValueEngine.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ImActorModelModulesUtilsBaseKeyValueEngine () {
 @public
  JavaUtilHashMap *cache_;
  id<DKKeyValueStorage> storage_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesUtilsBaseKeyValueEngine, cache_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ImActorModelModulesUtilsBaseKeyValueEngine, storage_, id<DKKeyValueStorage>)


#line 15
@implementation ImActorModelModulesUtilsBaseKeyValueEngine


#line 20
- (instancetype)initWithDKKeyValueStorage:(id<DKKeyValueStorage>)storage {
  ImActorModelModulesUtilsBaseKeyValueEngine_initWithDKKeyValueStorage_(self, storage);
  return self;
}


#line 29
- (void)addOrUpdateItemWithDKKeyValueItem:(id<DKKeyValueItem>)item {
  @synchronized(self) {
    
#line 30
    (void) [((JavaUtilHashMap *) nil_chk(cache_)) putWithId:JavaLangLong_valueOfWithLong_([((id<DKKeyValueItem>) nil_chk(item)) getEngineId]) withId:item];
    IOSByteArray *data = [self serializeWithDKKeyValueItem:item];
    [((id<DKKeyValueStorage>) nil_chk(storage_)) addOrUpdateItemWithLong:[item getEngineId] withByteArray:data];
  }
}


#line 36
- (void)addOrUpdateItemsWithJavaUtilList:(id<JavaUtilList>)values {
  @synchronized(self) {
    
#line 37
    for (id<DKKeyValueItem> __strong t in nil_chk(values)) {
      (void) [((JavaUtilHashMap *) nil_chk(cache_)) putWithId:JavaLangLong_valueOfWithLong_([((id<DKKeyValueItem>) nil_chk(t)) getEngineId]) withId:t];
    }
    
#line 41
    JavaUtilArrayList *records = new_JavaUtilArrayList_init();
    for (id<DKKeyValueItem> __strong v in values) {
      [records addWithId:new_DKKeyValueRecord_initWithLong_withByteArray_([((id<DKKeyValueItem>) nil_chk(v)) getEngineId], [self serializeWithDKKeyValueItem:v])];
    }
    [((id<DKKeyValueStorage>) nil_chk(storage_)) addOrUpdateItemsWithJavaUtilList:records];
  }
}


#line 49
- (void)removeItemWithLong:(jlong)id_ {
  @synchronized(self) {
    
#line 50
    (void) [((JavaUtilHashMap *) nil_chk(cache_)) removeWithId:JavaLangLong_valueOfWithLong_(id_)];
    [((id<DKKeyValueStorage>) nil_chk(storage_)) removeItemWithLong:id_];
  }
}


#line 55
- (void)removeItemsWithLongArray:(IOSLongArray *)ids {
  @synchronized(self) {
    {
      IOSLongArray *a__ =
#line 56
      ids;
      jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
      jlong const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jlong l = *b__++;
        
#line 57
        (void) [((JavaUtilHashMap *) nil_chk(cache_)) removeWithId:JavaLangLong_valueOfWithLong_(l)];
      }
    }
    
#line 59
    [((id<DKKeyValueStorage>) nil_chk(storage_)) removeItemsWithLongArray:ids];
  }
}


#line 63
- (void)clear {
  @synchronized(self) {
    
#line 64
    [((JavaUtilHashMap *) nil_chk(cache_)) clear];
    [((id<DKKeyValueStorage>) nil_chk(storage_)) clear];
  }
}


#line 69
- (id)getValueWithLong:(jlong)id_ {
  @synchronized(self) {
    
#line 70
    if ([((JavaUtilHashMap *) nil_chk(cache_)) containsKeyWithId:JavaLangLong_valueOfWithLong_(id_)]) {
      return [cache_ getWithId:JavaLangLong_valueOfWithLong_(id_)];
    }
    
#line 74
    IOSByteArray *data = [((id<DKKeyValueStorage>) nil_chk(storage_)) getValueWithLong:id_];
    if (data != nil) {
      id<DKKeyValueItem> res = [self deserializeWithByteArray:data];
      (void) [cache_ putWithId:JavaLangLong_valueOfWithLong_([((id<DKKeyValueItem>) nil_chk(res)) getEngineId]) withId:res];
      return res;
    }
    else {
      
#line 80
      return nil;
    }
  }
}

@end


#line 20
void ImActorModelModulesUtilsBaseKeyValueEngine_initWithDKKeyValueStorage_(ImActorModelModulesUtilsBaseKeyValueEngine *self, id<DKKeyValueStorage> storage) {
  (void) NSObject_init(self);
  self->cache_ = new_JavaUtilHashMap_init();
  
#line 21
  self->storage_ = storage;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesUtilsBaseKeyValueEngine)
