//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/messages/ConversationActor.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/messages/ConversationActor.java"

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/engine/ListEngine.h"
#include "im/actor/model/droidkit/engine/SyncKeyValue.h"
#include "im/actor/model/entity/Message.h"
#include "im/actor/model/entity/MessageState.h"
#include "im/actor/model/entity/Peer.h"
#include "im/actor/model/entity/content/AbsContent.h"
#include "im/actor/model/entity/content/DocumentContent.h"
#include "im/actor/model/entity/content/PhotoContent.h"
#include "im/actor/model/entity/content/VideoContent.h"
#include "im/actor/model/modules/Messages.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/messages/ConversationActor.h"
#include "im/actor/model/modules/messages/DialogsActor.h"
#include "im/actor/model/modules/messages/entity/OutUnreadMessage.h"
#include "im/actor/model/modules/messages/entity/OutUnreadMessagesStorage.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "java/io/IOException.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface ImActorModelModulesMessagesConversationActor () {
 @public
  AMPeer *peer_;
  id<DKListEngine> messages_;
  id<DKListEngine> media_;
  ImActorModelModulesMessagesEntityOutUnreadMessagesStorage *messagesStorage_;
  DKActorRef *dialogsActor_;
  DKSyncKeyValue *pendingKeyValue_;
}

- (void)onInMessageWithAMMessage:(AMMessage *)message;

- (void)onMessageContentUpdatedWithLong:(jlong)rid
                       withAMAbsContent:(AMAbsContent *)content;

- (void)onMessageSentWithLong:(jlong)rid
                     withLong:(jlong)date;

- (void)onMessageErrorWithLong:(jlong)rid;

- (void)onMessagePlainReadWithLong:(jlong)date;

- (void)onMessagePlainReceivedWithLong:(jlong)date;

- (void)onMessageEncryptedReceivedWithLong:(jlong)rid;

- (void)onMessageEncryptedReadWithLong:(jlong)rid;

- (void)onMessagesDeletedWithJavaUtilList:(id<JavaUtilList>)rids;

- (void)onClearConversation;

- (void)onDeleteConversation;

- (void)onHistoryLoadedWithJavaUtilList:(id<JavaUtilList>)history;

- (void)savePending;

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, messages_, id<DKListEngine>)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, media_, id<DKListEngine>)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, messagesStorage_, ImActorModelModulesMessagesEntityOutUnreadMessagesStorage *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, dialogsActor_, DKActorRef *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, pendingKeyValue_, DKSyncKeyValue *)

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onInMessageWithAMMessage_(ImActorModelModulesMessagesConversationActor *self, AMMessage *message);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageContentUpdatedWithLong_withAMAbsContent_(ImActorModelModulesMessagesConversationActor *self, jlong rid, AMAbsContent *content);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageSentWithLong_withLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid, jlong date);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageErrorWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessagePlainReadWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong date);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessagePlainReceivedWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong date);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageEncryptedReceivedWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageEncryptedReadWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessagesDeletedWithJavaUtilList_(ImActorModelModulesMessagesConversationActor *self, id<JavaUtilList> rids);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onClearConversation(ImActorModelModulesMessagesConversationActor *self);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onDeleteConversation(ImActorModelModulesMessagesConversationActor *self);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onHistoryLoadedWithJavaUtilList_(ImActorModelModulesMessagesConversationActor *self, id<JavaUtilList> history);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_savePending(ImActorModelModulesMessagesConversationActor *self);

@interface ImActorModelModulesMessagesConversationActor_MessageContentUpdated () {
 @public
  jlong rid_;
  AMAbsContent *content_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor_MessageContentUpdated, content_, AMAbsContent *)

@interface ImActorModelModulesMessagesConversationActor_HistoryLoaded () {
 @public
  id<JavaUtilList> messages_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor_HistoryLoaded, messages_, id<JavaUtilList>)

@interface ImActorModelModulesMessagesConversationActor_MessageReceived () {
 @public
  jlong date_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived () {
 @public
  jlong rid_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessageRead () {
 @public
  jlong date_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessageEncryptedRead () {
 @public
  jlong rid_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessageSent () {
 @public
  jlong rid_;
  jlong date_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessageError () {
 @public
  jlong rid_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessagesDeleted () {
 @public
  id<JavaUtilList> rids_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor_MessagesDeleted, rids_, id<JavaUtilList>)


#line 32
@implementation ImActorModelModulesMessagesConversationActor


#line 41
- (instancetype)initWithAMPeer:(AMPeer *)peer
withImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  ImActorModelModulesMessagesConversationActor_initWithAMPeer_withImActorModelModulesModules_(self, peer, messenger);
  return self;
}


#line 48
- (void)preStart {
  messages_ = [self messagesWithAMPeer:peer_];
  media_ = [self mediaWithAMPeer:peer_];
  messagesStorage_ = new_ImActorModelModulesMessagesEntityOutUnreadMessagesStorage_init();
  IOSByteArray *data = [((DKSyncKeyValue *) nil_chk(pendingKeyValue_)) getWithLong:[((AMPeer *) nil_chk(peer_)) getUnuqueId]];
  if (data != nil) {
    @try {
      messagesStorage_ = ImActorModelModulesMessagesEntityOutUnreadMessagesStorage_fromBytesWithByteArray_(data);
    }
    @catch (
#line 56
    JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  dialogsActor_ = [((ImActorModelModulesMessages *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getMessagesModule])) getDialogsActor];
}

- (void)onInMessageWithAMMessage:(AMMessage *)message {
  ImActorModelModulesMessagesConversationActor_onInMessageWithAMMessage_(self, message);
}


#line 94
- (void)onMessageContentUpdatedWithLong:(jlong)rid
                       withAMAbsContent:(AMAbsContent *)content {
  ImActorModelModulesMessagesConversationActor_onMessageContentUpdatedWithLong_withAMAbsContent_(self, rid, content);
}


#line 116
- (void)onMessageSentWithLong:(jlong)rid
                     withLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_onMessageSentWithLong_withLong_(self, rid, date);
}


#line 150
- (void)onMessageErrorWithLong:(jlong)rid {
  ImActorModelModulesMessagesConversationActor_onMessageErrorWithLong_(self, rid);
}


#line 177
- (void)onMessagePlainReadWithLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_onMessagePlainReadWithLong_(self, date);
}


#line 216
- (void)onMessagePlainReceivedWithLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_onMessagePlainReceivedWithLong_(self, date);
}


#line 244
- (void)onMessageEncryptedReceivedWithLong:(jlong)rid {
  ImActorModelModulesMessagesConversationActor_onMessageEncryptedReceivedWithLong_(self, rid);
}


#line 268
- (void)onMessageEncryptedReadWithLong:(jlong)rid {
  ImActorModelModulesMessagesConversationActor_onMessageEncryptedReadWithLong_(self, rid);
}


#line 294
- (void)onMessagesDeletedWithJavaUtilList:(id<JavaUtilList>)rids {
  ImActorModelModulesMessagesConversationActor_onMessagesDeletedWithJavaUtilList_(self, rids);
}


#line 311
- (void)onClearConversation {
  ImActorModelModulesMessagesConversationActor_onClearConversation(self);
}


#line 319
- (void)onDeleteConversation {
  ImActorModelModulesMessagesConversationActor_onDeleteConversation(self);
}


#line 329
- (void)onHistoryLoadedWithJavaUtilList:(id<JavaUtilList>)history {
  ImActorModelModulesMessagesConversationActor_onHistoryLoadedWithJavaUtilList_(self, history);
}


#line 379
- (void)savePending {
  ImActorModelModulesMessagesConversationActor_savePending(self);
}


#line 386
- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[AMMessage class]]) {
    ImActorModelModulesMessagesConversationActor_onInMessageWithAMMessage_(self, (AMMessage *) check_class_cast(message, [AMMessage class]));
  }
  else
#line 389
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageContentUpdated class]]) {
    ImActorModelModulesMessagesConversationActor_MessageContentUpdated *contentUpdated = (ImActorModelModulesMessagesConversationActor_MessageContentUpdated *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageContentUpdated class]);
    ImActorModelModulesMessagesConversationActor_onMessageContentUpdatedWithLong_withAMAbsContent_(self, [((ImActorModelModulesMessagesConversationActor_MessageContentUpdated *) nil_chk(contentUpdated)) getRid], [contentUpdated getContent]);
  }
  else
#line 392
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageSent class]]) {
    ImActorModelModulesMessagesConversationActor_MessageSent *sent = (ImActorModelModulesMessagesConversationActor_MessageSent *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageSent class]);
    ImActorModelModulesMessagesConversationActor_onMessageSentWithLong_withLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageSent *) nil_chk(sent)) getRid], [sent getDate]);
  }
  else
#line 395
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageError class]]) {
    ImActorModelModulesMessagesConversationActor_MessageError *messageError = (ImActorModelModulesMessagesConversationActor_MessageError *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageError class]);
    ImActorModelModulesMessagesConversationActor_onMessageErrorWithLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageError *) nil_chk(messageError)) getRid]);
  }
  else
#line 398
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageRead class]]) {
    ImActorModelModulesMessagesConversationActor_onMessagePlainReadWithLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageRead *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessageRead *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageRead class])))) getDate]);
  }
  else
#line 400
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageEncryptedRead class]]) {
    ImActorModelModulesMessagesConversationActor_onMessageEncryptedReadWithLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageEncryptedRead *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessageEncryptedRead *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageEncryptedRead class])))) getRid]);
  }
  else
#line 402
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageReceived class]]) {
    ImActorModelModulesMessagesConversationActor_onMessagePlainReceivedWithLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageReceived *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessageReceived *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageReceived class])))) getDate]);
  }
  else
#line 404
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived class]]) {
    ImActorModelModulesMessagesConversationActor_onMessageEncryptedReceivedWithLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived class])))) getRid]);
  }
  else
#line 406
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_HistoryLoaded class]]) {
    ImActorModelModulesMessagesConversationActor_onHistoryLoadedWithJavaUtilList_(self, [((ImActorModelModulesMessagesConversationActor_HistoryLoaded *) nil_chk(((ImActorModelModulesMessagesConversationActor_HistoryLoaded *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_HistoryLoaded class])))) getMessages]);
  }
  else
#line 408
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_ClearConversation class]]) {
    ImActorModelModulesMessagesConversationActor_onClearConversation(self);
  }
  else
#line 410
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_DeleteConversation class]]) {
    ImActorModelModulesMessagesConversationActor_onDeleteConversation(self);
  }
  else
#line 412
  if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessagesDeleted class]]) {
    ImActorModelModulesMessagesConversationActor_onMessagesDeletedWithJavaUtilList_(self, [((ImActorModelModulesMessagesConversationActor_MessagesDeleted *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessagesDeleted *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessagesDeleted class])))) getRids]);
  }
  else {
    
#line 415
    [self dropWithId:message];
  }
}

@end


#line 41
void ImActorModelModulesMessagesConversationActor_initWithAMPeer_withImActorModelModulesModules_(ImActorModelModulesMessagesConversationActor *self, AMPeer *peer, ImActorModelModulesModules *messenger) {
  (void) ImActorModelModulesUtilsModuleActor_initWithImActorModelModulesModules_(self, messenger);
  self->peer_ = peer;
  self->pendingKeyValue_ = [((ImActorModelModulesMessages *) nil_chk([((ImActorModelModulesModules *) nil_chk(messenger)) getMessagesModule])) getConversationPending];
}


#line 41
ImActorModelModulesMessagesConversationActor *new_ImActorModelModulesMessagesConversationActor_initWithAMPeer_withImActorModelModulesModules_(AMPeer *peer, ImActorModelModulesModules *messenger) {
  ImActorModelModulesMessagesConversationActor *self = [ImActorModelModulesMessagesConversationActor alloc];
  ImActorModelModulesMessagesConversationActor_initWithAMPeer_withImActorModelModulesModules_(self, peer, messenger);
  return self;
}


#line 66
void ImActorModelModulesMessagesConversationActor_onInMessageWithAMMessage_(ImActorModelModulesMessagesConversationActor *self, AMMessage *message) {
  
#line 68
  if ([((id<DKListEngine>) nil_chk(self->messages_)) getValueWithLong:[((AMMessage *) nil_chk(message)) getEngineId]] != nil) {
    return;
  }
  
#line 73
  [self->messages_ addOrUpdateItemWithBSBserObject:message];
  if ([[message getContent] isKindOfClass:[AMPhotoContent class]] || [[message getContent] isKindOfClass:[AMVideoContent class]]) {
    [((id<DKListEngine>) nil_chk(self->media_)) addOrUpdateItemWithBSBserObject:message];
  }
  else {
    
#line 77
    if ([[message getContent] isKindOfClass:[AMDocumentContent class]]) {
    }
  }
  
#line 83
  [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_InMessage_initWithAMPeer_withAMMessage_(self->peer_, message)];
  
#line 86
  if ([message getSenderId] == [self myUid]) {
    [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityOutUnreadMessagesStorage *) nil_chk(self->messagesStorage_)) getMessages])) addWithId:new_ImActorModelModulesMessagesEntityOutUnreadMessage_initWithLong_withLong_([message getRid], [message getDate])];
    ImActorModelModulesMessagesConversationActor_savePending(self);
  }
}


#line 94
void ImActorModelModulesMessagesConversationActor_onMessageContentUpdatedWithLong_withAMAbsContent_(ImActorModelModulesMessagesConversationActor *self, jlong rid, AMAbsContent *content) {
  AMMessage *message = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithLong:rid];
  
#line 97
  if (message == nil) {
    return;
  }
  
#line 102
  AMMessage *updatedMsg = [((AMMessage *) nil_chk(message)) changeContentWithAMAbsContent:content];
  [self->messages_ addOrUpdateItemWithBSBserObject:updatedMsg];
  if ([[((AMMessage *) nil_chk(updatedMsg)) getContent] isKindOfClass:[AMPhotoContent class]] || [[updatedMsg getContent] isKindOfClass:[AMVideoContent class]]) {
    [((id<DKListEngine>) nil_chk(self->media_)) addOrUpdateItemWithBSBserObject:updatedMsg];
  }
  else {
    
#line 107
    if ([[updatedMsg getContent] isKindOfClass:[AMDocumentContent class]]) {
    }
  }
  
#line 112
  [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageContentChanged_initWithAMPeer_withLong_withAMAbsContent_(self->peer_, rid, content)];
}


#line 116
void ImActorModelModulesMessagesConversationActor_onMessageSentWithLong_withLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid, jlong date) {
  AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithLong:rid];
  
#line 119
  if (msg != nil && ([msg getMessageState] == AMMessageStateEnum_get_PENDING())) {
    
#line 123
    for (ImActorModelModulesMessagesEntityOutUnreadMessage * __strong p in nil_chk([((ImActorModelModulesMessagesEntityOutUnreadMessagesStorage *) nil_chk(self->messagesStorage_)) getMessages])) {
      if ([((ImActorModelModulesMessagesEntityOutUnreadMessage *) nil_chk(p)) getRid] == rid) {
        [((JavaUtilArrayList *) nil_chk([self->messagesStorage_ getMessages])) removeWithId:p];
        [((JavaUtilArrayList *) nil_chk([self->messagesStorage_ getMessages])) addWithId:new_ImActorModelModulesMessagesEntityOutUnreadMessage_initWithLong_withLong_(rid, date)];
        break;
      }
    }
    ImActorModelModulesMessagesConversationActor_savePending(self);
    
#line 133
    AMMessage *updatedMsg = [((AMMessage *) nil_chk([msg changeDateWithLong:
#line 134
    date])) changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_SENT()];
    
#line 136
    [self->messages_ addOrUpdateItemWithBSBserObject:updatedMsg];
    if ([[((AMMessage *) nil_chk(updatedMsg)) getContent] isKindOfClass:[AMPhotoContent class]] || [[updatedMsg getContent] isKindOfClass:[AMVideoContent class]]) {
      [((id<DKListEngine>) nil_chk(self->media_)) addOrUpdateItemWithBSBserObject:updatedMsg];
    }
    else {
      
#line 140
      if ([[updatedMsg getContent] isKindOfClass:[AMDocumentContent class]]) {
      }
    }
    
#line 145
    [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageSent_initWithAMPeer_withLong_withLong_(self->peer_, rid, date)];
  }
}


#line 150
void ImActorModelModulesMessagesConversationActor_onMessageErrorWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid) {
  AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithLong:rid];
  
#line 153
  if (msg != nil && ([msg getMessageState] == AMMessageStateEnum_get_PENDING() ||
#line 154
  [msg getMessageState] == AMMessageStateEnum_get_SENT())) {
    
#line 157
    AMMessage *updatedMsg = [msg changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_ERROR()];
    
#line 159
    [self->messages_ addOrUpdateItemWithBSBserObject:updatedMsg];
    if ([[((AMMessage *) nil_chk(updatedMsg)) getContent] isKindOfClass:[AMPhotoContent class]] || [[updatedMsg getContent] isKindOfClass:[AMVideoContent class]]) {
      [((id<DKListEngine>) nil_chk(self->media_)) addOrUpdateItemWithBSBserObject:updatedMsg];
    }
    else {
      
#line 163
      if ([[updatedMsg getContent] isKindOfClass:[AMDocumentContent class]]) {
      }
    }
    
#line 169
    [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageStateChanged_initWithAMPeer_withLong_withAMMessageStateEnum_(self->peer_, rid, AMMessageStateEnum_get_ERROR())];
  }
}


#line 177
void ImActorModelModulesMessagesConversationActor_onMessagePlainReadWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong date) {
  jboolean removed = NO;
  {
    IOSObjectArray *a__ = [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityOutUnreadMessagesStorage *) nil_chk(self->messagesStorage_)) getMessages])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:ImActorModelModulesMessagesEntityOutUnreadMessage_class_()]];
    ImActorModelModulesMessagesEntityOutUnreadMessage * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ImActorModelModulesMessagesEntityOutUnreadMessage * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ImActorModelModulesMessagesEntityOutUnreadMessage *p = *b__++;
      
#line 181
      if ([((ImActorModelModulesMessagesEntityOutUnreadMessage *) nil_chk(p)) getDate] <= date) {
        AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithLong:[p getRid]];
        if (msg != nil && ([msg getMessageState] == AMMessageStateEnum_get_SENT() ||
#line 184
        [msg getMessageState] == AMMessageStateEnum_get_RECEIVED())) {
          
#line 187
          AMMessage *updatedMsg = [msg changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_READ()];
          
#line 189
          [self->messages_ addOrUpdateItemWithBSBserObject:updatedMsg];
          if ([[((AMMessage *) nil_chk(updatedMsg)) getContent] isKindOfClass:[AMPhotoContent class]] || [[updatedMsg getContent] isKindOfClass:[AMVideoContent class]]) {
            [((id<DKListEngine>) nil_chk(self->media_)) addOrUpdateItemWithBSBserObject:updatedMsg];
          }
          else {
            
#line 193
            if ([[updatedMsg getContent] isKindOfClass:[AMDocumentContent class]]) {
            }
          }
          
#line 199
          [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageStateChanged_initWithAMPeer_withLong_withAMMessageStateEnum_(self->peer_, [p getRid], AMMessageStateEnum_get_READ())];
          
#line 203
          removed = YES;
          [((JavaUtilArrayList *) nil_chk([self->messagesStorage_ getMessages])) removeWithId:p];
        }
      }
    }
  }
  
#line 210
  if (removed) {
    ImActorModelModulesMessagesConversationActor_savePending(self);
  }
}


#line 216
void ImActorModelModulesMessagesConversationActor_onMessagePlainReceivedWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong date) {
  
#line 218
  for (ImActorModelModulesMessagesEntityOutUnreadMessage * __strong p in nil_chk([((ImActorModelModulesMessagesEntityOutUnreadMessagesStorage *) nil_chk(self->messagesStorage_)) getMessages])) {
    if ([((ImActorModelModulesMessagesEntityOutUnreadMessage *) nil_chk(p)) getDate] <= date) {
      AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithLong:[p getRid]];
      if (msg != nil && [msg getMessageState] == AMMessageStateEnum_get_SENT()) {
        
#line 224
        AMMessage *updatedMsg = [msg changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_RECEIVED()];
        
#line 226
        [self->messages_ addOrUpdateItemWithBSBserObject:updatedMsg];
        if ([[((AMMessage *) nil_chk(updatedMsg)) getContent] isKindOfClass:[AMPhotoContent class]] || [[updatedMsg getContent] isKindOfClass:[AMVideoContent class]]) {
          [((id<DKListEngine>) nil_chk(self->media_)) addOrUpdateItemWithBSBserObject:updatedMsg];
        }
        else {
          
#line 230
          if ([[updatedMsg getContent] isKindOfClass:[AMDocumentContent class]]) {
          }
        }
        
#line 236
        [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageStateChanged_initWithAMPeer_withLong_withAMMessageStateEnum_(self->peer_, [p getRid], AMMessageStateEnum_get_RECEIVED())];
      }
    }
  }
}


#line 244
void ImActorModelModulesMessagesConversationActor_onMessageEncryptedReceivedWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid) {
  
#line 247
  AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithLong:rid];
  if (msg != nil && [msg getMessageState] == AMMessageStateEnum_get_SENT()) {
    
#line 251
    AMMessage *updatedMsg = [msg changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_RECEIVED()];
    
#line 253
    [self->messages_ addOrUpdateItemWithBSBserObject:updatedMsg];
    if ([[((AMMessage *) nil_chk(updatedMsg)) getContent] isKindOfClass:[AMPhotoContent class]] || [[updatedMsg getContent] isKindOfClass:[AMVideoContent class]]) {
      [((id<DKListEngine>) nil_chk(self->media_)) addOrUpdateItemWithBSBserObject:updatedMsg];
    }
    else {
      
#line 257
      if ([[updatedMsg getContent] isKindOfClass:[AMDocumentContent class]]) {
      }
    }
    
#line 262
    [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageStateChanged_initWithAMPeer_withLong_withAMMessageStateEnum_(self->peer_, rid, AMMessageStateEnum_get_RECEIVED())];
  }
}


#line 268
void ImActorModelModulesMessagesConversationActor_onMessageEncryptedReadWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid) {
  
#line 270
  AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithLong:rid];
  if (msg != nil && ([msg getMessageState] == AMMessageStateEnum_get_SENT() ||
#line 272
  [msg getMessageState] == AMMessageStateEnum_get_RECEIVED())) {
    
#line 275
    AMMessage *updatedMsg = [msg changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_READ()];
    
#line 277
    [self->messages_ addOrUpdateItemWithBSBserObject:updatedMsg];
    if ([[((AMMessage *) nil_chk(updatedMsg)) getContent] isKindOfClass:[AMPhotoContent class]] || [[updatedMsg getContent] isKindOfClass:[AMVideoContent class]]) {
      [((id<DKListEngine>) nil_chk(self->media_)) addOrUpdateItemWithBSBserObject:updatedMsg];
    }
    else {
      
#line 281
      if ([[updatedMsg getContent] isKindOfClass:[AMDocumentContent class]]) {
      }
    }
    
#line 286
    [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageStateChanged_initWithAMPeer_withLong_withAMMessageStateEnum_(self->peer_, rid, AMMessageStateEnum_get_READ())];
  }
}


#line 294
void ImActorModelModulesMessagesConversationActor_onMessagesDeletedWithJavaUtilList_(ImActorModelModulesMessagesConversationActor *self, id<JavaUtilList> rids) {
  
#line 297
  IOSLongArray *rids2 = [IOSLongArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(rids)) size]];
  for (jint i = 0; i < rids2->size_; i++) {
    *IOSLongArray_GetRef(rids2, i) = [((JavaLangLong *) nil_chk([rids getWithInt:i])) longLongValue];
  }
  [((id<DKListEngine>) nil_chk(self->messages_)) removeItemsWithLongArray:rids2];
  [((id<DKListEngine>) nil_chk(self->media_)) removeItemsWithLongArray:rids2];
  
#line 306
  AMMessage *topMessage = [self->messages_ getHeadValue];
  [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageDeleted_initWithAMPeer_withAMMessage_(self->peer_, topMessage)];
}


#line 311
void ImActorModelModulesMessagesConversationActor_onClearConversation(ImActorModelModulesMessagesConversationActor *self) {
  [((id<DKListEngine>) nil_chk(self->messages_)) clear];
  [((id<DKListEngine>) nil_chk(self->media_)) clear];
  
#line 315
  [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_ChatClear_initWithAMPeer_(self->peer_)];
}

void ImActorModelModulesMessagesConversationActor_onDeleteConversation(ImActorModelModulesMessagesConversationActor *self) {
  [((id<DKListEngine>) nil_chk(self->messages_)) clear];
  [((id<DKListEngine>) nil_chk(self->media_)) clear];
  
#line 323
  [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_ChatDelete_initWithAMPeer_(self->peer_)];
}


#line 329
void ImActorModelModulesMessagesConversationActor_onHistoryLoadedWithJavaUtilList_(ImActorModelModulesMessagesConversationActor *self, id<JavaUtilList> history) {
  
#line 331
  JavaUtilArrayList *updated = new_JavaUtilArrayList_init();
  jboolean isPendingChanged = NO;
  
#line 335
  for (AMMessage * __strong historyMessage in nil_chk(history)) {
    
#line 337
    if ([((id<DKListEngine>) nil_chk(self->messages_)) getValueWithLong:[((AMMessage *) nil_chk(historyMessage)) getEngineId]] != nil) {
      continue;
    }
    
#line 341
    [updated addWithId:historyMessage];
    
#line 344
    if ([historyMessage getMessageState] == AMMessageStateEnum_get_SENT()) {
      [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityOutUnreadMessagesStorage *) nil_chk(self->messagesStorage_)) getMessages])) addWithId:new_ImActorModelModulesMessagesEntityOutUnreadMessage_initWithLong_withLong_([historyMessage getRid], [historyMessage getDate])];
      isPendingChanged = YES;
    }
  }
  
#line 351
  if (isPendingChanged) {
    ImActorModelModulesMessagesConversationActor_savePending(self);
  }
  
#line 356
  if ([updated size] > 0) {
    [((id<DKListEngine>) nil_chk(self->messages_)) addOrUpdateItemsWithJavaUtilList:updated];
    JavaUtilArrayList *updatedMedia = new_JavaUtilArrayList_init();
    JavaUtilArrayList *updatedDoc = new_JavaUtilArrayList_init();
    for (AMMessage * __strong updatedMsg in updated) {
      if ([[((AMMessage *) nil_chk(updatedMsg)) getContent] isKindOfClass:[AMPhotoContent class]] || [[updatedMsg getContent] isKindOfClass:[AMVideoContent class]]) {
        [updatedMedia addWithId:updatedMsg];
      }
      else {
        
#line 364
        if ([[updatedMsg getContent] isKindOfClass:[AMDocumentContent class]]) {
        }
      }
    }
    
#line 369
    [((id<DKListEngine>) nil_chk(self->media_)) addOrUpdateItemsWithJavaUtilList:updatedMedia];
  }
}


#line 379
void ImActorModelModulesMessagesConversationActor_savePending(ImActorModelModulesMessagesConversationActor *self) {
  [((DKSyncKeyValue *) nil_chk(self->pendingKeyValue_)) putWithLong:[((AMPeer *) nil_chk(self->peer_)) getUnuqueId] withByteArray:[((ImActorModelModulesMessagesEntityOutUnreadMessagesStorage *) nil_chk(self->messagesStorage_)) toByteArray]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor)


#line 419
@implementation ImActorModelModulesMessagesConversationActor_MessageContentUpdated


#line 423
- (instancetype)initWithLong:(jlong)rid
            withAMAbsContent:(AMAbsContent *)content {
  ImActorModelModulesMessagesConversationActor_MessageContentUpdated_initWithLong_withAMAbsContent_(self, rid, content);
  return self;
}


#line 428
- (jlong)getRid {
  return rid_;
}

- (AMAbsContent *)getContent {
  return content_;
}

@end


#line 423
void ImActorModelModulesMessagesConversationActor_MessageContentUpdated_initWithLong_withAMAbsContent_(ImActorModelModulesMessagesConversationActor_MessageContentUpdated *self, jlong rid, AMAbsContent *content) {
  (void) NSObject_init(self);
  
#line 424
  self->rid_ = rid;
  self->content_ = content;
}


#line 423
ImActorModelModulesMessagesConversationActor_MessageContentUpdated *new_ImActorModelModulesMessagesConversationActor_MessageContentUpdated_initWithLong_withAMAbsContent_(jlong rid, AMAbsContent *content) {
  ImActorModelModulesMessagesConversationActor_MessageContentUpdated *self = [ImActorModelModulesMessagesConversationActor_MessageContentUpdated alloc];
  ImActorModelModulesMessagesConversationActor_MessageContentUpdated_initWithLong_withAMAbsContent_(self, rid, content);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageContentUpdated)


#line 437
@implementation ImActorModelModulesMessagesConversationActor_HistoryLoaded


#line 440
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)messages {
  ImActorModelModulesMessagesConversationActor_HistoryLoaded_initWithJavaUtilList_(self, messages);
  return self;
}


#line 444
- (id<JavaUtilList>)getMessages {
  return messages_;
}

@end


#line 440
void ImActorModelModulesMessagesConversationActor_HistoryLoaded_initWithJavaUtilList_(ImActorModelModulesMessagesConversationActor_HistoryLoaded *self, id<JavaUtilList> messages) {
  (void) NSObject_init(self);
  
#line 441
  self->messages_ = messages;
}


#line 440
ImActorModelModulesMessagesConversationActor_HistoryLoaded *new_ImActorModelModulesMessagesConversationActor_HistoryLoaded_initWithJavaUtilList_(id<JavaUtilList> messages) {
  ImActorModelModulesMessagesConversationActor_HistoryLoaded *self = [ImActorModelModulesMessagesConversationActor_HistoryLoaded alloc];
  ImActorModelModulesMessagesConversationActor_HistoryLoaded_initWithJavaUtilList_(self, messages);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_HistoryLoaded)


#line 449
@implementation ImActorModelModulesMessagesConversationActor_MessageReceived


#line 452
- (instancetype)initWithLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_MessageReceived_initWithLong_(self, date);
  return self;
}


#line 456
- (jlong)getDate {
  return date_;
}

@end


#line 452
void ImActorModelModulesMessagesConversationActor_MessageReceived_initWithLong_(ImActorModelModulesMessagesConversationActor_MessageReceived *self, jlong date) {
  (void) NSObject_init(self);
  
#line 453
  self->date_ = date;
}


#line 452
ImActorModelModulesMessagesConversationActor_MessageReceived *new_ImActorModelModulesMessagesConversationActor_MessageReceived_initWithLong_(jlong date) {
  ImActorModelModulesMessagesConversationActor_MessageReceived *self = [ImActorModelModulesMessagesConversationActor_MessageReceived alloc];
  ImActorModelModulesMessagesConversationActor_MessageReceived_initWithLong_(self, date);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageReceived)


#line 461
@implementation ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived


#line 464
- (instancetype)initWithLong:(jlong)rid {
  ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived_initWithLong_(self, rid);
  return self;
}


#line 468
- (jlong)getRid {
  return rid_;
}

@end


#line 464
void ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived_initWithLong_(ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived *self, jlong rid) {
  (void) NSObject_init(self);
  
#line 465
  self->rid_ = rid;
}


#line 464
ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived *new_ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived_initWithLong_(jlong rid) {
  ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived *self = [ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived alloc];
  ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageEncryptedReceived)


#line 473
@implementation ImActorModelModulesMessagesConversationActor_MessageRead


#line 476
- (instancetype)initWithLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_MessageRead_initWithLong_(self, date);
  return self;
}


#line 480
- (jlong)getDate {
  return date_;
}

@end


#line 476
void ImActorModelModulesMessagesConversationActor_MessageRead_initWithLong_(ImActorModelModulesMessagesConversationActor_MessageRead *self, jlong date) {
  (void) NSObject_init(self);
  
#line 477
  self->date_ = date;
}


#line 476
ImActorModelModulesMessagesConversationActor_MessageRead *new_ImActorModelModulesMessagesConversationActor_MessageRead_initWithLong_(jlong date) {
  ImActorModelModulesMessagesConversationActor_MessageRead *self = [ImActorModelModulesMessagesConversationActor_MessageRead alloc];
  ImActorModelModulesMessagesConversationActor_MessageRead_initWithLong_(self, date);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageRead)


#line 485
@implementation ImActorModelModulesMessagesConversationActor_MessageEncryptedRead


#line 488
- (instancetype)initWithLong:(jlong)rid {
  ImActorModelModulesMessagesConversationActor_MessageEncryptedRead_initWithLong_(self, rid);
  return self;
}


#line 492
- (jlong)getRid {
  return rid_;
}

@end


#line 488
void ImActorModelModulesMessagesConversationActor_MessageEncryptedRead_initWithLong_(ImActorModelModulesMessagesConversationActor_MessageEncryptedRead *self, jlong rid) {
  (void) NSObject_init(self);
  
#line 489
  self->rid_ = rid;
}


#line 488
ImActorModelModulesMessagesConversationActor_MessageEncryptedRead *new_ImActorModelModulesMessagesConversationActor_MessageEncryptedRead_initWithLong_(jlong rid) {
  ImActorModelModulesMessagesConversationActor_MessageEncryptedRead *self = [ImActorModelModulesMessagesConversationActor_MessageEncryptedRead alloc];
  ImActorModelModulesMessagesConversationActor_MessageEncryptedRead_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageEncryptedRead)


#line 497
@implementation ImActorModelModulesMessagesConversationActor_MessageSent


#line 501
- (instancetype)initWithLong:(jlong)rid
                    withLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_MessageSent_initWithLong_withLong_(self, rid, date);
  return self;
}


#line 506
- (jlong)getDate {
  return date_;
}

- (jlong)getRid {
  return rid_;
}

@end


#line 501
void ImActorModelModulesMessagesConversationActor_MessageSent_initWithLong_withLong_(ImActorModelModulesMessagesConversationActor_MessageSent *self, jlong rid, jlong date) {
  (void) NSObject_init(self);
  
#line 502
  self->rid_ = rid;
  self->date_ = date;
}


#line 501
ImActorModelModulesMessagesConversationActor_MessageSent *new_ImActorModelModulesMessagesConversationActor_MessageSent_initWithLong_withLong_(jlong rid, jlong date) {
  ImActorModelModulesMessagesConversationActor_MessageSent *self = [ImActorModelModulesMessagesConversationActor_MessageSent alloc];
  ImActorModelModulesMessagesConversationActor_MessageSent_initWithLong_withLong_(self, rid, date);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageSent)


#line 515
@implementation ImActorModelModulesMessagesConversationActor_MessageError


#line 518
- (instancetype)initWithLong:(jlong)rid {
  ImActorModelModulesMessagesConversationActor_MessageError_initWithLong_(self, rid);
  return self;
}


#line 522
- (jlong)getRid {
  return rid_;
}

@end


#line 518
void ImActorModelModulesMessagesConversationActor_MessageError_initWithLong_(ImActorModelModulesMessagesConversationActor_MessageError *self, jlong rid) {
  (void) NSObject_init(self);
  
#line 519
  self->rid_ = rid;
}


#line 518
ImActorModelModulesMessagesConversationActor_MessageError *new_ImActorModelModulesMessagesConversationActor_MessageError_initWithLong_(jlong rid) {
  ImActorModelModulesMessagesConversationActor_MessageError *self = [ImActorModelModulesMessagesConversationActor_MessageError alloc];
  ImActorModelModulesMessagesConversationActor_MessageError_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageError)


#line 527
@implementation ImActorModelModulesMessagesConversationActor_MessagesDeleted


#line 530
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)rids {
  ImActorModelModulesMessagesConversationActor_MessagesDeleted_initWithJavaUtilList_(self, rids);
  return self;
}


#line 534
- (id<JavaUtilList>)getRids {
  return rids_;
}

@end


#line 530
void ImActorModelModulesMessagesConversationActor_MessagesDeleted_initWithJavaUtilList_(ImActorModelModulesMessagesConversationActor_MessagesDeleted *self, id<JavaUtilList> rids) {
  (void) NSObject_init(self);
  
#line 531
  self->rids_ = rids;
}


#line 530
ImActorModelModulesMessagesConversationActor_MessagesDeleted *new_ImActorModelModulesMessagesConversationActor_MessagesDeleted_initWithJavaUtilList_(id<JavaUtilList> rids) {
  ImActorModelModulesMessagesConversationActor_MessagesDeleted *self = [ImActorModelModulesMessagesConversationActor_MessagesDeleted alloc];
  ImActorModelModulesMessagesConversationActor_MessagesDeleted_initWithJavaUtilList_(self, rids);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessagesDeleted)


#line 539
@implementation ImActorModelModulesMessagesConversationActor_ClearConversation

- (instancetype)init {
  ImActorModelModulesMessagesConversationActor_ClearConversation_init(self);
  return self;
}

@end

void ImActorModelModulesMessagesConversationActor_ClearConversation_init(ImActorModelModulesMessagesConversationActor_ClearConversation *self) {
  (void) NSObject_init(self);
}

ImActorModelModulesMessagesConversationActor_ClearConversation *new_ImActorModelModulesMessagesConversationActor_ClearConversation_init() {
  ImActorModelModulesMessagesConversationActor_ClearConversation *self = [ImActorModelModulesMessagesConversationActor_ClearConversation alloc];
  ImActorModelModulesMessagesConversationActor_ClearConversation_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_ClearConversation)


#line 543
@implementation ImActorModelModulesMessagesConversationActor_DeleteConversation

- (instancetype)init {
  ImActorModelModulesMessagesConversationActor_DeleteConversation_init(self);
  return self;
}

@end

void ImActorModelModulesMessagesConversationActor_DeleteConversation_init(ImActorModelModulesMessagesConversationActor_DeleteConversation *self) {
  (void) NSObject_init(self);
}

ImActorModelModulesMessagesConversationActor_DeleteConversation *new_ImActorModelModulesMessagesConversationActor_DeleteConversation_init() {
  ImActorModelModulesMessagesConversationActor_DeleteConversation *self = [ImActorModelModulesMessagesConversationActor_DeleteConversation alloc];
  ImActorModelModulesMessagesConversationActor_DeleteConversation_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_DeleteConversation)
