//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/file/UploadTask.java
//

#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/file/UploadTask.java"

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/FileSystemProvider.h"
#include "im/actor/model/HttpDownloaderProvider.h"
#include "im/actor/model/api/FileLocation.h"
#include "im/actor/model/api/rpc/RequestCommitFileUpload.h"
#include "im/actor/model/api/rpc/RequestGetFileUploadPartUrl.h"
#include "im/actor/model/api/rpc/RequestGetFileUploadUrl.h"
#include "im/actor/model/api/rpc/ResponseCommitFileUpload.h"
#include "im/actor/model/api/rpc/ResponseGetFileUploadPartUrl.h"
#include "im/actor/model/api/rpc/ResponseGetFileUploadUrl.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/entity/FileReference.h"
#include "im/actor/model/files/FileSystemReference.h"
#include "im/actor/model/files/InputFile.h"
#include "im/actor/model/files/OutputFile.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/file/UploadManager.h"
#include "im/actor/model/modules/file/UploadTask.h"
#include "im/actor/model/modules/messages/entity/EntityConverter.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/network/RpcException.h"
#include "im/actor/model/util/CRC32.h"

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_startUpload(ImActorModelModulesFileUploadTask *self);
__attribute__((unused)) static void ImActorModelModulesFileUploadTask_checkQueue(ImActorModelModulesFileUploadTask *self);
__attribute__((unused)) static void ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(ImActorModelModulesFileUploadTask *self, jint blockIndex, jint offset, IOSByteArray *data);
__attribute__((unused)) static void ImActorModelModulesFileUploadTask_reportError(ImActorModelModulesFileUploadTask *self);
__attribute__((unused)) static void ImActorModelModulesFileUploadTask_reportProgressWithFloat_(ImActorModelModulesFileUploadTask *self, jfloat progress);
__attribute__((unused)) static void ImActorModelModulesFileUploadTask_reportCompleteWithAMFileReference_withAMFileSystemReference_(ImActorModelModulesFileUploadTask *self, AMFileReference *location, id<AMFileSystemReference> reference);

@interface ImActorModelModulesFileUploadTask () {
 @public
  NSString *TAG_;
  jboolean LOG_;
  jlong rid_;
  NSString *fileName_;
  NSString *descriptor_;
  id<AMFileSystemProvider> fileSystemProvider_;
  id<AMHttpDownloaderProvider> downloaderProvider_;
  id<AMFileSystemReference> srcReference_;
  id<AMInputFile> inputFile_;
  id<AMFileSystemReference> destReference_;
  id<AMOutputFile> outputFile_;
  DKActorRef *manager_;
  jboolean isCompleted_;
  jint blockSize_;
  jint blocksCount_;
  jint nextBlock_;
  jint uploaded_;
  jint uploadCount_;
  IOSByteArray *uploadConfig_;
  AMCRC32 *crc32_;
}

- (void)startUpload;

- (void)checkQueue;

- (void)uploadPartWithInt:(jint)blockIndex
                  withInt:(jint)offset
            withByteArray:(IOSByteArray *)data;

- (void)reportError;

- (void)reportProgressWithFloat:(jfloat)progress;

- (void)reportCompleteWithAMFileReference:(AMFileReference *)location
                withAMFileSystemReference:(id<AMFileSystemReference>)reference;
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, TAG_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, descriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, fileSystemProvider_, id<AMFileSystemProvider>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, downloaderProvider_, id<AMHttpDownloaderProvider>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, srcReference_, id<AMFileSystemReference>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, inputFile_, id<AMInputFile>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, destReference_, id<AMFileSystemReference>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, outputFile_, id<AMOutputFile>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, manager_, DKActorRef *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, uploadConfig_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, crc32_, AMCRC32 *)

@interface ImActorModelModulesFileUploadTask_$1 () {
 @public
  ImActorModelModulesFileUploadTask *this$0_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$1, this$0_, ImActorModelModulesFileUploadTask *)

@interface ImActorModelModulesFileUploadTask_$2 () {
 @public
  ImActorModelModulesFileUploadTask *this$0_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$2, this$0_, ImActorModelModulesFileUploadTask *)

@interface ImActorModelModulesFileUploadTask_$3 () {
 @public
  ImActorModelModulesFileUploadTask *this$0_;
  IOSByteArray *val$data_;
  jint val$blockIndex_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$3, this$0_, ImActorModelModulesFileUploadTask *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$3, val$data_, IOSByteArray *)

@interface ImActorModelModulesFileUploadTask_$3_$1 () {
 @public
  ImActorModelModulesFileUploadTask_$3 *this$0_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$3_$1, this$0_, ImActorModelModulesFileUploadTask_$3 *)

@interface ImActorModelModulesFileUploadTask_$3_$1_$1 () {
 @public
  ImActorModelModulesFileUploadTask_$3_$1 *this$0_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$3_$1_$1, this$0_, ImActorModelModulesFileUploadTask_$3_$1 *)

@interface ImActorModelModulesFileUploadTask_$3_$1_$2 () {
 @public
  ImActorModelModulesFileUploadTask_$3_$1 *this$0_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$3_$1_$2, this$0_, ImActorModelModulesFileUploadTask_$3_$1 *)


#line 28
@implementation ImActorModelModulesFileUploadTask


#line 60
- (instancetype)initWithLong:(jlong)rid
                withNSString:(NSString *)descriptor
                withNSString:(NSString *)fileName
              withDKActorRef:(DKActorRef *)manager
withImActorModelModulesModules:(ImActorModelModulesModules *)modules {
  if (self =
#line 61
  [super initWithImActorModelModulesModules:modules]) {
    isCompleted_ =
#line 49
    NO;
    blockSize_ =
#line 51
    8 * 1024;
    nextBlock_ =
#line 53
    0;
    
#line 62
    self->LOG_ = [((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules)) getConfiguration])) isEnableFilesLogging];
    
#line 63
    self->rid_ = rid;
    
#line 64
    self->fileName_ = fileName;
    
#line 65
    self->descriptor_ = descriptor;
    
#line 66
    self->manager_ = manager;
    
#line 67
    self->TAG_ = JreStrcat("$JC", @"UploadTask{", rid, '}');
  }
  return self;
}


#line 71
- (void)preStart {
  
#line 72
  fileSystemProvider_ = [((AMConfiguration *) nil_chk([self config])) getFileSystemProvider];
  if (fileSystemProvider_ == nil) {
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(TAG_, @"File system is not available");
    }
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  
#line 81
  downloaderProvider_ = [((AMConfiguration *) nil_chk([self config])) getHttpDownloaderProvider];
  if (downloaderProvider_ == nil) {
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(TAG_, @"HTTP support is not available");
    }
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  
#line 90
  srcReference_ = [((id<AMFileSystemProvider>) nil_chk(fileSystemProvider_)) fileFromDescriptor:descriptor_];
  if (srcReference_ == nil) {
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(TAG_, @"Error during file reference creating");
    }
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  
#line 99
  destReference_ = [fileSystemProvider_ createTempFile];
  if (destReference_ == nil) {
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(TAG_, @"Error during file dest reference creating");
    }
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  
#line 108
  inputFile_ = [((id<AMFileSystemReference>) nil_chk(srcReference_)) openRead];
  if (inputFile_ == nil) {
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(TAG_, @"Error during file open");
    }
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  
#line 117
  outputFile_ = [((id<AMFileSystemReference>) nil_chk(destReference_)) openWriteWithSize:[srcReference_ getSize]];
  if (outputFile_ == nil) {
    [((id<AMInputFile>) nil_chk(inputFile_)) close];
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(TAG_, @"Error during dest file open");
    }
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  
#line 127
  crc32_ = [[AMCRC32 alloc] init];
  
#line 129
  ImActorModelModulesFileUploadTask_startUpload(self);
}


#line 132
- (void)startUpload {
  ImActorModelModulesFileUploadTask_startUpload(self);
}


#line 164
- (void)checkQueue {
  ImActorModelModulesFileUploadTask_checkQueue(self);
}


#line 248
- (void)uploadPartWithInt:(jint)blockIndex
                  withInt:(jint)offset
            withByteArray:(IOSByteArray *)data {
  ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(self, blockIndex, offset, data);
}


#line 291
- (void)reportError {
  ImActorModelModulesFileUploadTask_reportError(self);
}


#line 299
- (void)reportProgressWithFloat:(jfloat)progress {
  ImActorModelModulesFileUploadTask_reportProgressWithFloat_(self, progress);
}


#line 306
- (void)reportCompleteWithAMFileReference:(AMFileReference *)location
                withAMFileSystemReference:(id<AMFileSystemReference>)reference {
  ImActorModelModulesFileUploadTask_reportCompleteWithAMFileReference_withAMFileSystemReference_(self, location, reference);
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask *)other {
  [super copyAllFieldsTo:other];
  other->TAG_ = TAG_;
  other->LOG_ = LOG_;
  other->rid_ = rid_;
  other->fileName_ = fileName_;
  other->descriptor_ = descriptor_;
  other->fileSystemProvider_ = fileSystemProvider_;
  other->downloaderProvider_ = downloaderProvider_;
  other->srcReference_ = srcReference_;
  other->inputFile_ = inputFile_;
  other->destReference_ = destReference_;
  other->outputFile_ = outputFile_;
  other->manager_ = manager_;
  other->isCompleted_ = isCompleted_;
  other->blockSize_ = blockSize_;
  other->blocksCount_ = blocksCount_;
  other->nextBlock_ = nextBlock_;
  other->uploaded_ = uploaded_;
  other->uploadCount_ = uploadCount_;
  other->uploadConfig_ = uploadConfig_;
  other->crc32_ = crc32_;
}

@end

void ImActorModelModulesFileUploadTask_startUpload(ImActorModelModulesFileUploadTask *self) {
  
#line 133
  self->blocksCount_ = [((id<AMFileSystemReference>) nil_chk(self->srcReference_)) getSize] / self->blockSize_;
  if ([self->srcReference_ getSize] % self->blockSize_ != 0) {
    self->blocksCount_++;
  }
  
#line 138
  if (self->LOG_) {
    AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"Starting uploading ", self->blocksCount_, @" blocks"));
    AMLog_dWithNSString_withNSString_(self->TAG_, @"Requesting upload config...");
  }
  
#line 143
  [self requestWithImActorModelNetworkParserRequest:[[ImActorModelApiRpcRequestGetFileUploadUrl alloc] initWithInt:[self->srcReference_ getSize]] withAMRpcCallback:
#line 144
  [[ImActorModelModulesFileUploadTask_$1 alloc] initWithImActorModelModulesFileUploadTask:self]];
}

void ImActorModelModulesFileUploadTask_checkQueue(ImActorModelModulesFileUploadTask *self) {
  
#line 165
  if (self->isCompleted_) {
    return;
  }
  
#line 169
  if (self->nextBlock_ == self->blocksCount_ && self->uploadCount_ == 0) {
    if (self->LOG_) {
      AMLog_dWithNSString_withNSString_(self->TAG_, @"Completing...");
    }
    jlong crc = [((AMCRC32 *) nil_chk(self->crc32_)) getValue];
    if (self->LOG_) {
      AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$J", @"Src #", crc));
      
#line 177
      AMLog_dWithNSString_withNSString_(self->TAG_, @"Closing files...");
    }
    [((id<AMInputFile>) nil_chk(self->inputFile_)) close];
    [((id<AMOutputFile>) nil_chk(self->outputFile_)) close];
    
#line 182
    [self requestWithImActorModelNetworkParserRequest:[[ImActorModelApiRpcRequestCommitFileUpload alloc] initWithByteArray:self->uploadConfig_] withAMRpcCallback:[[ImActorModelModulesFileUploadTask_$2 alloc] initWithImActorModelModulesFileUploadTask:self]];
    
#line 204
    return;
  }
  
#line 207
  if (self->nextBlock_ < self->blocksCount_ && self->uploadCount_ < ImActorModelModulesFileUploadTask_SIM_BLOCKS_COUNT) {
    jint blockIndex = self->nextBlock_++;
    
#line 210
    jint size = self->blockSize_;
    jint fileOffset = blockIndex * self->blockSize_;
    if ((blockIndex + 1) * self->blockSize_ > [((id<AMFileSystemReference>) nil_chk(self->srcReference_)) getSize]) {
      size = [self->srcReference_ getSize] - blockIndex * self->blockSize_;
    }
    IOSByteArray *data = [IOSByteArray newArrayWithLength:size];
    
#line 217
    if (![((id<AMInputFile>) nil_chk(self->inputFile_)) readAtOffset:fileOffset toArray:data withArrayOffset:0 withArrayLen:size]) {
      if (self->LOG_) {
        AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"read #", blockIndex, @" error"));
      }
      ImActorModelModulesFileUploadTask_reportError(self);
      return;
    }
    if (![((id<AMOutputFile>) nil_chk(self->outputFile_)) writeWithOffset:fileOffset withData:data withDataOffset:0 withDataLen:size]) {
      if (self->LOG_) {
        AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"write #", blockIndex, @" error"));
      }
      ImActorModelModulesFileUploadTask_reportError(self);
      return;
    }
    
#line 232
    [((AMCRC32 *) nil_chk(self->crc32_)) updateWithByteArray:data withInt:0 withInt:size];
    
#line 234
    if (self->LOG_) {
      AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I", @"Starting block upload #", blockIndex));
    }
    
#line 238
    self->uploadCount_++;
    ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(self, blockIndex, fileOffset, data);
    ImActorModelModulesFileUploadTask_checkQueue(self);
  }
  else {
    
#line 242
    if (self->LOG_) {
      AMLog_dWithNSString_withNSString_(self->TAG_, @"Nothing to do");
    }
  }
}

void ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(ImActorModelModulesFileUploadTask *self, jint blockIndex, jint offset, IOSByteArray *data) {
  
#line 249
  [self requestWithImActorModelNetworkParserRequest:[[ImActorModelApiRpcRequestGetFileUploadPartUrl alloc] initWithInt:blockIndex withInt:self->blockSize_ withByteArray:self->uploadConfig_] withAMRpcCallback:
#line 250
  [[ImActorModelModulesFileUploadTask_$3 alloc] initWithImActorModelModulesFileUploadTask:self withByteArray:data withInt:blockIndex]];
}

void ImActorModelModulesFileUploadTask_reportError(ImActorModelModulesFileUploadTask *self) {
  
#line 292
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = YES;
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:[[ImActorModelModulesFileUploadManager_UploadTaskError alloc] initWithLong:self->rid_]];
}

void ImActorModelModulesFileUploadTask_reportProgressWithFloat_(ImActorModelModulesFileUploadTask *self, jfloat progress) {
  
#line 300
  if (self->isCompleted_) {
    return;
  }
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:[[ImActorModelModulesFileUploadManager_UploadTaskProgress alloc] initWithLong:self->rid_ withFloat:progress]];
}

void ImActorModelModulesFileUploadTask_reportCompleteWithAMFileReference_withAMFileSystemReference_(ImActorModelModulesFileUploadTask *self, AMFileReference *location, id<AMFileSystemReference> reference) {
  
#line 307
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = YES;
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:[[ImActorModelModulesFileUploadManager_UploadTaskComplete alloc] initWithLong:self->rid_ withAMFileReference:location withAMFileSystemReference:reference]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask)

@implementation ImActorModelModulesFileUploadTask_$1


#line 146
- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseGetFileUploadUrl *)response {
  
#line 147
  if (this$0_->LOG_) {
    AMLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload config loaded");
  }
  this$0_->uploadConfig_ = [((ImActorModelApiRpcResponseGetFileUploadUrl *) nil_chk(response)) getUploadKey];
  ImActorModelModulesFileUploadTask_checkQueue(this$0_);
}


#line 155
- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  if (this$0_->LOG_) {
    AMLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload config load error");
  }
  ImActorModelModulesFileUploadTask_reportError(this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$1)

@implementation ImActorModelModulesFileUploadTask_$2


#line 184
- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseCommitFileUpload *)response {
  
#line 185
  if (this$0_->LOG_) {
    AMLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload completed...");
  }
  
#line 189
  AMFileReference *location = ImActorModelModulesMessagesEntityEntityConverter_convertWithImActorModelApiFileLocation_withNSString_withInt_([((ImActorModelApiRpcResponseCommitFileUpload *) nil_chk(response)) getUploadedFileLocation], this$0_->fileName_, [((id<AMFileSystemReference>) nil_chk(this$0_->srcReference_)) getSize]);
  
#line 191
  id<AMFileSystemReference> reference = [((id<AMFileSystemProvider>) nil_chk([((AMConfiguration *) nil_chk([this$0_ config])) getFileSystemProvider])) commitTempFile:this$0_->destReference_ withReference:location];
  
#line 193
  ImActorModelModulesFileUploadTask_reportCompleteWithAMFileReference_withAMFileSystemReference_(this$0_, location, reference);
}


#line 197
- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  
#line 198
  if (this$0_->LOG_) {
    AMLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload complete error");
  }
  ImActorModelModulesFileUploadTask_reportError(this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask_$2 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$2)

@implementation ImActorModelModulesFileUploadTask_$3


#line 252
- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseGetFileUploadPartUrl *)response {
  
#line 253
  [((id<AMHttpDownloaderProvider>) nil_chk(this$0_->downloaderProvider_)) uploadPartWithNSString:[((ImActorModelApiRpcResponseGetFileUploadPartUrl *) nil_chk(response)) getUrl] withByteArray:val$data_ withImActorModelHttpFileUploadCallback:[[ImActorModelModulesFileUploadTask_$3_$1 alloc] initWithImActorModelModulesFileUploadTask_$3:self]];
}


#line 285
- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  
#line 286
  ImActorModelModulesFileUploadTask_reportError(this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$
                                            withByteArray:(IOSByteArray *)capture$0
                                                  withInt:(jint)capture$1 {
  this$0_ = outer$;
  val$data_ = capture$0;
  val$blockIndex_ = capture$1;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask_$3 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
  other->val$data_ = val$data_;
  other->val$blockIndex_ = val$blockIndex_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$3)

@implementation ImActorModelModulesFileUploadTask_$3_$1


#line 255
- (void)onUploaded {
  
#line 256
  [((DKActorRef *) nil_chk([this$0_->this$0_ self__])) sendWithId:[[ImActorModelModulesFileUploadTask_$3_$1_$1 alloc] initWithImActorModelModulesFileUploadTask_$3_$1:self]];
}


#line 273
- (void)onUploadFailure {
  
#line 274
  [((DKActorRef *) nil_chk([this$0_->this$0_ self__])) sendWithId:[[ImActorModelModulesFileUploadTask_$3_$1_$2 alloc] initWithImActorModelModulesFileUploadTask_$3_$1:self]];
}

- (instancetype)initWithImActorModelModulesFileUploadTask_$3:(ImActorModelModulesFileUploadTask_$3 *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask_$3_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$3_$1)

@implementation ImActorModelModulesFileUploadTask_$3_$1_$1


#line 258
- (void)run {
  
#line 259
  if (this$0_->this$0_->this$0_->LOG_) {
    AMLog_dWithNSString_withNSString_(this$0_->this$0_->this$0_->TAG_, JreStrcat("$I$", @"Block #", this$0_->this$0_->val$blockIndex_, @" uploaded"));
  }
  this$0_->this$0_->this$0_->uploadCount_--;
  this$0_->this$0_->this$0_->uploaded_++;
  
#line 265
  ImActorModelModulesFileUploadTask_reportProgressWithFloat_(this$0_->this$0_->this$0_, this$0_->this$0_->this$0_->uploaded_ / (jfloat) this$0_->this$0_->this$0_->blocksCount_);
  
#line 267
  ImActorModelModulesFileUploadTask_checkQueue(this$0_->this$0_->this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask_$3_$1:(ImActorModelModulesFileUploadTask_$3_$1 *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask_$3_$1_$1 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$3_$1_$1)

@implementation ImActorModelModulesFileUploadTask_$3_$1_$2


#line 276
- (void)run {
  
#line 277
  ImActorModelModulesFileUploadTask_reportError(this$0_->this$0_->this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask_$3_$1:(ImActorModelModulesFileUploadTask_$3_$1 *)outer$ {
  this$0_ = outer$;
  return [super init];
}

- (void)copyAllFieldsTo:(ImActorModelModulesFileUploadTask_$3_$1_$2 *)other {
  [super copyAllFieldsTo:other];
  other->this$0_ = this$0_;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$3_$1_$2)
