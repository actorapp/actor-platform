//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/updates/SequenceActor.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/modules/updates/SequenceActor.java"

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/api/DifferenceUpdate.h"
#include "im/actor/model/api/base/FatSeqUpdate.h"
#include "im/actor/model/api/base/SeqUpdate.h"
#include "im/actor/model/api/base/SeqUpdateTooLong.h"
#include "im/actor/model/api/base/WeakUpdate.h"
#include "im/actor/model/api/parser/UpdatesParser.h"
#include "im/actor/model/api/rpc/RequestGetDifference.h"
#include "im/actor/model/api/rpc/RequestGetState.h"
#include "im/actor/model/api/rpc/ResponseGetDifference.h"
#include "im/actor/model/api/rpc/ResponseSeq.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/engine/PreferencesStorage.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/updates/SequenceActor.h"
#include "im/actor/model/modules/updates/UpdateProcessor.h"
#include "im/actor/model/modules/updates/internal/ExecuteAfter.h"
#include "im/actor/model/modules/updates/internal/InternalUpdate.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/network/RpcCallback.h"
#include "im/actor/model/network/RpcException.h"
#include "im/actor/model/network/parser/Update.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"

#define ImActorModelModulesUpdatesSequenceActor_INVALIDATE_GAP 2000

@interface ImActorModelModulesUpdatesSequenceActor () {
 @public
  JavaUtilHashMap *further_;
  JavaUtilArrayList *pendingRunnables_;
  jboolean isValidated_;
  jint seq_;
  IOSByteArray *state_;
  ImActorModelModulesUpdatesUpdateProcessor *processor_;
  ImActorModelApiParserUpdatesParser *parser_;
}

- (void)onUpdateReceivedWithId:(id)u;

- (jboolean)isValidSeqWithInt:(jint)seq;

- (void)invalidate;

- (void)checkFuture;

- (void)checkRunnables;

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesUpdatesSequenceActor, further_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ImActorModelModulesUpdatesSequenceActor, pendingRunnables_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ImActorModelModulesUpdatesSequenceActor, state_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ImActorModelModulesUpdatesSequenceActor, processor_, ImActorModelModulesUpdatesUpdateProcessor *)
J2OBJC_FIELD_SETTER(ImActorModelModulesUpdatesSequenceActor, parser_, ImActorModelApiParserUpdatesParser *)

static NSString *ImActorModelModulesUpdatesSequenceActor_TAG_ = 
#line 32
@"Updates";
J2OBJC_STATIC_FIELD_GETTER(ImActorModelModulesUpdatesSequenceActor, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ImActorModelModulesUpdatesSequenceActor, INVALIDATE_GAP, jint)

static NSString *ImActorModelModulesUpdatesSequenceActor_KEY_SEQ_ = 
#line 35
@"updates_seq";
J2OBJC_STATIC_FIELD_GETTER(ImActorModelModulesUpdatesSequenceActor, KEY_SEQ_, NSString *)

static NSString *ImActorModelModulesUpdatesSequenceActor_KEY_STATE_ = 
#line 36
@"updates_state";
J2OBJC_STATIC_FIELD_GETTER(ImActorModelModulesUpdatesSequenceActor, KEY_STATE_, NSString *)

__attribute__((unused)) static void ImActorModelModulesUpdatesSequenceActor_onUpdateReceivedWithId_(ImActorModelModulesUpdatesSequenceActor *self, id u);

__attribute__((unused)) static jboolean ImActorModelModulesUpdatesSequenceActor_isValidSeqWithInt_(ImActorModelModulesUpdatesSequenceActor *self, jint seq);

__attribute__((unused)) static void ImActorModelModulesUpdatesSequenceActor_invalidate(ImActorModelModulesUpdatesSequenceActor *self);

__attribute__((unused)) static void ImActorModelModulesUpdatesSequenceActor_checkFuture(ImActorModelModulesUpdatesSequenceActor *self);

__attribute__((unused)) static void ImActorModelModulesUpdatesSequenceActor_checkRunnables(ImActorModelModulesUpdatesSequenceActor *self);

@interface ImActorModelModulesUpdatesSequenceActor_PushSeq () {
 @public
  jint seq_;
}

@end

@interface ImActorModelModulesUpdatesSequenceActor_$1 : NSObject < AMRpcCallback > {
 @public
  ImActorModelModulesUpdatesSequenceActor *this$0_;
}

- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseSeq *)response;

- (void)onErrorWithAMRpcException:(AMRpcException *)e;

- (instancetype)initWithImActorModelModulesUpdatesSequenceActor:(ImActorModelModulesUpdatesSequenceActor *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesUpdatesSequenceActor_$1)

J2OBJC_FIELD_SETTER(ImActorModelModulesUpdatesSequenceActor_$1, this$0_, ImActorModelModulesUpdatesSequenceActor *)

__attribute__((unused)) static void ImActorModelModulesUpdatesSequenceActor_$1_initWithImActorModelModulesUpdatesSequenceActor_(ImActorModelModulesUpdatesSequenceActor_$1 *self, ImActorModelModulesUpdatesSequenceActor *outer$);

__attribute__((unused)) static ImActorModelModulesUpdatesSequenceActor_$1 *new_ImActorModelModulesUpdatesSequenceActor_$1_initWithImActorModelModulesUpdatesSequenceActor_(ImActorModelModulesUpdatesSequenceActor *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesUpdatesSequenceActor_$1)

@interface ImActorModelModulesUpdatesSequenceActor_$2 : NSObject < AMRpcCallback > {
 @public
  ImActorModelModulesUpdatesSequenceActor *this$0_;
}

- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseGetDifference *)response;

- (void)onErrorWithAMRpcException:(AMRpcException *)e;

- (instancetype)initWithImActorModelModulesUpdatesSequenceActor:(ImActorModelModulesUpdatesSequenceActor *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesUpdatesSequenceActor_$2)

J2OBJC_FIELD_SETTER(ImActorModelModulesUpdatesSequenceActor_$2, this$0_, ImActorModelModulesUpdatesSequenceActor *)

__attribute__((unused)) static void ImActorModelModulesUpdatesSequenceActor_$2_initWithImActorModelModulesUpdatesSequenceActor_(ImActorModelModulesUpdatesSequenceActor_$2 *self, ImActorModelModulesUpdatesSequenceActor *outer$);

__attribute__((unused)) static ImActorModelModulesUpdatesSequenceActor_$2 *new_ImActorModelModulesUpdatesSequenceActor_$2_initWithImActorModelModulesUpdatesSequenceActor_(ImActorModelModulesUpdatesSequenceActor *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesUpdatesSequenceActor_$2)


#line 30
@implementation ImActorModelModulesUpdatesSequenceActor


#line 49
- (instancetype)initWithImActorModelModulesModules:(ImActorModelModulesModules *)modules {
  ImActorModelModulesUpdatesSequenceActor_initWithImActorModelModulesModules_(self, modules);
  return self;
}

- (void)preStart {
  seq_ = [((id<DKPreferencesStorage>) nil_chk([self preferences])) getInt:ImActorModelModulesUpdatesSequenceActor_KEY_SEQ_ withDefault:-1];
  state_ = [((id<DKPreferencesStorage>) nil_chk([self preferences])) getBytes:ImActorModelModulesUpdatesSequenceActor_KEY_STATE_];
  parser_ = new_ImActorModelApiParserUpdatesParser_init();
  processor_ = new_ImActorModelModulesUpdatesUpdateProcessor_initWithImActorModelModulesModules_([self modules]);
  
#line 60
  [((DKActorRef *) nil_chk([self self__])) sendWithId:new_ImActorModelModulesUpdatesSequenceActor_Invalidate_init()];
}

- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ImActorModelModulesUpdatesSequenceActor_Invalidate class]] || [message isKindOfClass:[ImActorModelApiBaseSeqUpdateTooLong class]] ||
#line 66
  [message isKindOfClass:[ImActorModelModulesUpdatesSequenceActor_ForceInvalidate class]]) {
    ImActorModelModulesUpdatesSequenceActor_invalidate(self);
  }
  else
#line 68
  if ([message isKindOfClass:[ImActorModelApiBaseSeqUpdate class]]) {
    ImActorModelModulesUpdatesSequenceActor_onUpdateReceivedWithId_(self, message);
  }
  else
#line 70
  if ([message isKindOfClass:[ImActorModelApiBaseFatSeqUpdate class]]) {
    ImActorModelModulesUpdatesSequenceActor_onUpdateReceivedWithId_(self, message);
  }
  else
#line 72
  if ([message isKindOfClass:[ImActorModelApiBaseWeakUpdate class]]) {
    ImActorModelModulesUpdatesSequenceActor_onUpdateReceivedWithId_(self, message);
  }
  else
#line 74
  if ([message isKindOfClass:[ImActorModelModulesUpdatesInternalInternalUpdate class]]) {
    ImActorModelModulesUpdatesSequenceActor_onUpdateReceivedWithId_(self, message);
  }
  else
#line 76
  if ([message isKindOfClass:[ImActorModelModulesUpdatesInternalExecuteAfter class]]) {
    ImActorModelModulesUpdatesSequenceActor_onUpdateReceivedWithId_(self, message);
  }
  else
#line 78
  if ([message isKindOfClass:[ImActorModelModulesUpdatesSequenceActor_PushSeq class]]) {
    ImActorModelModulesUpdatesSequenceActor_onUpdateReceivedWithId_(self, message);
  }
  else {
    
#line 81
    [self dropWithId:message];
  }
}


#line 85
- (void)onUpdateReceivedWithId:(id)u {
  ImActorModelModulesUpdatesSequenceActor_onUpdateReceivedWithId_(self, u);
}


#line 200
- (jboolean)isValidSeqWithInt:(jint)seq {
  return ImActorModelModulesUpdatesSequenceActor_isValidSeqWithInt_(self, seq);
}

- (void)invalidate {
  ImActorModelModulesUpdatesSequenceActor_invalidate(self);
}


#line 303
- (void)checkFuture {
  ImActorModelModulesUpdatesSequenceActor_checkFuture(self);
}


#line 314
- (void)checkRunnables {
  ImActorModelModulesUpdatesSequenceActor_checkRunnables(self);
}

@end


#line 49
void ImActorModelModulesUpdatesSequenceActor_initWithImActorModelModulesModules_(ImActorModelModulesUpdatesSequenceActor *self, ImActorModelModulesModules *modules) {
  (void) ImActorModelModulesUtilsModuleActor_initWithImActorModelModulesModules_(self, modules);
  self->further_ = new_JavaUtilHashMap_init();
  self->pendingRunnables_ = new_JavaUtilArrayList_init();
  self->isValidated_ =
#line 42
  YES;
}


#line 49
ImActorModelModulesUpdatesSequenceActor *new_ImActorModelModulesUpdatesSequenceActor_initWithImActorModelModulesModules_(ImActorModelModulesModules *modules) {
  ImActorModelModulesUpdatesSequenceActor *self = [ImActorModelModulesUpdatesSequenceActor alloc];
  ImActorModelModulesUpdatesSequenceActor_initWithImActorModelModulesModules_(self, modules);
  return self;
}


#line 85
void ImActorModelModulesUpdatesSequenceActor_onUpdateReceivedWithId_(ImActorModelModulesUpdatesSequenceActor *self, id u) {
  
#line 87
  jint seq;
  IOSByteArray *state;
  jint type;
  IOSByteArray *body;
  if ([u isKindOfClass:[ImActorModelApiBaseSeqUpdate class]]) {
    seq = [((ImActorModelApiBaseSeqUpdate *) nil_chk(((ImActorModelApiBaseSeqUpdate *) check_class_cast(u, [ImActorModelApiBaseSeqUpdate class])))) getSeq];
    state = [((ImActorModelApiBaseSeqUpdate *) nil_chk(((ImActorModelApiBaseSeqUpdate *) check_class_cast(u, [ImActorModelApiBaseSeqUpdate class])))) getState];
    type = [((ImActorModelApiBaseSeqUpdate *) nil_chk(((ImActorModelApiBaseSeqUpdate *) check_class_cast(u, [ImActorModelApiBaseSeqUpdate class])))) getUpdateHeader];
    body = [((ImActorModelApiBaseSeqUpdate *) nil_chk(((ImActorModelApiBaseSeqUpdate *) check_class_cast(u, [ImActorModelApiBaseSeqUpdate class])))) getUpdate];
  }
  else
#line 96
  if ([u isKindOfClass:[ImActorModelApiBaseFatSeqUpdate class]]) {
    seq = [((ImActorModelApiBaseFatSeqUpdate *) nil_chk(((ImActorModelApiBaseFatSeqUpdate *) check_class_cast(u, [ImActorModelApiBaseFatSeqUpdate class])))) getSeq];
    state = [((ImActorModelApiBaseFatSeqUpdate *) nil_chk(((ImActorModelApiBaseFatSeqUpdate *) check_class_cast(u, [ImActorModelApiBaseFatSeqUpdate class])))) getState];
    type = [((ImActorModelApiBaseFatSeqUpdate *) nil_chk(((ImActorModelApiBaseFatSeqUpdate *) check_class_cast(u, [ImActorModelApiBaseFatSeqUpdate class])))) getUpdateHeader];
    body = [((ImActorModelApiBaseFatSeqUpdate *) nil_chk(((ImActorModelApiBaseFatSeqUpdate *) check_class_cast(u, [ImActorModelApiBaseFatSeqUpdate class])))) getUpdate];
  }
  else
#line 101
  if ([u isKindOfClass:[ImActorModelApiBaseWeakUpdate class]]) {
    ImActorModelApiBaseWeakUpdate *w = (ImActorModelApiBaseWeakUpdate *) check_class_cast(u, [ImActorModelApiBaseWeakUpdate class]);
    AMLog_wWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, @"Received weak update");
    @try {
      [((ImActorModelModulesUpdatesUpdateProcessor *) nil_chk(self->processor_)) processUpdateWithImActorModelNetworkParserUpdate:[((ImActorModelApiParserUpdatesParser *) nil_chk(self->parser_)) readWithInt:[((ImActorModelApiBaseWeakUpdate *) nil_chk(w)) getUpdateHeader] withByteArray:[w getUpdate]]];
    }
    @catch (
#line 106
    JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      AMLog_wWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, @"Unable to parse update: ignoring");
    }
    return;
  }
  else
#line 111
  if ([u isKindOfClass:[ImActorModelModulesUpdatesInternalInternalUpdate class]]) {
    AMLog_wWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, @"Received internal update");
    [((ImActorModelModulesUpdatesUpdateProcessor *) nil_chk(self->processor_)) processInternalUpdateWithImActorModelModulesUpdatesInternalInternalUpdate:(ImActorModelModulesUpdatesInternalInternalUpdate *) check_class_cast(u, [ImActorModelModulesUpdatesInternalInternalUpdate class])];
    return;
  }
  else
#line 115
  if ([u isKindOfClass:[ImActorModelModulesUpdatesInternalExecuteAfter class]]) {
    ImActorModelModulesUpdatesInternalExecuteAfter *after = (ImActorModelModulesUpdatesInternalExecuteAfter *) check_class_cast(u, [ImActorModelModulesUpdatesInternalExecuteAfter class]);
    if ([((ImActorModelModulesUpdatesInternalExecuteAfter *) nil_chk(after)) getSeq] <= self->seq_) {
      [((id<JavaLangRunnable>) nil_chk([after getRunnable])) run];
    }
    else {
      
#line 120
      [((JavaUtilArrayList *) nil_chk(self->pendingRunnables_)) addWithId:after];
    }
    return;
  }
  else
#line 123
  if ([u isKindOfClass:[ImActorModelModulesUpdatesSequenceActor_PushSeq class]]) {
    ImActorModelModulesUpdatesSequenceActor_PushSeq *pushSeq = (ImActorModelModulesUpdatesSequenceActor_PushSeq *) check_class_cast(u, [ImActorModelModulesUpdatesSequenceActor_PushSeq class]);
    if (((ImActorModelModulesUpdatesSequenceActor_PushSeq *) nil_chk(pushSeq))->seq_ <= self->seq_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, JreStrcat("$IC", @"Ignored PushSeq {seq:", pushSeq->seq_, '}'));
    }
    else {
      
#line 128
      AMLog_wWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, @"External Out of sequence: starting timer for invalidation");
      [((DKActorRef *) nil_chk([self self__])) sendOnceWithId:new_ImActorModelModulesUpdatesSequenceActor_ForceInvalidate_init() withLong:ImActorModelModulesUpdatesSequenceActor_INVALIDATE_GAP];
    }
    return;
  }
  else {
    
#line 133
    return;
  }
  
#line 137
  if (seq <= self->seq_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, JreStrcat("$I$IC", @"Ignored SeqUpdate {seq:", seq, @", currentSeq: ", self->seq_, '}'));
    return;
  }
  AMLog_dWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, JreStrcat("$IC", @"SeqUpdate {seq:", seq, '}'));
  
#line 143
  if (!self->isValidated_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, @"Caching in further map");
    (void) [((JavaUtilHashMap *) nil_chk(self->further_)) putWithId:JavaLangInteger_valueOfWithInt_(seq) withId:u];
    return;
  }
  
#line 149
  if (!ImActorModelModulesUpdatesSequenceActor_isValidSeqWithInt_(self, seq)) {
    AMLog_wWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, @"Out of sequence: starting timer for invalidation");
    (void) [((JavaUtilHashMap *) nil_chk(self->further_)) putWithId:JavaLangInteger_valueOfWithInt_(seq) withId:u];
    [((DKActorRef *) nil_chk([self self__])) sendOnceWithId:new_ImActorModelModulesUpdatesSequenceActor_ForceInvalidate_init() withLong:ImActorModelModulesUpdatesSequenceActor_INVALIDATE_GAP];
    return;
  }
  
#line 157
  ImActorModelNetworkParserUpdate *update;
  @try {
    update = [new_ImActorModelApiParserUpdatesParser_init() readWithInt:type withByteArray:body];
  }
  @catch (
#line 160
  JavaIoIOException *e) {
    AMLog_wWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, @"Unable to parse update: ignoring");
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    return;
  }
  
#line 166
  if ([((ImActorModelModulesUpdatesUpdateProcessor *) nil_chk(self->processor_)) isCausesInvalidationWithImActorModelNetworkParserUpdate:update]) {
    AMLog_wWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, @"Message causes invalidation");
    ImActorModelModulesUpdatesSequenceActor_invalidate(self);
    return;
  }
  
#line 173
  AMLog_dWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, JreStrcat("$@", @"Processing update: ", update));
  
#line 175
  if ([u isKindOfClass:[ImActorModelApiBaseFatSeqUpdate class]]) {
    ImActorModelApiBaseFatSeqUpdate *fatSeqUpdate = (ImActorModelApiBaseFatSeqUpdate *) check_class_cast(u, [ImActorModelApiBaseFatSeqUpdate class]);
    [self->processor_ applyRelatedWithJavaUtilList:[((ImActorModelApiBaseFatSeqUpdate *) nil_chk(fatSeqUpdate)) getUsers] withJavaUtilList:[fatSeqUpdate getGroups] withBoolean:NO];
  }
  
#line 180
  [self->processor_ processUpdateWithImActorModelNetworkParserUpdate:update];
  
#line 182
  if ([u isKindOfClass:[ImActorModelApiBaseFatSeqUpdate class]]) {
    ImActorModelApiBaseFatSeqUpdate *fatSeqUpdate = (ImActorModelApiBaseFatSeqUpdate *) check_class_cast(u, [ImActorModelApiBaseFatSeqUpdate class]);
    [self->processor_ applyRelatedWithJavaUtilList:[((ImActorModelApiBaseFatSeqUpdate *) nil_chk(fatSeqUpdate)) getUsers] withJavaUtilList:[fatSeqUpdate getGroups] withBoolean:YES];
  }
  
#line 188
  self->seq_ = seq;
  self->state_ = state;
  [((id<DKPreferencesStorage>) nil_chk([self preferences])) putInt:ImActorModelModulesUpdatesSequenceActor_KEY_SEQ_ withValue:seq];
  [((id<DKPreferencesStorage>) nil_chk([self preferences])) putBytes:ImActorModelModulesUpdatesSequenceActor_KEY_STATE_ withValue:state];
  
#line 193
  ImActorModelModulesUpdatesSequenceActor_checkRunnables(self);
  ImActorModelModulesUpdatesSequenceActor_checkFuture(self);
  
#line 197
  [((DKActorRef *) nil_chk([self self__])) sendOnceWithId:new_ImActorModelModulesUpdatesSequenceActor_ForceInvalidate_init() withLong:24 * 60 * 60 * 1000LL];
}


#line 200
jboolean ImActorModelModulesUpdatesSequenceActor_isValidSeqWithInt_(ImActorModelModulesUpdatesSequenceActor *self, jint seq) {
  return self->seq_ <= 0 || seq == self->seq_ + 1;
}

void ImActorModelModulesUpdatesSequenceActor_invalidate(ImActorModelModulesUpdatesSequenceActor *self) {
  if (!self->isValidated_) {
    return;
  }
  self->isValidated_ = NO;
  
#line 210
  if (self->seq_ < 0) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, @"Loading fresh state...");
    [self requestWithImActorModelNetworkParserRequest:new_ImActorModelApiRpcRequestGetState_init() withAMRpcCallback:new_ImActorModelModulesUpdatesSequenceActor_$1_initWithImActorModelModulesUpdatesSequenceActor_(self)];
  }
  else {
    
#line 247
    AMLog_dWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_TAG_, @"Loading difference...");
    [self requestWithImActorModelNetworkParserRequest:new_ImActorModelApiRpcRequestGetDifference_initWithInt_withByteArray_(self->seq_, self->state_) withAMRpcCallback:new_ImActorModelModulesUpdatesSequenceActor_$2_initWithImActorModelModulesUpdatesSequenceActor_(self)];
  }
}


#line 303
void ImActorModelModulesUpdatesSequenceActor_checkFuture(ImActorModelModulesUpdatesSequenceActor *self) {
  for (jint i = self->seq_ + 1; ; i++) {
    if ([((JavaUtilHashMap *) nil_chk(self->further_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(i)]) {
      [self onReceiveWithId:[self->further_ removeWithId:JavaLangInteger_valueOfWithInt_(i)]];
    }
    else {
      
#line 308
      break;
    }
  }
  [((JavaUtilHashMap *) nil_chk(self->further_)) clear];
}


#line 314
void ImActorModelModulesUpdatesSequenceActor_checkRunnables(ImActorModelModulesUpdatesSequenceActor *self) {
  if ([((JavaUtilArrayList *) nil_chk(self->pendingRunnables_)) size] > 0) {
    {
      IOSObjectArray *a__ =
#line 316
      [self->pendingRunnables_ toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[self->pendingRunnables_ size] type:ImActorModelModulesUpdatesInternalExecuteAfter_class_()]];
      ImActorModelModulesUpdatesInternalExecuteAfter * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      ImActorModelModulesUpdatesInternalExecuteAfter * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ImActorModelModulesUpdatesInternalExecuteAfter *e = *b__++;
        
#line 317
        if ([((ImActorModelModulesUpdatesInternalExecuteAfter *) nil_chk(e)) getSeq] <= self->seq_) {
          [((id<JavaLangRunnable>) nil_chk([e getRunnable])) run];
          [self->pendingRunnables_ removeWithId:e];
        }
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesUpdatesSequenceActor)


#line 325
@implementation ImActorModelModulesUpdatesSequenceActor_ForceInvalidate

- (instancetype)init {
  ImActorModelModulesUpdatesSequenceActor_ForceInvalidate_init(self);
  return self;
}

@end

void ImActorModelModulesUpdatesSequenceActor_ForceInvalidate_init(ImActorModelModulesUpdatesSequenceActor_ForceInvalidate *self) {
  (void) NSObject_init(self);
}

ImActorModelModulesUpdatesSequenceActor_ForceInvalidate *new_ImActorModelModulesUpdatesSequenceActor_ForceInvalidate_init() {
  ImActorModelModulesUpdatesSequenceActor_ForceInvalidate *self = [ImActorModelModulesUpdatesSequenceActor_ForceInvalidate alloc];
  ImActorModelModulesUpdatesSequenceActor_ForceInvalidate_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesUpdatesSequenceActor_ForceInvalidate)


#line 329
@implementation ImActorModelModulesUpdatesSequenceActor_Invalidate

- (instancetype)init {
  ImActorModelModulesUpdatesSequenceActor_Invalidate_init(self);
  return self;
}

@end

void ImActorModelModulesUpdatesSequenceActor_Invalidate_init(ImActorModelModulesUpdatesSequenceActor_Invalidate *self) {
  (void) NSObject_init(self);
}

ImActorModelModulesUpdatesSequenceActor_Invalidate *new_ImActorModelModulesUpdatesSequenceActor_Invalidate_init() {
  ImActorModelModulesUpdatesSequenceActor_Invalidate *self = [ImActorModelModulesUpdatesSequenceActor_Invalidate alloc];
  ImActorModelModulesUpdatesSequenceActor_Invalidate_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesUpdatesSequenceActor_Invalidate)


#line 333
@implementation ImActorModelModulesUpdatesSequenceActor_PushSeq


#line 336
- (instancetype)initWithInt:(jint)seq {
  ImActorModelModulesUpdatesSequenceActor_PushSeq_initWithInt_(self, seq);
  return self;
}

@end


#line 336
void ImActorModelModulesUpdatesSequenceActor_PushSeq_initWithInt_(ImActorModelModulesUpdatesSequenceActor_PushSeq *self, jint seq) {
  (void) NSObject_init(self);
  
#line 337
  self->seq_ = seq;
}


#line 336
ImActorModelModulesUpdatesSequenceActor_PushSeq *new_ImActorModelModulesUpdatesSequenceActor_PushSeq_initWithInt_(jint seq) {
  ImActorModelModulesUpdatesSequenceActor_PushSeq *self = [ImActorModelModulesUpdatesSequenceActor_PushSeq alloc];
  ImActorModelModulesUpdatesSequenceActor_PushSeq_initWithInt_(self, seq);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesUpdatesSequenceActor_PushSeq)

@implementation ImActorModelModulesUpdatesSequenceActor_$1


#line 214
- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseSeq *)response {
  if (this$0_->isValidated_) {
    return;
  }
  
#line 219
  this$0_->seq_ = [((ImActorModelApiRpcResponseSeq *) nil_chk(response)) getSeq];
  this$0_->state_ = [response getState];
  
#line 222
  this$0_->isValidated_ = YES;
  
#line 224
  [((id<DKPreferencesStorage>) nil_chk([this$0_ preferences])) putInt:ImActorModelModulesUpdatesSequenceActor_get_KEY_SEQ_() withValue:this$0_->seq_];
  [((id<DKPreferencesStorage>) nil_chk([this$0_ preferences])) putBytes:ImActorModelModulesUpdatesSequenceActor_get_KEY_STATE_() withValue:this$0_->state_];
  
#line 227
  AMLog_dWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_get_TAG_(), JreStrcat("$IC", @"State loaded {seq=", this$0_->seq_, '}'));
  
#line 229
  ImActorModelModulesUpdatesSequenceActor_checkRunnables(this$0_);
  ImActorModelModulesUpdatesSequenceActor_checkFuture(this$0_);
  
#line 233
  [((DKActorRef *) nil_chk([this$0_ self__])) sendOnceWithId:new_ImActorModelModulesUpdatesSequenceActor_ForceInvalidate_init() withLong:24 * 60 * 60 * 1000LL];
}


#line 237
- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  if (this$0_->isValidated_) {
    return;
  }
  this$0_->isValidated_ = YES;
  
#line 243
  ImActorModelModulesUpdatesSequenceActor_invalidate(this$0_);
}

- (instancetype)initWithImActorModelModulesUpdatesSequenceActor:(ImActorModelModulesUpdatesSequenceActor *)outer$ {
  ImActorModelModulesUpdatesSequenceActor_$1_initWithImActorModelModulesUpdatesSequenceActor_(self, outer$);
  return self;
}

@end

void ImActorModelModulesUpdatesSequenceActor_$1_initWithImActorModelModulesUpdatesSequenceActor_(ImActorModelModulesUpdatesSequenceActor_$1 *self, ImActorModelModulesUpdatesSequenceActor *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ImActorModelModulesUpdatesSequenceActor_$1 *new_ImActorModelModulesUpdatesSequenceActor_$1_initWithImActorModelModulesUpdatesSequenceActor_(ImActorModelModulesUpdatesSequenceActor *outer$) {
  ImActorModelModulesUpdatesSequenceActor_$1 *self = [ImActorModelModulesUpdatesSequenceActor_$1 alloc];
  ImActorModelModulesUpdatesSequenceActor_$1_initWithImActorModelModulesUpdatesSequenceActor_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesUpdatesSequenceActor_$1)

@implementation ImActorModelModulesUpdatesSequenceActor_$2


#line 250
- (void)onResultWithImActorModelNetworkParserResponse:(ImActorModelApiRpcResponseGetDifference *)response {
  if (this$0_->isValidated_) {
    return;
  }
  
#line 255
  AMLog_dWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_get_TAG_(), JreStrcat("$IC", @"Difference loaded {seq=", [((ImActorModelApiRpcResponseGetDifference *) nil_chk(response)) getSeq], '}'));
  
#line 257
  [((ImActorModelModulesUpdatesUpdateProcessor *) nil_chk(this$0_->processor_)) applyRelatedWithJavaUtilList:[response getUsers] withJavaUtilList:[response getGroups] withBoolean:NO];
  for (ImActorModelApiDifferenceUpdate * __strong u in nil_chk([response getUpdates])) {
    @try {
      ImActorModelNetworkParserUpdate *update = [((ImActorModelApiParserUpdatesParser *) nil_chk(this$0_->parser_)) readWithInt:[((ImActorModelApiDifferenceUpdate *) nil_chk(u)) getUpdateHeader] withByteArray:[u getUpdate]];
      [this$0_->processor_ processUpdateWithImActorModelNetworkParserUpdate:update];
    }
    @catch (
#line 262
    JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      AMLog_dWithNSString_withNSString_(ImActorModelModulesUpdatesSequenceActor_get_TAG_(), JreStrcat("$I$", @"Broken update #", [((ImActorModelApiDifferenceUpdate *) nil_chk(u)) getUpdateHeader], @": ignoring"));
    }
  }
  [this$0_->processor_ applyRelatedWithJavaUtilList:[response getUsers] withJavaUtilList:[response getGroups] withBoolean:YES];
  
#line 269
  this$0_->seq_ = [response getSeq];
  this$0_->state_ = [response getState];
  
#line 272
  this$0_->isValidated_ = YES;
  
#line 274
  [((id<DKPreferencesStorage>) nil_chk([this$0_ preferences])) putInt:ImActorModelModulesUpdatesSequenceActor_get_KEY_SEQ_() withValue:this$0_->seq_];
  [((id<DKPreferencesStorage>) nil_chk([this$0_ preferences])) putBytes:ImActorModelModulesUpdatesSequenceActor_get_KEY_STATE_() withValue:this$0_->state_];
  
#line 277
  ImActorModelModulesUpdatesSequenceActor_checkRunnables(this$0_);
  ImActorModelModulesUpdatesSequenceActor_checkFuture(this$0_);
  
#line 281
  [((DKActorRef *) nil_chk([this$0_ self__])) sendOnceWithId:new_ImActorModelModulesUpdatesSequenceActor_ForceInvalidate_init() withLong:24 * 60 * 60 * 1000LL];
  
#line 283
  if ([response needMore]) {
    ImActorModelModulesUpdatesSequenceActor_invalidate(this$0_);
  }
}


#line 289
- (void)onErrorWithAMRpcException:(AMRpcException *)e {
  if (this$0_->isValidated_) {
    return;
  }
  this$0_->isValidated_ = YES;
  
#line 295
  ImActorModelModulesUpdatesSequenceActor_invalidate(this$0_);
}

- (instancetype)initWithImActorModelModulesUpdatesSequenceActor:(ImActorModelModulesUpdatesSequenceActor *)outer$ {
  ImActorModelModulesUpdatesSequenceActor_$2_initWithImActorModelModulesUpdatesSequenceActor_(self, outer$);
  return self;
}

@end

void ImActorModelModulesUpdatesSequenceActor_$2_initWithImActorModelModulesUpdatesSequenceActor_(ImActorModelModulesUpdatesSequenceActor_$2 *self, ImActorModelModulesUpdatesSequenceActor *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ImActorModelModulesUpdatesSequenceActor_$2 *new_ImActorModelModulesUpdatesSequenceActor_$2_initWithImActorModelModulesUpdatesSequenceActor_(ImActorModelModulesUpdatesSequenceActor *outer$) {
  ImActorModelModulesUpdatesSequenceActor_$2 *self = [ImActorModelModulesUpdatesSequenceActor_$2 alloc];
  ImActorModelModulesUpdatesSequenceActor_$2_initWithImActorModelModulesUpdatesSequenceActor_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesUpdatesSequenceActor_$2)
