//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/ConfigurationBuilder.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/ConfigurationBuilder.java"

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/AnalyticsProvider.h"
#include "im/actor/model/ApiConfiguration.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/ConfigurationBuilder.h"
#include "im/actor/model/CryptoProvider.h"
#include "im/actor/model/DispatcherProvider.h"
#include "im/actor/model/FileSystemProvider.h"
#include "im/actor/model/HttpDownloaderProvider.h"
#include "im/actor/model/LocaleProvider.h"
#include "im/actor/model/LogProvider.h"
#include "im/actor/model/MainThreadProvider.h"
#include "im/actor/model/NetworkProvider.h"
#include "im/actor/model/NotificationProvider.h"
#include "im/actor/model/PhoneBookProvider.h"
#include "im/actor/model/StorageProvider.h"
#include "im/actor/model/ThreadingProvider.h"
#include "im/actor/model/network/ConnectionEndpoint.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"

@interface AMConfigurationBuilder () {
 @public
  id<AMLogProvider> log_;
  id<AMNetworkProvider> networkProvider_;
  id<AMThreadingProvider> threadingProvider_;
  id<AMMainThreadProvider> mainThreadProvider_;
  id<AMStorageProvider> enginesFactory_;
  JavaUtilArrayList *endpoints_;
  id<AMLocaleProvider> localeProvider_;
  id<AMPhoneBookProvider> phoneBookProvider_;
  id<AMCryptoProvider> cryptoProvider_;
  id<AMFileSystemProvider> fileSystemProvider_;
  jboolean enableContactsLogging_;
  jboolean enableNetworkLogging_;
  jboolean enableFilesLogging_;
  id<AMNotificationProvider> notificationProvider_;
  id<AMDispatcherProvider> dispatcherProvider_;
  AMApiConfiguration *apiConfiguration_;
  id<AMHttpDownloaderProvider> httpDownloaderProvider_;
  id<AMAnalyticsProvider> analyticsProvider_;
}

@end

J2OBJC_FIELD_SETTER(AMConfigurationBuilder, log_, id<AMLogProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, networkProvider_, id<AMNetworkProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, threadingProvider_, id<AMThreadingProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, mainThreadProvider_, id<AMMainThreadProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, enginesFactory_, id<AMStorageProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, endpoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, localeProvider_, id<AMLocaleProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, phoneBookProvider_, id<AMPhoneBookProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, cryptoProvider_, id<AMCryptoProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, fileSystemProvider_, id<AMFileSystemProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, notificationProvider_, id<AMNotificationProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, dispatcherProvider_, id<AMDispatcherProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, apiConfiguration_, AMApiConfiguration *)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, httpDownloaderProvider_, id<AMHttpDownloaderProvider>)
J2OBJC_FIELD_SETTER(AMConfigurationBuilder, analyticsProvider_, id<AMAnalyticsProvider>)


#line 10
@implementation AMConfigurationBuilder


#line 45
- (AMConfigurationBuilder *)setHttpDownloaderProviderWithAMHttpDownloaderProvider:(id<AMHttpDownloaderProvider>)httpDownloaderProvider {
  self->httpDownloaderProvider_ = httpDownloaderProvider;
  return self;
}

- (AMConfigurationBuilder *)setAnalyticsProviderWithAMAnalyticsProvider:(id<AMAnalyticsProvider>)analyticsProvider {
  self->analyticsProvider_ = analyticsProvider;
  return self;
}


#line 61
- (AMConfigurationBuilder *)setApiConfiguration:(AMApiConfiguration *)apiConfiguration {
  self->apiConfiguration_ = apiConfiguration;
  return self;
}


#line 72
- (AMConfigurationBuilder *)setNotificationProvider:(id<AMNotificationProvider>)notificationProvider {
  self->notificationProvider_ = notificationProvider;
  return self;
}


#line 83
- (AMConfigurationBuilder *)setFileSystemProvider:(id<AMFileSystemProvider>)fileSystemProvider {
  self->fileSystemProvider_ = fileSystemProvider;
  return self;
}


#line 94
- (AMConfigurationBuilder *)setEnableContactsLogging:(jboolean)enableContactsLogging {
  self->enableContactsLogging_ = enableContactsLogging;
  return self;
}


#line 105
- (AMConfigurationBuilder *)setEnableNetworkLogging:(jboolean)enableNetworkLogging {
  self->enableNetworkLogging_ = enableNetworkLogging;
  return self;
}


#line 116
- (AMConfigurationBuilder *)setEnableFilesLoggingWithBoolean:(jboolean)enableFilesLogging {
  self->enableFilesLogging_ = enableFilesLogging;
  return self;
}


#line 127
- (AMConfigurationBuilder *)setCryptoProvider:(id<AMCryptoProvider>)cryptoProvider {
  self->cryptoProvider_ = cryptoProvider;
  return self;
}


#line 138
- (AMConfigurationBuilder *)setPhoneBookProvider:(id<AMPhoneBookProvider>)phoneBookProvider {
  self->phoneBookProvider_ = phoneBookProvider;
  return self;
}


#line 149
- (AMConfigurationBuilder *)setLogProvider:(id<AMLogProvider>)log {
  self->log_ = log;
  return self;
}


#line 160
- (AMConfigurationBuilder *)setNetworkProvider:(id<AMNetworkProvider>)networkProvider {
  self->networkProvider_ = networkProvider;
  return self;
}


#line 171
- (AMConfigurationBuilder *)setThreadingProvider:(id<AMThreadingProvider>)threadingProvider {
  self->threadingProvider_ = threadingProvider;
  return self;
}


#line 182
- (AMConfigurationBuilder *)setStorageProvider:(id<AMStorageProvider>)storageProvider {
  self->enginesFactory_ = storageProvider;
  return self;
}


#line 193
- (AMConfigurationBuilder *)setLocaleProvider:(id<AMLocaleProvider>)localeProvider {
  self->localeProvider_ = localeProvider;
  return self;
}


#line 204
- (AMConfigurationBuilder *)setDispatcherProvider:(id<AMDispatcherProvider>)dispatcherProvider {
  self->dispatcherProvider_ = dispatcherProvider;
  return self;
}


#line 221
- (AMConfigurationBuilder *)addEndpoint:(NSString *)url {
  
#line 224
  NSString *scheme = [((NSString *) nil_chk([url substring:0 endIndex:[((NSString *) nil_chk(url)) indexOfString:@":"]])) lowercaseString];
  NSString *host = [url substring:[url indexOfString:@"://"] + ((jint) [@"://" length])];
  if ([((NSString *) nil_chk(host)) hasSuffix:@"/"]) {
    host = [host substring:0 endIndex:((jint) [host length]) - 1];
  }
  jint port = -1;
  if ([((NSString *) nil_chk(host)) contains:@":"]) {
    IOSObjectArray *parts = [host split:@":"];
    host = IOSObjectArray_Get(nil_chk(parts), 0);
    port = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(parts, 1));
  }
  
#line 236
  if ([((NSString *) nil_chk(scheme)) isEqual:@"ssl"] || [scheme isEqual:@"tls"]) {
    if (port <= 0) {
      port = 443;
    }
    [((JavaUtilArrayList *) nil_chk(endpoints_)) addWithId:new_AMConnectionEndpoint_initWithNSString_withInt_withAMConnectionEndpoint_TypeEnum_(host, port, AMConnectionEndpoint_TypeEnum_get_TCP_TLS())];
  }
  else
#line 241
  if ([scheme isEqual:@"tcp"]) {
    if (port <= 0) {
      port = 80;
    }
    [((JavaUtilArrayList *) nil_chk(endpoints_)) addWithId:new_AMConnectionEndpoint_initWithNSString_withInt_withAMConnectionEndpoint_TypeEnum_(host, port, AMConnectionEndpoint_TypeEnum_get_TCP())];
  }
  else
#line 246
  if ([scheme isEqual:@"ws"]) {
    if (port <= 0) {
      port = 80;
    }
    [((JavaUtilArrayList *) nil_chk(endpoints_)) addWithId:new_AMConnectionEndpoint_initWithNSString_withInt_withAMConnectionEndpoint_TypeEnum_(host, port, AMConnectionEndpoint_TypeEnum_get_WS())];
  }
  else
#line 251
  if ([scheme isEqual:@"wss"]) {
    if (port <= 0) {
      port = 443;
    }
    [((JavaUtilArrayList *) nil_chk(endpoints_)) addWithId:new_AMConnectionEndpoint_initWithNSString_withInt_withAMConnectionEndpoint_TypeEnum_(host, port, AMConnectionEndpoint_TypeEnum_get_WS_TLS())];
  }
  else {
    
#line 257
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Unknown scheme type: ", scheme));
  }
  return self;
}


#line 268
- (AMConfigurationBuilder *)setMainThreadProvider:(id<AMMainThreadProvider>)mainThreadProvider {
  self->mainThreadProvider_ = mainThreadProvider;
  return self;
}


#line 278
- (AMConfiguration *)build {
  if (networkProvider_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Networking is not set");
  }
  if (threadingProvider_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Threading is not set");
  }
  if (mainThreadProvider_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Main Thread is not set");
  }
  if (enginesFactory_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Storage not set");
  }
  if ([((JavaUtilArrayList *) nil_chk(endpoints_)) size] == 0) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Endpoints not set");
  }
  if (localeProvider_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Locale Provider not set");
  }
  if (phoneBookProvider_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Phonebook Provider not set");
  }
  if (cryptoProvider_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Crypto Provider not set");
  }
  if (apiConfiguration_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Api Configuration not set");
  }
  if (dispatcherProvider_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Dispatcher Provider not set");
  }
  return new_AMConfiguration_initWithAMNetworkProvider_withAMConnectionEndpointArray_withAMThreadingProvider_withAMMainThreadProvider_withAMStorageProvider_withAMLogProvider_withAMLocaleProvider_withAMPhoneBookProvider_withAMCryptoProvider_withAMFileSystemProvider_withAMNotificationProvider_withAMDispatcherProvider_withAMApiConfiguration_withBoolean_withBoolean_withBoolean_withAMHttpDownloaderProvider_withAMAnalyticsProvider_(networkProvider_, [endpoints_ toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[endpoints_ size] type:AMConnectionEndpoint_class_()]],
#line 310
  threadingProvider_, mainThreadProvider_, enginesFactory_, log_, localeProvider_,
#line 311
  phoneBookProvider_, cryptoProvider_, fileSystemProvider_, notificationProvider_,
#line 312
  dispatcherProvider_, apiConfiguration_, enableContactsLogging_, enableNetworkLogging_,
#line 313
  enableFilesLogging_, httpDownloaderProvider_, analyticsProvider_);
}

- (instancetype)init {
  AMConfigurationBuilder_init(self);
  return self;
}

@end

void AMConfigurationBuilder_init(AMConfigurationBuilder *self) {
  (void) NSObject_init(self);
  self->endpoints_ = new_JavaUtilArrayList_init();
  self->enableContactsLogging_ =
#line 31
  NO;
  self->enableNetworkLogging_ = NO;
  self->enableFilesLogging_ = NO;
}

AMConfigurationBuilder *new_AMConfigurationBuilder_init() {
  AMConfigurationBuilder *self = [AMConfigurationBuilder alloc];
  AMConfigurationBuilder_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMConfigurationBuilder)
