//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/jvm/JavaThreadingProvider.java
//


#include "J2ObjC_source.h"
#include "im/actor/model/concurrency/AbsTimerCompat.h"
#include "im/actor/model/concurrency/TimerCompat.h"
#include "im/actor/model/droidkit/actors/ActorSystem.h"
#include "im/actor/model/droidkit/actors/ThreadPriority.h"
#include "im/actor/model/droidkit/actors/mailbox/ActorDispatcher.h"
#include "im/actor/model/jvm/JavaThreadingProvider.h"
#include "im/actor/model/jvm/threads/JavaAtomicInteger.h"
#include "im/actor/model/jvm/threads/JavaAtomicLong.h"
#include "im/actor/model/jvm/threads/JavaDispatcherActor.h"
#include "im/actor/model/jvm/threads/JavaThreadLocal.h"
#include "im/actor/model/util/AtomicIntegerCompat.h"
#include "im/actor/model/util/AtomicLongCompat.h"
#include "im/actor/model/util/ThreadLocalCompat.h"
#include "java/lang/Runnable.h"
#include "java/lang/Runtime.h"
#include "java/lang/System.h"

@implementation AMJavaThreadingProvider

- (instancetype)init {
  AMJavaThreadingProvider_init(self);
  return self;
}

- (jlong)getActorTime {
  return JavaLangSystem_nanoTime() / 1000000;
}

- (jlong)getCurrentTime {
  return JavaLangSystem_currentTimeMillis();
}

- (jlong)getSyncedCurrentTime {
  return [self getCurrentTime];
}

- (jint)getCoresCount {
  return [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors];
}

- (AMAtomicIntegerCompat *)createAtomicIntWithInitValue:(jint)value {
  return new_ImActorModelJvmThreadsJavaAtomicInteger_initWithInt_(value);
}

- (AMAtomicLongCompat *)createAtomicLongWithInitValue:(jlong)value {
  return new_ImActorModelJvmThreadsJavaAtomicLong_initWithLong_(value);
}

- (AMThreadLocalCompat *)createThreadLocal {
  return new_ImActorModelJvmThreadsJavaThreadLocal_init();
}

- (AMAbsTimerCompat *)createTimerWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  return new_AMTimerCompat_initWithJavaLangRunnable_(runnable);
}

- (DKActorDispatcher *)createDispatcherWithName:(NSString *)name
                               withThreadsCount:(jint)threadsCount
                                   withPriority:(DKThreadPriorityEnum *)priority
                                withActorSystem:(DKActorSystem *)actorSystem {
  return new_ImActorModelJvmThreadsJavaDispatcherActor_initWithNSString_withDKActorSystem_withInt_withDKThreadPriorityEnum_(name, actorSystem, threadsCount, priority);
}

- (DKActorDispatcher *)createDefaultDispatcherWithName:(NSString *)name
                                          withPriority:(DKThreadPriorityEnum *)priority
                                       withActorSystem:(DKActorSystem *)actorSystem {
  return [self createDispatcherWithName:name withThreadsCount:[self getCoresCount] withPriority:priority withActorSystem:actorSystem];
}

@end

void AMJavaThreadingProvider_init(AMJavaThreadingProvider *self) {
  (void) NSObject_init(self);
}

AMJavaThreadingProvider *new_AMJavaThreadingProvider_init() {
  AMJavaThreadingProvider *self = [AMJavaThreadingProvider alloc];
  AMJavaThreadingProvider_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMJavaThreadingProvider)
