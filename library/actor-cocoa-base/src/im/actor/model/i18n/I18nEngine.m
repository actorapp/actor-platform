//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/i18n/I18nEngine.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/i18n/I18nEngine.java"

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/LocaleProvider.h"
#include "im/actor/model/droidkit/actors/Environment.h"
#include "im/actor/model/droidkit/engine/KeyValueEngine.h"
#include "im/actor/model/entity/Avatar.h"
#include "im/actor/model/entity/ContentType.h"
#include "im/actor/model/entity/Message.h"
#include "im/actor/model/entity/Sex.h"
#include "im/actor/model/entity/User.h"
#include "im/actor/model/entity/content/AbsContent.h"
#include "im/actor/model/entity/content/ServiceContent.h"
#include "im/actor/model/entity/content/ServiceGroupAvatarChanged.h"
#include "im/actor/model/entity/content/ServiceGroupCreated.h"
#include "im/actor/model/entity/content/ServiceGroupTitleChanged.h"
#include "im/actor/model/entity/content/ServiceGroupUserAdded.h"
#include "im/actor/model/entity/content/ServiceGroupUserKicked.h"
#include "im/actor/model/entity/content/ServiceGroupUserLeave.h"
#include "im/actor/model/entity/content/ServiceUserRegistered.h"
#include "im/actor/model/entity/content/TextContent.h"
#include "im/actor/model/i18n/I18nEngine.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/modules/Auth.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/Users.h"
#include "im/actor/model/viewmodel/UserPresence.h"
#include "java/lang/Character.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"

@interface AMI18nEngine () {
 @public
  ImActorModelModulesModules *modules_;
  JavaUtilHashMap *locale_;
  jboolean is24Hours_;
  IOSObjectArray *MONTHS_SHORT_;
  IOSObjectArray *MONTHS_;
}

- (NSString *)formatTwoDigitWithInt:(jint)v;

+ (jboolean)areSameDaysWithLong:(jlong)a
                       withLong:(jlong)b;

- (NSString *)getTemplateNamedWithInt:(jint)senderId
                         withNSString:(NSString *)baseString;

- (NSString *)getTemplateWithInt:(jint)senderId
                    withNSString:(NSString *)baseString;

- (AMUser *)getUserWithInt:(jint)uid;

@end

J2OBJC_FIELD_SETTER(AMI18nEngine, modules_, ImActorModelModulesModules *)
J2OBJC_FIELD_SETTER(AMI18nEngine, locale_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(AMI18nEngine, MONTHS_SHORT_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(AMI18nEngine, MONTHS_, IOSObjectArray *)

__attribute__((unused)) static NSString *AMI18nEngine_formatTwoDigitWithInt_(AMI18nEngine *self, jint v);

__attribute__((unused)) static jboolean AMI18nEngine_areSameDaysWithLong_withLong_(jlong a, jlong b);

__attribute__((unused)) static NSString *AMI18nEngine_getTemplateNamedWithInt_withNSString_(AMI18nEngine *self, jint senderId, NSString *baseString);

__attribute__((unused)) static NSString *AMI18nEngine_getTemplateWithInt_withNSString_(AMI18nEngine *self, jint senderId, NSString *baseString);

__attribute__((unused)) static AMUser *AMI18nEngine_getUserWithInt_(AMI18nEngine *self, jint uid);

@interface AMI18nEngine_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithLong:(jlong)lhs
               withLong:(jlong)rhs;

- (jint)compareWithId:(AMMessage *)lhs
               withId:(AMMessage *)rhs;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AMI18nEngine_$1)

__attribute__((unused)) static void AMI18nEngine_$1_init(AMI18nEngine_$1 *self);

__attribute__((unused)) static AMI18nEngine_$1 *new_AMI18nEngine_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AMI18nEngine_$1)


#line 31
@implementation AMI18nEngine


#line 38
- (instancetype)initWithAMLocaleProvider:(id<AMLocaleProvider>)provider
          withImActorModelModulesModules:(ImActorModelModulesModules *)modules {
  AMI18nEngine_initWithAMLocaleProvider_withImActorModelModulesModules_(self, provider, modules);
  return self;
}


#line 73
- (NSString *)formatTwoDigitWithInt:(jint)v {
  return AMI18nEngine_formatTwoDigitWithInt_(self, v);
}


#line 86
+ (jboolean)areSameDaysWithLong:(jlong)a
                       withLong:(jlong)b {
  return AMI18nEngine_areSameDaysWithLong_withLong_(a, b);
}


#line 99
- (NSString *)formatShortDateWithLong:(jlong)date {
  
#line 101
  jlong delta = [new_JavaUtilDate_init() getTime] - date;
  if (delta < 60 * 1000) {
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TimeShortNow"];
  }
  else
#line 104
  if (delta < 60 * 60 * 1000) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TimeShortMinutes"])) replace:@"{minutes}" withSequence:JreStrcat("J", delta / 60000)];
  }
  else
#line 106
  if (delta < 24 * 60 * 60 * 1000) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TimeShortHours"])) replace:@"{hours}" withSequence:JreStrcat("J", delta / 3600000)];
  }
  else
#line 108
  if (delta < 2 * 24 * 60 * 60 * 1000) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TimeShortYesterday"])) replace:@"{hours}" withSequence:JreStrcat("J", delta / 3600000)];
  }
  else {
    JavaUtilDate *date1 = new_JavaUtilDate_initWithLong_(date);
    jint month = [date1 getMonth];
    jint d = [date1 getDate];
    return JreStrcat("IC$", d, ' ', [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(MONTHS_SHORT_), month))) uppercaseString]);
  }
}


#line 119
- (NSString *)formatTyping {
  return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"Typing"];
}

- (NSString *)formatTypingWithNSString:(NSString *)name {
  return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TypingUser"])) replace:@"{user}" withSequence:name];
}

- (NSString *)formatTypingWithInt:(jint)count {
  return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"TypingMultiple"])) replace:@"{count}" withSequence:NSString_valueOfInt_(count)];
}

- (NSString *)formatFileSizeWithInt:(jint)bytes {
  if (bytes < 0) {
    bytes = 0;
  }
  
#line 136
  if (bytes < 1024) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"FileB"])) replace:@"{bytes}" withSequence:JreStrcat("I", bytes)];
  }
  else
#line 138
  if (bytes < 1024 * 1024) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"FileKb"])) replace:@"{kbytes}" withSequence:JreStrcat("I", (bytes / 1024))];
  }
  else
#line 140
  if (bytes < 1024 * 1024 * 1024) {
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"FileMb"])) replace:@"{mbytes}" withSequence:JreStrcat("I", (bytes / (1024 * 1024)))];
  }
  else {
    
#line 143
    return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"FileGb"])) replace:@"{gbytes}" withSequence:JreStrcat("I", (bytes / (1024 * 1024 * 1024)))];
  }
}


#line 147
- (NSString *)formatTimeWithLong:(jlong)date {
  JavaUtilDate *dateVal = new_JavaUtilDate_initWithLong_(date);
  if (is24Hours_) {
    return JreStrcat("IC$", [dateVal getHours], ':', AMI18nEngine_formatTwoDigitWithInt_(self, [dateVal getMinutes]));
  }
  else {
    
#line 152
    jint hours = [dateVal getHours];
    if (hours > 12) {
      return JreStrcat("IC$$", (hours - 12), ':', AMI18nEngine_formatTwoDigitWithInt_(self, [dateVal getMinutes]), @" PM");
    }
    else {
      
#line 156
      return JreStrcat("IC$$", hours, ':', AMI18nEngine_formatTwoDigitWithInt_(self, [dateVal getMinutes]), @" AM");
    }
  }
}


#line 161
- (NSString *)formatDateWithLong:(jlong)date {
  JavaUtilDate *dateVal = new_JavaUtilDate_initWithLong_(date);
  return JreStrcat("ICIC$", [dateVal getDate], '/', ([dateVal getMonth] + 1), '/', AMI18nEngine_formatTwoDigitWithInt_(self, [dateVal getYear]));
}

- (NSString *)formatPresenceWithAMUserPresence:(AMUserPresence *)value
                                 withAMSexEnum:(AMSexEnum *)sex {
  if (value == nil) {
    return nil;
  }
  
#line 171
  if ([((AMUserPresence *) nil_chk(value)) getState] == AMUserPresence_StateEnum_get_OFFLINE()) {
    jlong currentTime = DKEnvironment_getCurrentSyncedTime() / 1000LL;
    jint delta = (jint) (currentTime - [value getLastSeen]);
    
#line 175
    if (delta < 60) {
      if ([((JavaUtilHashMap *) nil_chk(locale_)) containsKeyWithId:@"OnlineNowMale"] && [locale_ containsKeyWithId:@"OnlineNowFemale"]) {
        return sex == AMSexEnum_get_UNKNOWN() ?
#line 178
        [locale_ getWithId:@"OnlineNow"] :
#line 179
        sex == AMSexEnum_get_MALE() ?
#line 180
        [locale_ getWithId:@"OnlineNowMale"] :
#line 181
        [locale_ getWithId:@"OnlineNowFemale"];
      }
      else {
        
#line 183
        return [locale_ getWithId:@"OnlineNow"];
      }
    }
    else
#line 185
    if (delta < 24 * 60 * 60) {
      NSString *time = [self formatTimeWithLong:[value getLastSeen] * 1000LL];
      
#line 188
      if (AMI18nEngine_areSameDaysWithLong_withLong_([value getLastSeen] * 1000LL, [new_JavaUtilDate_init() getTime])) {
        if ([((JavaUtilHashMap *) nil_chk(locale_)) containsKeyWithId:@"OnlineLastSeenTodayMale"] && [locale_ containsKeyWithId:@"OnlineLastSeenTodayMale"]) {
          return [(sex == AMSexEnum_get_UNKNOWN() ?
#line 191
          [locale_ getWithId:@"OnlineLastSeenToday"] :
#line 192
          sex == AMSexEnum_get_MALE() ?
#line 193
          [locale_ getWithId:@"OnlineLastSeenTodayMale"] :
#line 194
          [locale_ getWithId:@"OnlineLastSeenTodayFemale"]) replace:@"{time}" withSequence:time];
        }
        else {
          
#line 196
          return [((NSString *) nil_chk([locale_ getWithId:@"OnlineLastSeenToday"])) replace:@"{time}" withSequence:time];
        }
      }
      else {
        
#line 199
        if ([((JavaUtilHashMap *) nil_chk(locale_)) containsKeyWithId:@"OnlineLastSeenYesterdayMale"] && [locale_ containsKeyWithId:@"OnlineLastSeenYesterdayMale"]) {
          return [(sex == AMSexEnum_get_UNKNOWN() ?
#line 201
          [locale_ getWithId:@"OnlineLastSeenYesterday"] :
#line 202
          sex == AMSexEnum_get_MALE() ?
#line 203
          [locale_ getWithId:@"OnlineLastSeenYesterdayMale"] :
#line 204
          [locale_ getWithId:@"OnlineLastSeenYesterdayFemale"]) replace:@"{time}" withSequence:time];
        }
        else {
          
#line 206
          return [((NSString *) nil_chk([locale_ getWithId:@"OnlineLastSeenYesterday"])) replace:@"{time}" withSequence:time];
        }
      }
    }
    else
#line 209
    if (delta < 14 * 24 * 60 * 60) {
      NSString *time = [self formatTimeWithLong:[value getLastSeen] * 1000LL];
      NSString *date = [self formatDateWithLong:[value getLastSeen] * 1000LL];
      
#line 213
      if ([((JavaUtilHashMap *) nil_chk(locale_)) containsKeyWithId:@"OnlineLastSeenDateTimeMale"] && [locale_ containsKeyWithId:@"OnlineLastSeenDateTimeMale"]) {
        return [((NSString *) nil_chk([(sex == AMSexEnum_get_UNKNOWN() ?
#line 215
        [locale_ getWithId:@"OnlineLastSeenDateTime"] :
#line 216
        sex == AMSexEnum_get_MALE() ?
#line 217
        [locale_ getWithId:@"OnlineLastSeenDateTimeMale"] :
#line 218
        [locale_ getWithId:@"OnlineLastSeenDateTimeFemale"]) replace:
#line 219
        @"{time}" withSequence:time])) replace:
#line 220
        @"{date}" withSequence:date];
      }
      else {
        
#line 222
        return [((NSString *) nil_chk([((NSString *) nil_chk([locale_ getWithId:@"OnlineLastSeenDateTime"])) replace:
#line 223
        @"{time}" withSequence:time])) replace:
#line 224
        @"{date}" withSequence:date];
      }
    }
    else
#line 226
    if (delta < 6 * 30 * 24 * 60 * 60) {
      NSString *date = [self formatDateWithLong:[value getLastSeen] * 1000LL];
      
#line 229
      if ([((JavaUtilHashMap *) nil_chk(locale_)) containsKeyWithId:@"OnlineLastSeenDateMale"] && [locale_ containsKeyWithId:@"OnlineLastSeenDateMale"]) {
        return [(sex == AMSexEnum_get_UNKNOWN() ?
#line 231
        [locale_ getWithId:@"OnlineLastSeenDate"] :
#line 232
        sex == AMSexEnum_get_MALE() ?
#line 233
        [locale_ getWithId:@"OnlineLastSeenDateMale"] :
#line 234
        [locale_ getWithId:@"OnlineLastSeenDateFemale"]) replace:
#line 235
        @"{date}" withSequence:date];
      }
      else {
        
#line 237
        return [((NSString *) nil_chk([locale_ getWithId:@"OnlineLastSeenDate"])) replace:
#line 238
        @"{date}" withSequence:date];
      }
    }
    else {
      
#line 241
      return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"OnlineOff"];
    }
  }
  else
#line 243
  if ([value getState] == AMUserPresence_StateEnum_get_ONLINE()) {
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"OnlineOn"];
  }
  
#line 247
  return nil;
}


#line 250
- (NSString *)formatDurationWithInt:(jint)duration {
  if (duration < 60) {
    return JreStrcat("$C$", AMI18nEngine_formatTwoDigitWithInt_(self, 0), ':', AMI18nEngine_formatTwoDigitWithInt_(self, duration));
  }
  else
#line 253
  if (duration < 60 * 60) {
    return JreStrcat("$C$", AMI18nEngine_formatTwoDigitWithInt_(self, duration / 60), ':', AMI18nEngine_formatTwoDigitWithInt_(self, duration % 60));
  }
  else {
    
#line 256
    return JreStrcat("$C$C$", AMI18nEngine_formatTwoDigitWithInt_(self, duration / 3600), ':', AMI18nEngine_formatTwoDigitWithInt_(self, duration / 60), ':', AMI18nEngine_formatTwoDigitWithInt_(self, duration % 60));
  }
}


#line 260
- (NSString *)formatGroupMembersWithInt:(jint)count {
  return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"GroupMembers"])) replace:@"{count}" withSequence:JreStrcat("I", count)];
}

- (NSString *)formatGroupOnlineWithInt:(jint)count {
  return [((NSString *) nil_chk([((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"GroupOnline"])) replace:@"{count}" withSequence:JreStrcat("I", count)];
}

- (NSString *)formatContentDialogTextWithInt:(jint)senderId
                       withAMContentTypeEnum:(AMContentTypeEnum *)contentType
                                withNSString:(NSString *)text
                                     withInt:(jint)relatedUid {
  switch ([contentType ordinal]) {
    case AMContentType_TEXT:
    return text;
    case AMContentType_DOCUMENT:
    if (text == nil || ((jint) [text length]) == 0) {
      return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"ContentDocument"];
    }
    return text;
    case AMContentType_DOCUMENT_PHOTO:
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"ContentPhoto"];
    case AMContentType_DOCUMENT_VIDEO:
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"ContentVideo"];
    case AMContentType_SERVICE:
    return text;
    case AMContentType_SERVICE_REGISTERED:
    return AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceRegistered");
    case AMContentType_SERVICE_CREATED:
    return AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupCreated");
    case AMContentType_SERVICE_ADD:
    return [((NSString *) nil_chk(AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAdded"))) replace:
#line 289
    @"{name_added}" withSequence:[self getSubjectNameWithInt:relatedUid]];
    case AMContentType_SERVICE_LEAVE:
    return AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupLeaved");
    case AMContentType_SERVICE_KICK:
    return [((NSString *) nil_chk(AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupKicked"))) replace:
#line 294
    @"{name_kicked}" withSequence:[self getSubjectNameWithInt:relatedUid]];
    case AMContentType_SERVICE_AVATAR:
    return AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAvatarChanged");
    case AMContentType_SERVICE_AVATAR_REMOVED:
    return AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAvatarRemoved");
    case AMContentType_SERVICE_TITLE:
    return AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupTitle");
    case AMContentType_EMPTY:
    return @"";
    default:
    case AMContentType_UNKNOWN_CONTENT:
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"ContentUnsupported"];
  }
}


#line 309
- (jboolean)isLargeDialogMessageWithAMContentTypeEnum:(AMContentTypeEnum *)contentType {
  switch ([contentType ordinal]) {
    case AMContentType_SERVICE:
    case AMContentType_SERVICE_AVATAR:
    case AMContentType_SERVICE_AVATAR_REMOVED:
    case AMContentType_SERVICE_CREATED:
    case AMContentType_SERVICE_TITLE:
    case AMContentType_SERVICE_LEAVE:
    case AMContentType_SERVICE_REGISTERED:
    case AMContentType_SERVICE_KICK:
    case AMContentType_SERVICE_ADD:
    return YES;
    default:
    return NO;
  }
}

- (NSString *)formatFullServiceMessageWithInt:(jint)senderId
                         withAMServiceContent:(AMServiceContent *)content {
  if ([content isKindOfClass:[AMServiceUserRegistered class]]) {
    return AMI18nEngine_getTemplateWithInt_withNSString_(self, senderId, @"ServiceRegisteredFull");
  }
  else
#line 329
  if ([content isKindOfClass:[AMServiceGroupCreated class]]) {
    return [((NSString *) nil_chk(AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupCreatedFull"))) replace:
#line 331
    @"{title}" withSequence:
#line 332
    [((AMServiceGroupCreated *) nil_chk(((AMServiceGroupCreated *) check_class_cast(content, [AMServiceGroupCreated class])))) getGroupTitle]];
  }
  else
#line 333
  if ([content isKindOfClass:[AMServiceGroupUserAdded class]]) {
    return [((NSString *) nil_chk(AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAdded"))) replace:
#line 335
    @"{name_added}" withSequence:
#line 336
    [self getSubjectNameWithInt:[((AMServiceGroupUserAdded *) nil_chk(((AMServiceGroupUserAdded *) check_class_cast(content, [AMServiceGroupUserAdded class])))) getAddedUid]]];
  }
  else
#line 337
  if ([content isKindOfClass:[AMServiceGroupUserKicked class]]) {
    return [((NSString *) nil_chk(AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupKicked"))) replace:
#line 339
    @"{name_kicked}" withSequence:
#line 340
    [self getSubjectNameWithInt:[((AMServiceGroupUserKicked *) nil_chk(((AMServiceGroupUserKicked *) check_class_cast(content, [AMServiceGroupUserKicked class])))) getKickedUid]]];
  }
  else
#line 341
  if ([content isKindOfClass:[AMServiceGroupUserLeave class]]) {
    return AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupLeaved");
  }
  else
#line 343
  if ([content isKindOfClass:[AMServiceGroupTitleChanged class]]) {
    return [((NSString *) nil_chk(AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupTitleFull"))) replace:
#line 345
    @"{title}" withSequence:
#line 346
    [((AMServiceGroupTitleChanged *) nil_chk(((AMServiceGroupTitleChanged *) check_class_cast(content, [AMServiceGroupTitleChanged class])))) getNewTitle]];
  }
  else
#line 347
  if ([content isKindOfClass:[AMServiceGroupAvatarChanged class]]) {
    if ([((AMServiceGroupAvatarChanged *) nil_chk(((AMServiceGroupAvatarChanged *) check_class_cast(content, [AMServiceGroupAvatarChanged class])))) getNewAvatar] != nil) {
      return AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAvatarChanged");
    }
    else {
      
#line 351
      return AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, @"ServiceGroupAvatarRemoved");
    }
  }
  
#line 355
  AMLog_wWithNSString_withNSString_(@"i18NEngine", JreStrcat("$@", @"Unknown service content: ", content));
  
#line 357
  return [((AMServiceContent *) nil_chk(content)) getCompatText];
}


#line 360
- (NSString *)formatPerformerNameWithInt:(jint)uid {
  if (uid == [((ImActorModelModulesAuth *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getAuthModule])) myUid]) {
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"You"];
  }
  else {
    
#line 364
    return [((AMUser *) nil_chk(AMI18nEngine_getUserWithInt_(self, uid))) getName];
  }
}


#line 368
- (NSString *)getSubjectNameWithInt:(jint)uid {
  if (uid == [((ImActorModelModulesAuth *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getAuthModule])) myUid]) {
    return [((JavaUtilHashMap *) nil_chk(locale_)) getWithId:@"Thee"];
  }
  else {
    
#line 372
    return [((AMUser *) nil_chk(AMI18nEngine_getUserWithInt_(self, uid))) getName];
  }
}


#line 376
- (NSString *)formatMessagesWithAMMessageArray:(IOSObjectArray *)messages {
  NSString *text = @"";
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(messages, new_AMI18nEngine_$1_init());
  
#line 390
  if (((IOSObjectArray *) nil_chk(messages))->size_ == 1) {
    {
      IOSObjectArray *a__ =
#line 391
      messages;
      AMMessage * const *b__ = a__->buffer_;
      AMMessage * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        AMMessage *model = *b__++;
        
#line 392
        if (!([[((AMMessage *) nil_chk(model)) getContent] isKindOfClass:[AMTextContent class]])) {
          continue;
        }
        text = JreStrcat("$$", text, [((AMTextContent *) nil_chk(((AMTextContent *) check_class_cast([model getContent], [AMTextContent class])))) getText]);
      }
    }
  }
  else {
    {
      IOSObjectArray *a__ =
#line 398
      messages;
      AMMessage * const *b__ = a__->buffer_;
      AMMessage * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        AMMessage *model = *b__++;
        
#line 399
        if (!([[((AMMessage *) nil_chk(model)) getContent] isKindOfClass:[AMTextContent class]])) {
          continue;
        }
        if (((jint) [text length]) > 0) {
          text = JreStrcat("$C", text, 0x000a);
        }
        text = JreStrcat("$$", text, JreStrcat("$$", [((AMUser *) nil_chk([((id<DKKeyValueEngine>) nil_chk([((ImActorModelModulesUsers *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules_)) getUsersModule])) getUsers])) getValueWithLong:[model getSenderId]])) getName], @": "));
        text = JreStrcat("$$", text, [((AMTextContent *) nil_chk(((AMTextContent *) check_class_cast([model getContent], [AMTextContent class])))) getText]);
      }
    }
  }
  
#line 409
  return text;
}


#line 412
- (NSString *)formatFastNameWithNSString:(NSString *)name {
  if (((jint) [((NSString *) nil_chk(name)) length]) > 1) {
    if (JavaLangCharacter_isLetterWithChar_([name charAtWithInt:0])) {
      return [((NSString *) nil_chk([name substring:0 endIndex:1])) uppercaseString];
    }
    else {
      
#line 417
      return @"#";
    }
  }
  else {
    
#line 420
    return @"#";
  }
}


#line 424
- (NSString *)getTemplateNamedWithInt:(jint)senderId
                         withNSString:(NSString *)baseString {
  return AMI18nEngine_getTemplateNamedWithInt_withNSString_(self, senderId, baseString);
}

- (NSString *)getTemplateWithInt:(jint)senderId
                    withNSString:(NSString *)baseString {
  return AMI18nEngine_getTemplateWithInt_withNSString_(self, senderId, baseString);
}


#line 446
- (AMUser *)getUserWithInt:(jint)uid {
  return AMI18nEngine_getUserWithInt_(self, uid);
}

@end


#line 38
void AMI18nEngine_initWithAMLocaleProvider_withImActorModelModulesModules_(AMI18nEngine *self, id<AMLocaleProvider> provider, ImActorModelModulesModules *modules) {
  (void) NSObject_init(self);
  
#line 39
  self->modules_ = modules;
  self->locale_ = [((id<AMLocaleProvider>) nil_chk(provider)) loadLocale];
  self->is24Hours_ = [provider is24Hours];
  self->MONTHS_SHORT_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 43
    [((JavaUtilHashMap *) nil_chk(self->locale_)) getWithId:@"JanShort"],
#line 44
    [self->locale_ getWithId:@"FebShort"],
#line 45
    [self->locale_ getWithId:@"MarShort"],
#line 46
    [self->locale_ getWithId:@"AprShort"],
#line 47
    [self->locale_ getWithId:@"MayShort"],
#line 48
    [self->locale_ getWithId:@"JunShort"],
#line 49
    [self->locale_ getWithId:@"JulShort"],
#line 50
    [self->locale_ getWithId:@"AugShort"],
#line 51
    [self->locale_ getWithId:@"SepShort"],
#line 52
    [self->locale_ getWithId:@"OctShort"],
#line 53
    [self->locale_ getWithId:@"NovShort"],
#line 54
    [self->locale_ getWithId:@"DecShort"] } count:12 type:NSString_class_()];
    
#line 57
    self->MONTHS_ = [IOSObjectArray newArrayWithObjects:(id[]){
#line 58
      [self->locale_ getWithId:@"JanFull"],
#line 59
      [self->locale_ getWithId:@"FebFull"],
#line 60
      [self->locale_ getWithId:@"MarFull"],
#line 61
      [self->locale_ getWithId:@"AprFull"],
#line 62
      [self->locale_ getWithId:@"MayFull"],
#line 63
      [self->locale_ getWithId:@"JunFull"],
#line 64
      [self->locale_ getWithId:@"JulFull"],
#line 65
      [self->locale_ getWithId:@"AugFull"],
#line 66
      [self->locale_ getWithId:@"SepFull"],
#line 67
      [self->locale_ getWithId:@"OctFull"],
#line 68
      [self->locale_ getWithId:@"NovFull"],
#line 69
      [self->locale_ getWithId:@"DecFull"] } count:12 type:NSString_class_()];
    }


#line 38
AMI18nEngine *new_AMI18nEngine_initWithAMLocaleProvider_withImActorModelModulesModules_(id<AMLocaleProvider> provider, ImActorModelModulesModules *modules) {
  AMI18nEngine *self = [AMI18nEngine alloc];
  AMI18nEngine_initWithAMLocaleProvider_withImActorModelModulesModules_(self, provider, modules);
  return self;
}


#line 73
NSString *AMI18nEngine_formatTwoDigitWithInt_(AMI18nEngine *self, jint v) {
  if (v < 0) {
    return @"00";
  }
  else
#line 76
  if (v < 10) {
    return JreStrcat("CI", '0', v);
  }
  else
#line 78
  if (v < 100) {
    return JreStrcat("I", v);
  }
  else {
    
#line 81
    NSString *res = JreStrcat("I", v);
    return [res substring:((jint) [res length]) - 2];
  }
}


#line 86
jboolean AMI18nEngine_areSameDaysWithLong_withLong_(jlong a, jlong b) {
  AMI18nEngine_initialize();
  
#line 87
  JavaUtilDate *date1 = new_JavaUtilDate_initWithLong_(a);
  jint y1 = [date1 getYear];
  jint m1 = [date1 getMonth];
  jint d1 = [date1 getDate];
  JavaUtilDate *date2 = new_JavaUtilDate_initWithLong_(b);
  jint y2 = [date2 getYear];
  jint m2 = [date2 getMonth];
  jint d2 = [date2 getDate];
  
#line 96
  return y1 == y2 && m1 == m2 && d1 == d2;
}


#line 424
NSString *AMI18nEngine_getTemplateNamedWithInt_withNSString_(AMI18nEngine *self, jint senderId, NSString *baseString) {
  return [((NSString *) nil_chk(AMI18nEngine_getTemplateWithInt_withNSString_(self, senderId, baseString))) replace:@"{name}" withSequence:
#line 426
  [self formatPerformerNameWithInt:senderId]];
}


#line 429
NSString *AMI18nEngine_getTemplateWithInt_withNSString_(AMI18nEngine *self, jint senderId, NSString *baseString) {
  if (senderId == [((ImActorModelModulesAuth *) nil_chk([((ImActorModelModulesModules *) nil_chk(self->modules_)) getAuthModule])) myUid]) {
    if ([((JavaUtilHashMap *) nil_chk(self->locale_)) containsKeyWithId:JreStrcat("$$", baseString, @"You")]) {
      return [self->locale_ getWithId:JreStrcat("$$", baseString, @"You")];
    }
  }
  if ([((JavaUtilHashMap *) nil_chk(self->locale_)) containsKeyWithId:JreStrcat("$$", baseString, @"Male")] && [self->locale_ containsKeyWithId:JreStrcat("$$", baseString, @"Female")]) {
    AMUser *u = AMI18nEngine_getUserWithInt_(self, senderId);
    if ([((AMUser *) nil_chk(u)) getSex] == AMSexEnum_get_MALE()) {
      return [self->locale_ getWithId:JreStrcat("$$", baseString, @"Male")];
    }
    else
#line 439
    if ([u getSex] == AMSexEnum_get_FEMALE()) {
      return [self->locale_ getWithId:JreStrcat("$$", baseString, @"Female")];
    }
  }
  return [self->locale_ getWithId:baseString];
}


#line 446
AMUser *AMI18nEngine_getUserWithInt_(AMI18nEngine *self, jint uid) {
  return [((id<DKKeyValueEngine>) nil_chk([((ImActorModelModulesUsers *) nil_chk([((ImActorModelModulesModules *) nil_chk(self->modules_)) getUsersModule])) getUsers])) getValueWithLong:uid];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMI18nEngine)

@implementation AMI18nEngine_$1


#line 380
- (jint)compareWithLong:(jlong)lhs
               withLong:(jlong)rhs {
  return lhs < rhs ? -1 : (lhs == rhs ? 0 : 1);
}

- (jint)compareWithId:(AMMessage *)lhs
               withId:(AMMessage *)rhs {
  return [self compareWithLong:[((AMMessage *) nil_chk(lhs)) getEngineSort] withLong:[((AMMessage *) nil_chk(rhs)) getEngineSort]];
}

- (instancetype)init {
  AMI18nEngine_$1_init(self);
  return self;
}

@end

void AMI18nEngine_$1_init(AMI18nEngine_$1 *self) {
  (void) NSObject_init(self);
}

AMI18nEngine_$1 *new_AMI18nEngine_$1_init() {
  AMI18nEngine_$1 *self = [AMI18nEngine_$1 alloc];
  AMI18nEngine_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMI18nEngine_$1)
