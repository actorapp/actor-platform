//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/network/connection/ManagedConnection.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/network/connection/ManagedConnection.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/concurrency/TimerCompat.h"
#include "im/actor/model/crypto/CryptoUtils.h"
#include "im/actor/model/droidkit/bser/DataInput.h"
#include "im/actor/model/droidkit/bser/DataOutput.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/network/ConnectionCallback.h"
#include "im/actor/model/network/ConnectionEndpoint.h"
#include "im/actor/model/network/connection/AsyncConnection.h"
#include "im/actor/model/network/connection/AsyncConnectionFactory.h"
#include "im/actor/model/network/connection/AsyncConnectionInterface.h"
#include "im/actor/model/network/connection/ManagedConnection.h"
#include "im/actor/model/network/connection/ManagedConnectionCreateCallback.h"
#include "im/actor/model/util/CRC32.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Random.h"
#include "java/util/Set.h"

#define AMManagedConnection_HANDSHAKE_TIMEOUT 5000
#define AMManagedConnection_RESPONSE_TIMEOUT 5000
#define AMManagedConnection_PING_TIMEOUT 300000
#define AMManagedConnection_HEADER_PROTO 0
#define AMManagedConnection_HEADER_PING 1
#define AMManagedConnection_HEADER_PONG 2
#define AMManagedConnection_HEADER_DROP 3
#define AMManagedConnection_HEADER_REDIRECT 4
#define AMManagedConnection_HEADER_ACK 6
#define AMManagedConnection_HEADER_HANDSHAKE_REQUEST 255
#define AMManagedConnection_HEADER_HANDSHAKE_RESPONSE 254

@interface AMManagedConnection () {
 @public
  id<AMAsyncConnectionInterface> connectionInterface_;
  AMCRC32 *CRC32_ENGINE_;
  NSString *TAG_;
  AMAsyncConnection *rawConnection_;
  id<AMConnectionCallback> callback_;
  id<AMManagedConnectionCreateCallback> factoryCallback_;
  jint connectionId_;
  jint mtprotoVersion_;
  jint apiMajorVersion_;
  jint apiMinorVersion_;
  jint receivedPackages_;
  jint sentPackages_;
  jboolean isClosed__;
  jboolean isOpened_;
  jboolean isHandshakePerformed_;
  IOSByteArray *handshakeRandomData_;
  AMTimerCompat *connectionTimeout_;
  AMTimerCompat *handshakeTimeout_;
  AMTimerCompat *pingTask_;
  JavaUtilHashMap *schedulledPings_;
  JavaUtilHashMap *packageTimers_;
}

- (void)sendHandshakeRequest;

- (void)onHandshakePackageWithByteArray:(IOSByteArray *)data;

- (void)onProtoPackageWithByteArray:(IOSByteArray *)data;

- (void)sendProtoPackageWithByteArray:(IOSByteArray *)data
                              withInt:(jint)offset
                              withInt:(jint)len;

- (void)onPingPackageWithByteArray:(IOSByteArray *)data;

- (void)onPongPackageWithByteArray:(IOSByteArray *)data;

- (void)sendPingMessage;

- (void)refreshTimeouts;

- (void)onAckPackageWithByteArray:(IOSByteArray *)data;

- (void)sendAckPackageWithInt:(jint)receivedIndex;

- (void)onDropPackageWithByteArray:(IOSByteArray *)data;

- (void)onRawConnected;

- (void)onRawReceivedWithByteArray:(IOSByteArray *)data;

- (void)onRawClosed;

- (void)rawPostWithInt:(jint)header
         withByteArray:(IOSByteArray *)data;

- (void)rawPostWithInt:(jint)header
         withByteArray:(IOSByteArray *)data
               withInt:(jint)offset
               withInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(AMManagedConnection, connectionInterface_, id<AMAsyncConnectionInterface>)
J2OBJC_FIELD_SETTER(AMManagedConnection, CRC32_ENGINE_, AMCRC32 *)
J2OBJC_FIELD_SETTER(AMManagedConnection, TAG_, NSString *)
J2OBJC_FIELD_SETTER(AMManagedConnection, rawConnection_, AMAsyncConnection *)
J2OBJC_FIELD_SETTER(AMManagedConnection, callback_, id<AMConnectionCallback>)
J2OBJC_FIELD_SETTER(AMManagedConnection, factoryCallback_, id<AMManagedConnectionCreateCallback>)
J2OBJC_FIELD_SETTER(AMManagedConnection, handshakeRandomData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(AMManagedConnection, connectionTimeout_, AMTimerCompat *)
J2OBJC_FIELD_SETTER(AMManagedConnection, handshakeTimeout_, AMTimerCompat *)
J2OBJC_FIELD_SETTER(AMManagedConnection, pingTask_, AMTimerCompat *)
J2OBJC_FIELD_SETTER(AMManagedConnection, schedulledPings_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(AMManagedConnection, packageTimers_, JavaUtilHashMap *)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, HANDSHAKE_TIMEOUT, jint)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, RESPONSE_TIMEOUT, jint)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, PING_TIMEOUT, jint)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, HEADER_PROTO, jint)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, HEADER_PING, jint)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, HEADER_PONG, jint)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, HEADER_DROP, jint)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, HEADER_REDIRECT, jint)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, HEADER_ACK, jint)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, HEADER_HANDSHAKE_REQUEST, jint)

J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, HEADER_HANDSHAKE_RESPONSE, jint)

static JavaUtilRandom *AMManagedConnection_RANDOM_;
J2OBJC_STATIC_FIELD_GETTER(AMManagedConnection, RANDOM_, JavaUtilRandom *)

__attribute__((unused)) static void AMManagedConnection_sendHandshakeRequest(AMManagedConnection *self);

__attribute__((unused)) static void AMManagedConnection_onHandshakePackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void AMManagedConnection_onProtoPackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void AMManagedConnection_sendProtoPackageWithByteArray_withInt_withInt_(AMManagedConnection *self, IOSByteArray *data, jint offset, jint len);

__attribute__((unused)) static void AMManagedConnection_onPingPackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void AMManagedConnection_onPongPackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void AMManagedConnection_sendPingMessage(AMManagedConnection *self);

__attribute__((unused)) static void AMManagedConnection_refreshTimeouts(AMManagedConnection *self);

__attribute__((unused)) static void AMManagedConnection_onAckPackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void AMManagedConnection_sendAckPackageWithInt_(AMManagedConnection *self, jint receivedIndex);

__attribute__((unused)) static void AMManagedConnection_onDropPackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void AMManagedConnection_onRawConnected(AMManagedConnection *self);

__attribute__((unused)) static void AMManagedConnection_onRawReceivedWithByteArray_(AMManagedConnection *self, IOSByteArray *data);

__attribute__((unused)) static void AMManagedConnection_onRawClosed(AMManagedConnection *self);

__attribute__((unused)) static void AMManagedConnection_rawPostWithInt_withByteArray_(AMManagedConnection *self, jint header, IOSByteArray *data);

__attribute__((unused)) static void AMManagedConnection_rawPostWithInt_withByteArray_withInt_withInt_(AMManagedConnection *self, jint header, IOSByteArray *data, jint offset, jint len);

@interface AMManagedConnection_ConnectionInterface : NSObject < AMAsyncConnectionInterface > {
 @public
  AMManagedConnection *this$0_;
}

- (void)onConnected;

- (void)onReceivedWithByteArray:(IOSByteArray *)data;

- (void)onClosed;

- (instancetype)initWithAMManagedConnection:(AMManagedConnection *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(AMManagedConnection_ConnectionInterface)

J2OBJC_FIELD_SETTER(AMManagedConnection_ConnectionInterface, this$0_, AMManagedConnection *)

__attribute__((unused)) static void AMManagedConnection_ConnectionInterface_initWithAMManagedConnection_(AMManagedConnection_ConnectionInterface *self, AMManagedConnection *outer$);

__attribute__((unused)) static AMManagedConnection_ConnectionInterface *new_AMManagedConnection_ConnectionInterface_initWithAMManagedConnection_(AMManagedConnection *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AMManagedConnection_ConnectionInterface)

@interface AMManagedConnection_PingRunnable : NSObject < JavaLangRunnable > {
 @public
  AMManagedConnection *this$0_;
}

- (void)run;

- (instancetype)initWithAMManagedConnection:(AMManagedConnection *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(AMManagedConnection_PingRunnable)

J2OBJC_FIELD_SETTER(AMManagedConnection_PingRunnable, this$0_, AMManagedConnection *)

__attribute__((unused)) static void AMManagedConnection_PingRunnable_initWithAMManagedConnection_(AMManagedConnection_PingRunnable *self, AMManagedConnection *outer$);

__attribute__((unused)) static AMManagedConnection_PingRunnable *new_AMManagedConnection_PingRunnable_initWithAMManagedConnection_(AMManagedConnection *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AMManagedConnection_PingRunnable)

@interface AMManagedConnection_TimeoutRunnable : NSObject < JavaLangRunnable > {
 @public
  AMManagedConnection *this$0_;
}

- (void)run;

- (instancetype)initWithAMManagedConnection:(AMManagedConnection *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(AMManagedConnection_TimeoutRunnable)

J2OBJC_FIELD_SETTER(AMManagedConnection_TimeoutRunnable, this$0_, AMManagedConnection *)

__attribute__((unused)) static void AMManagedConnection_TimeoutRunnable_initWithAMManagedConnection_(AMManagedConnection_TimeoutRunnable *self, AMManagedConnection *outer$);

__attribute__((unused)) static AMManagedConnection_TimeoutRunnable *new_AMManagedConnection_TimeoutRunnable_initWithAMManagedConnection_(AMManagedConnection *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AMManagedConnection_TimeoutRunnable)

J2OBJC_INITIALIZED_DEFN(AMManagedConnection)


#line 22
@implementation AMManagedConnection


#line 65
- (instancetype)initWithInt:(jint)connectionId
                    withInt:(jint)mtprotoVersion
                    withInt:(jint)apiMajorVersion
                    withInt:(jint)apiMinorVersion
   withAMConnectionEndpoint:(AMConnectionEndpoint *)endpoint
   withAMConnectionCallback:(id<AMConnectionCallback>)callback
withAMManagedConnectionCreateCallback:(id<AMManagedConnectionCreateCallback>)factoryCallback
withAMAsyncConnectionFactory:(id<AMAsyncConnectionFactory>)connectionFactory {
  AMManagedConnection_initWithInt_withInt_withInt_withInt_withAMConnectionEndpoint_withAMConnectionCallback_withAMManagedConnectionCreateCallback_withAMAsyncConnectionFactory_(self, connectionId, mtprotoVersion, apiMajorVersion, apiMinorVersion, endpoint, callback, factoryCallback, connectionFactory);
  return self;
}


#line 93
- (void)sendHandshakeRequest {
  AMManagedConnection_sendHandshakeRequest(self);
}


#line 111
- (void)onHandshakePackageWithByteArray:(IOSByteArray *)data {
  AMManagedConnection_onHandshakePackageWithByteArray_(self, data);
}


#line 149
- (void)onProtoPackageWithByteArray:(IOSByteArray *)data {
  AMManagedConnection_onProtoPackageWithByteArray_(self, data);
}


#line 154
- (void)sendProtoPackageWithByteArray:(IOSByteArray *)data
                              withInt:(jint)offset
                              withInt:(jint)len {
  AMManagedConnection_sendProtoPackageWithByteArray_withInt_withInt_(self, data, offset, len);
}


#line 163
- (void)onPingPackageWithByteArray:(IOSByteArray *)data {
  AMManagedConnection_onPingPackageWithByteArray_(self, data);
}


#line 169
- (void)onPongPackageWithByteArray:(IOSByteArray *)data {
  AMManagedConnection_onPongPackageWithByteArray_(self, data);
}


#line 189
- (void)sendPingMessage {
  AMManagedConnection_sendPingMessage(self);
}


#line 209
- (void)refreshTimeouts {
  AMManagedConnection_refreshTimeouts(self);
}


#line 225
- (void)onAckPackageWithByteArray:(IOSByteArray *)data {
  AMManagedConnection_onAckPackageWithByteArray_(self, data);
}


#line 237
- (void)sendAckPackageWithInt:(jint)receivedIndex {
  AMManagedConnection_sendAckPackageWithInt_(self, receivedIndex);
}


#line 249
- (void)onDropPackageWithByteArray:(IOSByteArray *)data {
  AMManagedConnection_onDropPackageWithByteArray_(self, data);
}


#line 261
- (void)onRawConnected {
  AMManagedConnection_onRawConnected(self);
}


#line 278
- (void)onRawReceivedWithByteArray:(IOSByteArray *)data {
  AMManagedConnection_onRawReceivedWithByteArray_(self, data);
}


#line 343
- (void)onRawClosed {
  AMManagedConnection_onRawClosed(self);
}


#line 350
- (void)rawPostWithInt:(jint)header
         withByteArray:(IOSByteArray *)data {
  AMManagedConnection_rawPostWithInt_withByteArray_(self, header, data);
}


#line 354
- (void)rawPostWithInt:(jint)header
         withByteArray:(IOSByteArray *)data
               withInt:(jint)offset
               withInt:(jint)len {
  AMManagedConnection_rawPostWithInt_withByteArray_withInt_withInt_(self, header, data, offset, len);
}


#line 378
- (void)post:(IOSByteArray *)data
  withOffset:(jint)offset
     withLen:(jint)len {
  @synchronized(self) {
    if (isClosed__) {
      return;
    }
    @try {
      AMManagedConnection_sendProtoPackageWithByteArray_withInt_withInt_(self, data, offset, len);
    }
    @catch (
#line 385
    JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      [self close];
    }
  }
}


#line 392
- (jboolean)isClosed {
  @synchronized(self) {
    
#line 393
    return isClosed__;
  }
}


#line 397
- (void)close {
  @synchronized(self) {
    if (isClosed__) {
      return;
    }
    isClosed__ = YES;
    
#line 404
    [((AMAsyncConnection *) nil_chk(rawConnection_)) doClose];
    
#line 406
    @synchronized(packageTimers_) {
      for (JavaLangInteger * __strong id_ in nil_chk([((JavaUtilHashMap *) nil_chk(packageTimers_)) keySet])) {
        [((AMTimerCompat *) nil_chk([packageTimers_ getWithId:id_])) cancel];
      }
      for (JavaLangLong * __strong ping in nil_chk([((JavaUtilHashMap *) nil_chk(schedulledPings_)) keySet])) {
        [((AMTimerCompat *) nil_chk([schedulledPings_ getWithId:ping])) cancel];
      }
      [schedulledPings_ clear];
      [packageTimers_ clear];
    }
    
#line 417
    [((AMTimerCompat *) nil_chk(pingTask_)) cancel];
    [((AMTimerCompat *) nil_chk(connectionTimeout_)) cancel];
    [((AMTimerCompat *) nil_chk(handshakeTimeout_)) cancel];
    
#line 421
    if (!isOpened_ || !isHandshakePerformed_) {
      [((id<AMManagedConnectionCreateCallback>) nil_chk(factoryCallback_)) onConnectionCreateErrorWithAMManagedConnection:self];
    }
    else {
      
#line 424
      [((id<AMConnectionCallback>) nil_chk(callback_)) onConnectionDie];
    }
  }
}

+ (void)initialize {
  if (self == [AMManagedConnection class]) {
    AMManagedConnection_RANDOM_ = new_JavaUtilRandom_init();
    J2OBJC_SET_INITIALIZED(AMManagedConnection)
  }
}

@end


#line 65
void AMManagedConnection_initWithInt_withInt_withInt_withInt_withAMConnectionEndpoint_withAMConnectionCallback_withAMManagedConnectionCreateCallback_withAMAsyncConnectionFactory_(AMManagedConnection *self, jint connectionId, jint mtprotoVersion, jint apiMajorVersion, jint apiMinorVersion, AMConnectionEndpoint *endpoint, id<AMConnectionCallback> callback, id<AMManagedConnectionCreateCallback> factoryCallback, id<AMAsyncConnectionFactory> connectionFactory) {
  (void) NSObject_init(self);
  self->connectionInterface_ = new_AMManagedConnection_ConnectionInterface_initWithAMManagedConnection_(self);
  self->CRC32_ENGINE_ = new_AMCRC32_init();
  self->receivedPackages_ =
#line 51
  0;
  self->sentPackages_ = 0;
  self->isClosed__ =
#line 54
  NO;
  self->isOpened_ = NO;
  self->isHandshakePerformed_ = NO;
  self->schedulledPings_ = new_JavaUtilHashMap_init();
  self->packageTimers_ = new_JavaUtilHashMap_init();
  
#line 73
  self->TAG_ = JreStrcat("$I", @"Connection#", connectionId);
  self->connectionId_ = connectionId;
  self->mtprotoVersion_ = mtprotoVersion;
  self->apiMajorVersion_ = apiMajorVersion;
  self->apiMinorVersion_ = apiMinorVersion;
  self->callback_ = callback;
  self->factoryCallback_ = factoryCallback;
  self->rawConnection_ = [((id<AMAsyncConnectionFactory>) nil_chk(connectionFactory)) createConnectionWithInt:connectionId withAMConnectionEndpoint:endpoint withAMAsyncConnectionInterface:self->connectionInterface_];
  
#line 83
  self->handshakeTimeout_ = new_AMTimerCompat_initWithJavaLangRunnable_(new_AMManagedConnection_TimeoutRunnable_initWithAMManagedConnection_(self));
  self->pingTask_ = new_AMTimerCompat_initWithJavaLangRunnable_(new_AMManagedConnection_PingRunnable_initWithAMManagedConnection_(self));
  self->connectionTimeout_ = new_AMTimerCompat_initWithJavaLangRunnable_(new_AMManagedConnection_TimeoutRunnable_initWithAMManagedConnection_(self));
  [self->connectionTimeout_ scheduleWithLong:AMManagedConnection_CONNECTION_TIMEOUT];
  
#line 88
  [((AMAsyncConnection *) nil_chk(self->rawConnection_)) doConnect];
}


#line 65
AMManagedConnection *new_AMManagedConnection_initWithInt_withInt_withInt_withInt_withAMConnectionEndpoint_withAMConnectionCallback_withAMManagedConnectionCreateCallback_withAMAsyncConnectionFactory_(jint connectionId, jint mtprotoVersion, jint apiMajorVersion, jint apiMinorVersion, AMConnectionEndpoint *endpoint, id<AMConnectionCallback> callback, id<AMManagedConnectionCreateCallback> factoryCallback, id<AMAsyncConnectionFactory> connectionFactory) {
  AMManagedConnection *self = [AMManagedConnection alloc];
  AMManagedConnection_initWithInt_withInt_withInt_withInt_withAMConnectionEndpoint_withAMConnectionCallback_withAMManagedConnectionCreateCallback_withAMAsyncConnectionFactory_(self, connectionId, mtprotoVersion, apiMajorVersion, apiMinorVersion, endpoint, callback, factoryCallback, connectionFactory);
  return self;
}


#line 93
void AMManagedConnection_sendHandshakeRequest(AMManagedConnection *self) {
  @synchronized(self) {
    
#line 96
    BSDataOutput *handshakeRequest = new_BSDataOutput_init();
    [handshakeRequest writeByteWithInt:self->mtprotoVersion_];
    [handshakeRequest writeByteWithInt:self->apiMajorVersion_];
    [handshakeRequest writeByteWithInt:self->apiMinorVersion_];
    self->handshakeRandomData_ = [IOSByteArray newArrayWithLength:32];
    @synchronized(AMManagedConnection_RANDOM_) {
      [((JavaUtilRandom *) nil_chk(AMManagedConnection_RANDOM_)) nextBytesWithByteArray:self->handshakeRandomData_];
    }
    [handshakeRequest writeIntWithInt:self->handshakeRandomData_->size_];
    [handshakeRequest writeBytesWithByteArray:self->handshakeRandomData_ withInt:0 withInt:self->handshakeRandomData_->size_];
    
#line 107
    [((AMTimerCompat *) nil_chk(self->handshakeTimeout_)) scheduleWithLong:AMManagedConnection_HANDSHAKE_TIMEOUT];
    AMManagedConnection_rawPostWithInt_withByteArray_(self, AMManagedConnection_HEADER_HANDSHAKE_REQUEST, [handshakeRequest toByteArray]);
  }
}


#line 111
void AMManagedConnection_onHandshakePackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    BSDataInput *handshakeResponse = new_BSDataInput_initWithByteArray_(data);
    jint protoVersion = [handshakeResponse readByte];
    jint apiMajor = [handshakeResponse readByte];
    jint apiMinor = [handshakeResponse readByte];
    IOSByteArray *sha256 = [handshakeResponse readBytesWithInt:32];
    IOSByteArray *localSha256 = AMCryptoUtils_SHA256WithByteArray_(self->handshakeRandomData_);
    
#line 120
    if (!JavaUtilArrays_equalsWithByteArray_withByteArray_(sha256, localSha256)) {
      AMLog_wWithNSString_withNSString_(self->TAG_, @"SHA 256 is incorrect");
      
#line 125
      @throw new_JavaIoIOException_initWithNSString_(@"SHA 256 is incorrect");
    }
    if (protoVersion != 1) {
      AMLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$IC", @"Incorrect Proto Version, expected: 1, got ", protoVersion, ';'));
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"Incorrect Proto Version, expected: 1, got ", protoVersion, ';'));
    }
    if (apiMajor != 1) {
      AMLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$IC", @"Incorrect Api Major Version, expected: 1, got ", apiMajor, ';'));
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"Incorrect Api Major Version, expected: 1, got ", apiMajor, ';'));
    }
    if (apiMinor != 0) {
      AMLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$IC", @"Incorrect Api Minor Version, expected: 0, got ", apiMinor, ';'));
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$IC", @"Incorrect Api Minor Version, expected: 0, got ", apiMinor, ';'));
    }
    
#line 141
    self->isHandshakePerformed_ = YES;
    [((id<AMManagedConnectionCreateCallback>) nil_chk(self->factoryCallback_)) onConnectionCreatedWithAMManagedConnection:self];
    [((AMTimerCompat *) nil_chk(self->handshakeTimeout_)) cancel];
    [((AMTimerCompat *) nil_chk(self->pingTask_)) scheduleWithLong:AMManagedConnection_PING_TIMEOUT];
  }
}


#line 149
void AMManagedConnection_onProtoPackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 150
    [((id<AMConnectionCallback>) nil_chk(self->callback_)) onMessage:data withOffset:0 withLen:((IOSByteArray *) nil_chk(data))->size_];
    AMManagedConnection_refreshTimeouts(self);
  }
}


#line 154
void AMManagedConnection_sendProtoPackageWithByteArray_withInt_withInt_(AMManagedConnection *self, IOSByteArray *data, jint offset, jint len) {
  @synchronized(self) {
    
#line 155
    if (self->isClosed__) {
      return;
    }
    AMManagedConnection_rawPostWithInt_withByteArray_withInt_withInt_(self, AMManagedConnection_HEADER_PROTO, data, offset, len);
  }
}


#line 163
void AMManagedConnection_onPingPackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    AMManagedConnection_rawPostWithInt_withByteArray_(self, AMManagedConnection_HEADER_PONG, data);
    AMManagedConnection_refreshTimeouts(self);
  }
}


#line 169
void AMManagedConnection_onPongPackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 170
    BSDataInput *dataInput = new_BSDataInput_initWithByteArray_(data);
    jint size = [dataInput readInt];
    if (size != 8) {
      AMLog_wWithNSString_withNSString_(self->TAG_, @"Received incorrect pong");
      @throw new_JavaIoIOException_initWithNSString_(@"Incorrect pong payload size");
    }
    jlong pingId = [dataInput readLong];
    
#line 180
    AMTimerCompat *timeoutTask = [((JavaUtilHashMap *) nil_chk(self->schedulledPings_)) removeWithId:JavaLangLong_valueOfWithLong_(pingId)];
    if (timeoutTask == nil) {
      return;
    }
    
#line 185
    [((AMTimerCompat *) nil_chk(timeoutTask)) cancel];
    AMManagedConnection_refreshTimeouts(self);
  }
}


#line 189
void AMManagedConnection_sendPingMessage(AMManagedConnection *self) {
  @synchronized(self) {
    
#line 190
    if (self->isClosed__) {
      return;
    }
    
#line 194
    jlong pingId = [((JavaUtilRandom *) nil_chk(AMManagedConnection_RANDOM_)) nextLong];
    BSDataOutput *dataOutput = new_BSDataOutput_init();
    [dataOutput writeIntWithInt:8];
    @synchronized(AMManagedConnection_RANDOM_) {
      [dataOutput writeLongWithLong:pingId];
    }
    
#line 201
    AMTimerCompat *pingTimeoutTask = new_AMTimerCompat_initWithJavaLangRunnable_(new_AMManagedConnection_TimeoutRunnable_initWithAMManagedConnection_(self));
    (void) [((JavaUtilHashMap *) nil_chk(self->schedulledPings_)) putWithId:JavaLangLong_valueOfWithLong_(pingId) withId:pingTimeoutTask];
    [pingTimeoutTask scheduleWithLong:AMManagedConnection_RESPONSE_TIMEOUT];
    
#line 206
    AMManagedConnection_rawPostWithInt_withByteArray_(self, AMManagedConnection_HEADER_PING, [dataOutput toByteArray]);
  }
}


#line 209
void AMManagedConnection_refreshTimeouts(AMManagedConnection *self) {
  
#line 213
  for (AMTimerCompat * __strong ping in nil_chk([((JavaUtilHashMap *) nil_chk(self->schedulledPings_)) values])) {
    [((AMTimerCompat *) nil_chk(ping)) scheduleWithLong:AMManagedConnection_RESPONSE_TIMEOUT];
  }
  for (AMTimerCompat * __strong ackTimeout in nil_chk([((JavaUtilHashMap *) nil_chk(self->packageTimers_)) values])) {
    [((AMTimerCompat *) nil_chk(ackTimeout)) scheduleWithLong:AMManagedConnection_RESPONSE_TIMEOUT];
  }
  
#line 220
  [((AMTimerCompat *) nil_chk(self->pingTask_)) scheduleWithLong:AMManagedConnection_PING_TIMEOUT];
}


#line 225
void AMManagedConnection_onAckPackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 226
    BSDataInput *ackContent = new_BSDataInput_initWithByteArray_(data);
    jint frameId = [ackContent readInt];
    
#line 229
    AMTimerCompat *timerCompat = [((JavaUtilHashMap *) nil_chk(self->packageTimers_)) removeWithId:JavaLangInteger_valueOfWithInt_(frameId)];
    if (timerCompat == nil) {
      return;
    }
    [((AMTimerCompat *) nil_chk(timerCompat)) cancel];
    AMManagedConnection_refreshTimeouts(self);
  }
}


#line 237
void AMManagedConnection_sendAckPackageWithInt_(AMManagedConnection *self, jint receivedIndex) {
  @synchronized(self) {
    
#line 238
    if (self->isClosed__) {
      return;
    }
    
#line 242
    BSDataOutput *ackPackage = new_BSDataOutput_init();
    [ackPackage writeIntWithInt:receivedIndex];
    AMManagedConnection_rawPostWithInt_withByteArray_(self, AMManagedConnection_HEADER_ACK, [ackPackage toByteArray]);
  }
}


#line 249
void AMManagedConnection_onDropPackageWithByteArray_(AMManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 250
    BSDataInput *drop = new_BSDataInput_initWithByteArray_(data);
    jlong messageId = [drop readLong];
    jint errorCode = [drop readByte];
    jint messageLen = [drop readInt];
    NSString *message = [NSString stringWithBytes:[drop readBytesWithInt:messageLen] charsetName:@"UTF-8"];
    AMLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$$", @"Drop received: ", message));
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Drop received: ", message));
  }
}


#line 261
void AMManagedConnection_onRawConnected(AMManagedConnection *self) {
  @synchronized(self) {
    if (self->isClosed__) {
      
#line 265
      return;
    }
    if (self->isOpened_) {
      
#line 269
      return;
    }
    self->isOpened_ = YES;
    
#line 273
    [((AMTimerCompat *) nil_chk(self->connectionTimeout_)) cancel];
    
#line 275
    AMManagedConnection_sendHandshakeRequest(self);
  }
}


#line 278
void AMManagedConnection_onRawReceivedWithByteArray_(AMManagedConnection *self, IOSByteArray *data) {
  @synchronized(self) {
    
#line 279
    if (self->isClosed__) {
      return;
    }
    
#line 285
    @try {
      BSDataInput *dataInput = new_BSDataInput_initWithByteArray_(data);
      jint packageIndex = [dataInput readInt];
      
#line 289
      if (self->receivedPackages_ != packageIndex) {
        AMLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$I$I", @"Invalid package index. Expected: ", self->receivedPackages_, @", got: ", packageIndex));
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$I", @"Invalid package index. Expected: ", self->receivedPackages_, @", got: ", packageIndex));
      }
      self->receivedPackages_++;
      
#line 295
      jint header = [dataInput readByte];
      jint dataLength = [dataInput readInt];
      IOSByteArray *content = [dataInput readBytesWithInt:dataLength];
      jint crc32 = [dataInput readInt];
      
#line 300
      [((AMCRC32 *) nil_chk(self->CRC32_ENGINE_)) reset];
      [self->CRC32_ENGINE_ updateWithByteArray:content];
      
#line 303
      if (((jint) [self->CRC32_ENGINE_ getValue]) != crc32) {
        AMLog_wWithNSString_withNSString_(self->TAG_, @"Incorrect CRC32");
        @throw new_JavaIoIOException_initWithNSString_(@"Incorrect CRC32");
      }
      
#line 309
      if (header == AMManagedConnection_HEADER_HANDSHAKE_RESPONSE) {
        if (self->isHandshakePerformed_) {
          @throw new_JavaIoIOException_initWithNSString_(@"Double Handshake");
        }
        AMManagedConnection_onHandshakePackageWithByteArray_(self, content);
      }
      else {
        
#line 315
        if (!self->isHandshakePerformed_) {
          @throw new_JavaIoIOException_initWithNSString_(@"Package before Handshake");
        }
        
#line 319
        if (header == AMManagedConnection_HEADER_PROTO) {
          AMManagedConnection_onProtoPackageWithByteArray_(self, content);
          AMManagedConnection_sendAckPackageWithInt_(self, packageIndex);
        }
        else
#line 322
        if (header == AMManagedConnection_HEADER_PING) {
          AMManagedConnection_onPingPackageWithByteArray_(self, content);
        }
        else
#line 324
        if (header == AMManagedConnection_HEADER_PONG) {
          AMManagedConnection_onPongPackageWithByteArray_(self, content);
        }
        else
#line 326
        if (header == AMManagedConnection_HEADER_DROP) {
          AMManagedConnection_onDropPackageWithByteArray_(self, content);
        }
        else
#line 328
        if (header == AMManagedConnection_HEADER_ACK) {
          AMManagedConnection_onAckPackageWithByteArray_(self, content);
        }
        else {
          
#line 331
          AMLog_wWithNSString_withNSString_(self->TAG_, JreStrcat("$I", @"Received unknown package #", header));
        }
      }
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      [self close];
    }
  }
}


#line 343
void AMManagedConnection_onRawClosed(AMManagedConnection *self) {
  @synchronized(self) {
    [self close];
  }
}


#line 350
void AMManagedConnection_rawPostWithInt_withByteArray_(AMManagedConnection *self, jint header, IOSByteArray *data) {
  @synchronized(self) {
    
#line 351
    AMManagedConnection_rawPostWithInt_withByteArray_withInt_withInt_(self, header, data, 0, ((IOSByteArray *) nil_chk(data))->size_);
  }
}


#line 354
void AMManagedConnection_rawPostWithInt_withByteArray_withInt_withInt_(AMManagedConnection *self, jint header, IOSByteArray *data, jint offset, jint len) {
  @synchronized(self) {
    jint packageId = self->sentPackages_++;
    BSDataOutput *dataOutput = new_BSDataOutput_init();
    [dataOutput writeIntWithInt:packageId];
    [dataOutput writeByteWithInt:header];
    [dataOutput writeIntWithInt:((IOSByteArray *) nil_chk(data))->size_];
    [dataOutput writeBytesWithByteArray:data withInt:offset withInt:len];
    [((AMCRC32 *) nil_chk(self->CRC32_ENGINE_)) reset];
    [self->CRC32_ENGINE_ updateWithByteArray:data withInt:offset withInt:len];
    [dataOutput writeIntWithInt:(jint) [self->CRC32_ENGINE_ getValue]];
    
#line 366
    if (header == AMManagedConnection_HEADER_PROTO) {
      AMTimerCompat *timeoutTask = new_AMTimerCompat_initWithJavaLangRunnable_(new_AMManagedConnection_TimeoutRunnable_initWithAMManagedConnection_(self));
      (void) [((JavaUtilHashMap *) nil_chk(self->packageTimers_)) putWithId:JavaLangInteger_valueOfWithInt_(packageId) withId:timeoutTask];
      [timeoutTask scheduleWithLong:AMManagedConnection_RESPONSE_TIMEOUT];
    }
    
#line 372
    [((AMAsyncConnection *) nil_chk(self->rawConnection_)) doSendWithByteArray:[dataOutput toByteArray]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMManagedConnection)


#line 430
@implementation AMManagedConnection_ConnectionInterface


#line 433
- (void)onConnected {
  AMManagedConnection_onRawConnected(this$0_);
}


#line 438
- (void)onReceivedWithByteArray:(IOSByteArray *)data {
  AMManagedConnection_onRawReceivedWithByteArray_(this$0_, data);
}


#line 443
- (void)onClosed {
  AMManagedConnection_onRawClosed(this$0_);
}

- (instancetype)initWithAMManagedConnection:(AMManagedConnection *)outer$ {
  AMManagedConnection_ConnectionInterface_initWithAMManagedConnection_(self, outer$);
  return self;
}

@end

void AMManagedConnection_ConnectionInterface_initWithAMManagedConnection_(AMManagedConnection_ConnectionInterface *self, AMManagedConnection *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

AMManagedConnection_ConnectionInterface *new_AMManagedConnection_ConnectionInterface_initWithAMManagedConnection_(AMManagedConnection *outer$) {
  AMManagedConnection_ConnectionInterface *self = [AMManagedConnection_ConnectionInterface alloc];
  AMManagedConnection_ConnectionInterface_initWithAMManagedConnection_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMManagedConnection_ConnectionInterface)


#line 449
@implementation AMManagedConnection_PingRunnable


#line 452
- (void)run {
  AMManagedConnection_sendPingMessage(this$0_);
}

- (instancetype)initWithAMManagedConnection:(AMManagedConnection *)outer$ {
  AMManagedConnection_PingRunnable_initWithAMManagedConnection_(self, outer$);
  return self;
}

@end

void AMManagedConnection_PingRunnable_initWithAMManagedConnection_(AMManagedConnection_PingRunnable *self, AMManagedConnection *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

AMManagedConnection_PingRunnable *new_AMManagedConnection_PingRunnable_initWithAMManagedConnection_(AMManagedConnection *outer$) {
  AMManagedConnection_PingRunnable *self = [AMManagedConnection_PingRunnable alloc];
  AMManagedConnection_PingRunnable_initWithAMManagedConnection_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMManagedConnection_PingRunnable)


#line 457
@implementation AMManagedConnection_TimeoutRunnable


#line 460
- (void)run {
  
#line 462
  [this$0_ close];
}

- (instancetype)initWithAMManagedConnection:(AMManagedConnection *)outer$ {
  AMManagedConnection_TimeoutRunnable_initWithAMManagedConnection_(self, outer$);
  return self;
}

@end

void AMManagedConnection_TimeoutRunnable_initWithAMManagedConnection_(AMManagedConnection_TimeoutRunnable *self, AMManagedConnection *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

AMManagedConnection_TimeoutRunnable *new_AMManagedConnection_TimeoutRunnable_initWithAMManagedConnection_(AMManagedConnection *outer$) {
  AMManagedConnection_TimeoutRunnable *self = [AMManagedConnection_TimeoutRunnable alloc];
  AMManagedConnection_TimeoutRunnable_initWithAMManagedConnection_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMManagedConnection_TimeoutRunnable)
