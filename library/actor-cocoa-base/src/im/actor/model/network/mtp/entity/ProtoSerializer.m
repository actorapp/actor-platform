//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/network/mtp/entity/ProtoSerializer.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/bser/DataInput.h"
#include "im/actor/model/network/mtp/entity/Container.h"
#include "im/actor/model/network/mtp/entity/Drop.h"
#include "im/actor/model/network/mtp/entity/MTPush.h"
#include "im/actor/model/network/mtp/entity/MTRpcRequest.h"
#include "im/actor/model/network/mtp/entity/MTRpcResponse.h"
#include "im/actor/model/network/mtp/entity/MessageAck.h"
#include "im/actor/model/network/mtp/entity/NewSessionCreated.h"
#include "im/actor/model/network/mtp/entity/Ping.h"
#include "im/actor/model/network/mtp/entity/Pong.h"
#include "im/actor/model/network/mtp/entity/ProtoSerializer.h"
#include "im/actor/model/network/mtp/entity/ProtoStruct.h"
#include "im/actor/model/network/mtp/entity/RequestResend.h"
#include "im/actor/model/network/mtp/entity/SessionLost.h"
#include "im/actor/model/network/mtp/entity/UnsentMessage.h"
#include "im/actor/model/network/mtp/entity/UnsentResponse.h"
#include "im/actor/model/network/mtp/entity/rpc/Push.h"
#include "im/actor/model/network/mtp/entity/rpc/RpcError.h"
#include "im/actor/model/network/mtp/entity/rpc/RpcFloodWait.h"
#include "im/actor/model/network/mtp/entity/rpc/RpcInternalError.h"
#include "im/actor/model/network/mtp/entity/rpc/RpcOk.h"
#include "im/actor/model/network/mtp/entity/rpc/RpcRequest.h"
#include "java/io/IOException.h"

@implementation MTProtoSerializer

+ (MTProtoStruct *)readMessagePayloadWithByteArray:(IOSByteArray *)bs {
  return MTProtoSerializer_readMessagePayloadWithByteArray_(bs);
}

+ (MTProtoStruct *)readMessagePayloadWithBSDataInput:(BSDataInput *)bs {
  return MTProtoSerializer_readMessagePayloadWithBSDataInput_(bs);
}

+ (MTProtoStruct *)readRpcResponsePayloadWithByteArray:(IOSByteArray *)data {
  return MTProtoSerializer_readRpcResponsePayloadWithByteArray_(data);
}

+ (MTProtoStruct *)readRpcRequestPayloadWithBSDataInput:(BSDataInput *)bs {
  return MTProtoSerializer_readRpcRequestPayloadWithBSDataInput_(bs);
}

+ (MTPush *)readUpdateWithByteArray:(IOSByteArray *)bs {
  return MTProtoSerializer_readUpdateWithByteArray_(bs);
}

+ (MTPush *)readUpdateWithBSDataInput:(BSDataInput *)bs {
  return MTProtoSerializer_readUpdateWithBSDataInput_(bs);
}

- (instancetype)init {
  MTProtoSerializer_init(self);
  return self;
}

@end

MTProtoStruct *MTProtoSerializer_readMessagePayloadWithByteArray_(IOSByteArray *bs) {
  MTProtoSerializer_initialize();
  return MTProtoSerializer_readMessagePayloadWithBSDataInput_(new_BSDataInput_initWithByteArray_withInt_withInt_(bs, 0, ((IOSByteArray *) nil_chk(bs))->size_));
}

MTProtoStruct *MTProtoSerializer_readMessagePayloadWithBSDataInput_(BSDataInput *bs) {
  MTProtoSerializer_initialize();
  jint header = [((BSDataInput *) nil_chk(bs)) readByte];
  switch (header) {
    case MTPing_HEADER:
    return new_MTPing_initWithBSDataInput_(bs);
    case MTPong_HEADER:
    return new_MTPong_initWithBSDataInput_(bs);
    case MTDrop_HEADER:
    return new_MTDrop_initWithBSDataInput_(bs);
    case MTContainer_HEADER:
    return new_MTContainer_initWithBSDataInput_(bs);
    case MTMTRpcRequest_HEADER:
    return new_MTMTRpcRequest_initWithBSDataInput_(bs);
    case MTMTRpcResponse_HEADER:
    return new_MTMTRpcResponse_initWithBSDataInput_(bs);
    case MTMessageAck_HEADER:
    return new_MTMessageAck_initWithBSDataInput_(bs);
    case MTNewSessionCreated_HEADER:
    return new_MTNewSessionCreated_initWithBSDataInput_(bs);
    case MTMTPush_HEADER:
    return new_MTMTPush_initWithBSDataInput_(bs);
    case MTUnsentMessage_HEADER:
    return new_MTUnsentMessage_initWithBSDataInput_(bs);
    case MTUnsentResponse_HEADER:
    return new_MTUnsentResponse_initWithBSDataInput_(bs);
    case MTRequestResend_HEADER:
    return new_MTUnsentResponse_initWithBSDataInput_(bs);
    case MTSessionLost_HEADER:
    return new_MTSessionLost_initWithBSDataInput_(bs);
  }
  @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Unable to read proto object with header #", header));
}

MTProtoStruct *MTProtoSerializer_readRpcResponsePayloadWithByteArray_(IOSByteArray *data) {
  MTProtoSerializer_initialize();
  BSDataInput *bs = new_BSDataInput_initWithByteArray_withInt_withInt_(data, 0, ((IOSByteArray *) nil_chk(data))->size_);
  jint header = [bs readByte];
  switch (header) {
    case MTRpcOk_HEADER:
    return new_MTRpcOk_initWithBSDataInput_(bs);
    case MTRpcError_HEADER:
    return new_MTRpcError_initWithBSDataInput_(bs);
    case MTRpcFloodWait_HEADER:
    return new_MTRpcFloodWait_initWithBSDataInput_(bs);
    case MTRpcInternalError_HEADER:
    return new_MTRpcInternalError_initWithBSDataInput_(bs);
  }
  @throw new_JavaIoIOException_initWithNSString_(@"Unable to read proto object");
}

MTProtoStruct *MTProtoSerializer_readRpcRequestPayloadWithBSDataInput_(BSDataInput *bs) {
  MTProtoSerializer_initialize();
  jint header = [((BSDataInput *) nil_chk(bs)) readByte];
  switch (header) {
    case MTRpcRequest_HEADER:
    return new_MTRpcRequest_initWithBSDataInput_(bs);
  }
  @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Unable to read proto object with header #", header));
}

MTPush *MTProtoSerializer_readUpdateWithByteArray_(IOSByteArray *bs) {
  MTProtoSerializer_initialize();
  return MTProtoSerializer_readUpdateWithBSDataInput_(new_BSDataInput_initWithByteArray_withInt_withInt_(bs, 0, ((IOSByteArray *) nil_chk(bs))->size_));
}

MTPush *MTProtoSerializer_readUpdateWithBSDataInput_(BSDataInput *bs) {
  MTProtoSerializer_initialize();
  return new_MTPush_initWithBSDataInput_(bs);
}

void MTProtoSerializer_init(MTProtoSerializer *self) {
  (void) NSObject_init(self);
}

MTProtoSerializer *new_MTProtoSerializer_init() {
  MTProtoSerializer *self = [MTProtoSerializer alloc];
  MTProtoSerializer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MTProtoSerializer)
