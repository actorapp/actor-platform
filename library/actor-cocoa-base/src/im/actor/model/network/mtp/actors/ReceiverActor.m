//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/network/mtp/actors/ReceiverActor.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/network/mtp/actors/ReceiverActor.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorCreator.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/actors/ActorSelection.h"
#include "im/actor/model/droidkit/actors/ActorSystem.h"
#include "im/actor/model/droidkit/actors/Props.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/network/mtp/MTProto.h"
#include "im/actor/model/network/mtp/MTProtoCallback.h"
#include "im/actor/model/network/mtp/actors/ReceiverActor.h"
#include "im/actor/model/network/mtp/actors/SenderActor.h"
#include "im/actor/model/network/mtp/entity/Container.h"
#include "im/actor/model/network/mtp/entity/MTPush.h"
#include "im/actor/model/network/mtp/entity/MTRpcResponse.h"
#include "im/actor/model/network/mtp/entity/MessageAck.h"
#include "im/actor/model/network/mtp/entity/NewSessionCreated.h"
#include "im/actor/model/network/mtp/entity/ProtoMessage.h"
#include "im/actor/model/network/mtp/entity/ProtoSerializer.h"
#include "im/actor/model/network/mtp/entity/ProtoStruct.h"
#include "im/actor/model/network/mtp/entity/RequestResend.h"
#include "im/actor/model/network/mtp/entity/UnsentMessage.h"
#include "im/actor/model/network/mtp/entity/UnsentResponse.h"
#include "im/actor/model/network/util/MTUids.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"

#define MTReceiverActor_MAX_RECEIVED_BUFFER 1000

@interface MTReceiverActor () {
 @public
  DKActorRef *sender_;
  MTMTProto *proto_;
  JavaUtilArrayList *receivedMessages_;
}

- (void)onReceiveWithMTProtoMessage:(MTProtoMessage *)message;

@end

J2OBJC_FIELD_SETTER(MTReceiverActor, sender_, DKActorRef *)
J2OBJC_FIELD_SETTER(MTReceiverActor, proto_, MTMTProto *)
J2OBJC_FIELD_SETTER(MTReceiverActor, receivedMessages_, JavaUtilArrayList *)

static NSString *MTReceiverActor_TAG_ = 
#line 33
@"ProtoReceiver";
J2OBJC_STATIC_FIELD_GETTER(MTReceiverActor, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(MTReceiverActor, MAX_RECEIVED_BUFFER, jint)

__attribute__((unused)) static void MTReceiverActor_onReceiveWithMTProtoMessage_(MTReceiverActor *self, MTProtoMessage *message);

@interface MTReceiverActor_$1 : NSObject < DKActorCreator > {
 @public
  MTMTProto *val$proto_;
}

- (MTReceiverActor *)create;

- (instancetype)initWithMTMTProto:(MTMTProto *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(MTReceiverActor_$1)

J2OBJC_FIELD_SETTER(MTReceiverActor_$1, val$proto_, MTMTProto *)

__attribute__((unused)) static void MTReceiverActor_$1_initWithMTMTProto_(MTReceiverActor_$1 *self, MTMTProto *capture$0);

__attribute__((unused)) static MTReceiverActor_$1 *new_MTReceiverActor_$1_initWithMTMTProto_(MTMTProto *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(MTReceiverActor_$1)


#line 31
@implementation MTReceiverActor


#line 35
+ (DKActorRef *)receiverWithMTMTProto:(MTMTProto *)proto {
  return MTReceiverActor_receiverWithMTMTProto_(proto);
}


#line 51
- (instancetype)initWithMTMTProto:(MTMTProto *)proto {
  MTReceiverActor_initWithMTMTProto_(self, proto);
  return self;
}

- (void)preStart {
  sender_ = MTSenderActor_senderActorWithMTMTProto_(proto_);
}


#line 61
- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[MTProtoMessage class]]) {
    MTReceiverActor_onReceiveWithMTProtoMessage_(self, (MTProtoMessage *) check_class_cast(message, [MTProtoMessage class]));
  }
  else {
    
#line 65
    [self dropWithId:message];
  }
}


#line 69
- (void)onReceiveWithMTProtoMessage:(MTProtoMessage *)message {
  MTReceiverActor_onReceiveWithMTProtoMessage_(self, message);
}

@end


#line 35
DKActorRef *MTReceiverActor_receiverWithMTMTProto_(MTMTProto *proto) {
  MTReceiverActor_initialize();
  
#line 36
  return [((DKActorSystem *) nil_chk(DKActorSystem_system())) actorOfWithDKActorSelection:new_DKActorSelection_initWithDKProps_withNSString_(DKProps_createWithIOSClass_withDKActorCreator_(MTReceiverActor_class_(), new_MTReceiverActor_$1_initWithMTMTProto_(proto)), JreStrcat("$$",
#line 41
  [((MTMTProto *) nil_chk(proto)) getActorPath], @"/receiver"))];
}


#line 51
void MTReceiverActor_initWithMTMTProto_(MTReceiverActor *self, MTMTProto *proto) {
  (void) DKActor_init(self);
  self->receivedMessages_ = new_JavaUtilArrayList_init();
  
#line 52
  self->proto_ = proto;
}


#line 51
MTReceiverActor *new_MTReceiverActor_initWithMTMTProto_(MTMTProto *proto) {
  MTReceiverActor *self = [MTReceiverActor alloc];
  MTReceiverActor_initWithMTMTProto_(self, proto);
  return self;
}


#line 69
void MTReceiverActor_onReceiveWithMTProtoMessage_(MTReceiverActor *self, MTProtoMessage *message) {
  jboolean disableConfirm = NO;
  @try {
    
#line 74
    if ([((JavaUtilArrayList *) nil_chk(self->receivedMessages_)) containsWithId:JavaLangLong_valueOfWithLong_([((MTProtoMessage *) nil_chk(message)) getMessageId])]) {
      AMLog_wWithNSString_withNSString_(MTReceiverActor_TAG_, JreStrcat("$J$", @"Already received message #", [message getMessageId], @": ignoring"));
      return;
    }
    
#line 79
    if ([self->receivedMessages_ size] >= MTReceiverActor_MAX_RECEIVED_BUFFER) {
      (void) [self->receivedMessages_ removeWithInt:0];
      [self->receivedMessages_ addWithId:JavaLangLong_valueOfWithLong_([message getMessageId])];
    }
    
#line 84
    MTProtoStruct *obj;
    @try {
      obj = MTProtoSerializer_readMessagePayloadWithByteArray_([message getPayload]);
    }
    @catch (
#line 87
    JavaIoIOException *e) {
      AMLog_wWithNSString_withNSString_(MTReceiverActor_TAG_, @"Unable to parse message: ignoring");
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      return;
    }
    
#line 95
    if ([obj isKindOfClass:[MTNewSessionCreated class]]) {
      [((DKActorRef *) nil_chk(self->sender_)) sendWithId:new_MTSenderActor_NewSession_init()];
      [((id<MTMTProtoCallback>) nil_chk([((MTMTProto *) nil_chk(self->proto_)) getCallback])) onSessionCreated];
    }
    else
#line 98
    if ([obj isKindOfClass:[MTContainer class]]) {
      MTContainer *container = (MTContainer *) check_class_cast(obj, [MTContainer class]);
      {
        IOSObjectArray *a__ =
#line 100
        [((MTContainer *) nil_chk(container)) getMessages];
        MTProtoMessage * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        MTProtoMessage * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          MTProtoMessage *m = *b__++;
          
#line 101
          [((DKActorRef *) nil_chk([self self__])) sendWithId:m withDKActorRef:[self sender]];
        }
      }
    }
    else
#line 103
    if ([obj isKindOfClass:[MTMTRpcResponse class]]) {
      MTMTRpcResponse *responseBox = (MTMTRpcResponse *) check_class_cast(obj, [MTMTRpcResponse class]);
      
#line 106
      [((DKActorRef *) nil_chk(self->sender_)) sendWithId:new_MTSenderActor_ForgetMessage_initWithLong_([((MTMTRpcResponse *) nil_chk(responseBox)) getMessageId])];
      [((id<MTMTProtoCallback>) nil_chk([((MTMTProto *) nil_chk(self->proto_)) getCallback])) onRpcResponseWithLong:[responseBox getMessageId] withByteArray:[responseBox getPayload]];
    }
    else
#line 108
    if ([obj isKindOfClass:[MTMessageAck class]]) {
      MTMessageAck *ack = (MTMessageAck *) check_class_cast(obj, [MTMessageAck class]);
      {
        IOSLongArray *a__ = ((MTMessageAck *) nil_chk(ack))->messagesIds_;
        jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
        jlong const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jlong ackMsgId = *b__++;
          
#line 112
          [((DKActorRef *) nil_chk(self->sender_)) sendWithId:new_MTSenderActor_ForgetMessage_initWithLong_(ackMsgId)];
        }
      }
    }
    else
#line 114
    if ([obj isKindOfClass:[MTMTPush class]]) {
      MTMTPush *box = (MTMTPush *) check_class_cast(obj, [MTMTPush class]);
      [((id<MTMTProtoCallback>) nil_chk([((MTMTProto *) nil_chk(self->proto_)) getCallback])) onUpdateWithByteArray:[((MTMTPush *) nil_chk(box)) getPayload]];
    }
    else
#line 126
    if ([obj isKindOfClass:[MTUnsentResponse class]]) {
      MTUnsentResponse *unsent = (MTUnsentResponse *) check_class_cast(obj, [MTUnsentResponse class]);
      if (![self->receivedMessages_ containsWithId:JavaLangLong_valueOfWithLong_([((MTUnsentResponse *) nil_chk(unsent)) getResponseMessageId])]) {
        disableConfirm = YES;
        [((DKActorRef *) nil_chk(self->sender_)) sendWithId:new_MTSenderActor_SendMessage_initWithLong_withByteArray_(ImActorModelNetworkUtilMTUids_nextId(),
#line 131
        [new_MTRequestResend_initWithLong_([unsent getMessageId]) toByteArray])];
      }
    }
    else
#line 133
    if ([obj isKindOfClass:[MTUnsentMessage class]]) {
      MTUnsentMessage *unsent = (MTUnsentMessage *) check_class_cast(obj, [MTUnsentMessage class]);
      if (![self->receivedMessages_ containsWithId:JavaLangLong_valueOfWithLong_([((MTUnsentMessage *) nil_chk(unsent)) getMessageId])]) {
        disableConfirm = YES;
        [((DKActorRef *) nil_chk(self->sender_)) sendWithId:new_MTSenderActor_SendMessage_initWithLong_withByteArray_(ImActorModelNetworkUtilMTUids_nextId(),
#line 138
        [new_MTRequestResend_initWithLong_([unsent getMessageId]) toByteArray])];
      }
    }
    else {
      
#line 141
      AMLog_wWithNSString_withNSString_(MTReceiverActor_TAG_, JreStrcat("$@", @"Unsupported package ", obj));
    }
  }
  @catch (
#line 143
  JavaLangException *e) {
    AMLog_wWithNSString_withNSString_(MTReceiverActor_TAG_, @"Parsing error");
  }
  @finally {
    if (!disableConfirm) {
      [((DKActorRef *) nil_chk(self->sender_)) sendWithId:new_MTSenderActor_ConfirmMessage_initWithLong_([((MTProtoMessage *) nil_chk(message)) getMessageId])];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MTReceiverActor)

@implementation MTReceiverActor_$1


#line 38
- (MTReceiverActor *)create {
  return new_MTReceiverActor_initWithMTMTProto_(val$proto_);
}

- (instancetype)initWithMTMTProto:(MTMTProto *)capture$0 {
  MTReceiverActor_$1_initWithMTMTProto_(self, capture$0);
  return self;
}

@end

void MTReceiverActor_$1_initWithMTMTProto_(MTReceiverActor_$1 *self, MTMTProto *capture$0) {
  self->val$proto_ = capture$0;
  (void) NSObject_init(self);
}

MTReceiverActor_$1 *new_MTReceiverActor_$1_initWithMTMTProto_(MTMTProto *capture$0) {
  MTReceiverActor_$1 *self = [MTReceiverActor_$1 alloc];
  MTReceiverActor_$1_initWithMTMTProto_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MTReceiverActor_$1)
