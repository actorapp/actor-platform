//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/droidkit/bser/DataOutput.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/droidkit/bser/DataOutput.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/bser/DataOutput.h"
#include "im/actor/model/droidkit/bser/Limits.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"

@interface BSDataOutput () {
 @public
  IOSByteArray *data_;
  jint offset_;
}

- (void)expandWithInt:(jint)size;

@end

J2OBJC_FIELD_SETTER(BSDataOutput, data_, IOSByteArray *)

__attribute__((unused)) static void BSDataOutput_expandWithInt_(BSDataOutput *self, jint size);


#line 9
@implementation BSDataOutput


#line 13
- (instancetype)init {
  BSDataOutput_init(self);
  return self;
}


#line 17
- (void)expandWithInt:(jint)size {
  BSDataOutput_expandWithInt_(self, size);
}


#line 25
- (void)writeLongWithLong:(jlong)v {
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 8) {
    BSDataOutput_expandWithInt_(self, offset_ + 8);
  }
  
#line 30
  v = v & (jint) 0xFFFFFFFF;
  
#line 32
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 56)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 48)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 40)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 32)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 24)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 16)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift64(v, 8)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) (v & (jint) 0xFF);
}


#line 42
- (void)writeIntWithInt:(jint)v {
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 4) {
    BSDataOutput_expandWithInt_(self, offset_ + 4);
  }
  
#line 47
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift32(v, 24)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift32(v, 16)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) ((RShift32(v, 8)) & (jint) 0xFF);
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) (v & (jint) 0xFF);
}


#line 53
- (void)writeByteWithByte:(jbyte)v {
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 1) {
    BSDataOutput_expandWithInt_(self, offset_ + 1);
  }
  *IOSByteArray_GetRef(data_, offset_++) = v;
}

- (void)writeByteWithInt:(jint)v {
  if (v < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can't be negative");
  }
  if (v > 255) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Value can't be more than 255");
  }
  if (((IOSByteArray *) nil_chk(data_))->size_ <= offset_ + 1) {
    BSDataOutput_expandWithInt_(self, offset_ + 1);
  }
  *IOSByteArray_GetRef(data_, offset_++) = (jbyte) v;
}

- (void)writeVarIntWithLong:(jlong)v {
  while ((v & (jlong) 0xffffffffffffff80l) != 0l) {
    [self writeByteWithInt:(jint) ((v & (jint) 0x7f) | (jint) 0x80)];
    URShiftAssignLong(&v, 7);
  }
  
#line 79
  [self writeByteWithInt:(jint) (v & (jint) 0x7f)];
}


#line 82
- (void)writeProtoBytesWithByteArray:(IOSByteArray *)v
                             withInt:(jint)ofs
                             withInt:(jint)len {
  [self writeVarIntWithLong:len];
  [self writeBytesWithByteArray:v withInt:ofs withInt:len];
}


#line 87
- (void)writeBytesWithByteArray:(IOSByteArray *)v {
  [self writeBytesWithByteArray:v withInt:0 withInt:((IOSByteArray *) nil_chk(v))->size_];
}

- (void)writeBytesWithByteArray:(IOSByteArray *)v
                        withInt:(jint)ofs
                        withInt:(jint)len {
  if (len > BSLimits_MAX_BLOCK_SIZE) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Unable to write more than 1 MB");
  }
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Length can't be negative");
  }
  if (ofs < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Offset can't be negative");
  }
  if (ofs + len > ((IOSByteArray *) nil_chk(v))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Inconsistent sizes");
  }
  
#line 105
  if (((IOSByteArray *) nil_chk(data_))->size_ < offset_ + v->size_) {
    BSDataOutput_expandWithInt_(self, offset_ + v->size_);
  }
  for (jint i = 0; i < len; i++) {
    *IOSByteArray_GetRef(data_, offset_++) = IOSByteArray_Get(v, i + ofs);
  }
}


#line 113
- (void)writeProtoLongsWithLongArray:(IOSLongArray *)values {
  if (((IOSLongArray *) nil_chk(values))->size_ > BSLimits_MAX_PROTO_REPEATED) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Values can't be more than ", BSLimits_MAX_PROTO_REPEATED));
  }
  [self writeVarIntWithLong:values->size_];
  {
    IOSLongArray *a__ =
#line 118
    values;
    jlong const *b__ = a__->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong l = *b__++;
      
#line 119
      [self writeLongWithLong:l];
    }
  }
}


#line 123
- (void)writeProtoStringWithNSString:(NSString *)value {
  IOSByteArray *data = [((NSString *) nil_chk(value)) getBytesWithCharsetName:@"UTF-8"];
  [self writeProtoBytesWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
}

- (void)writeProtoBoolWithBoolean:(jboolean)v {
  [self writeByteWithInt:v ? 1 : 0];
}

- (IOSByteArray *)toByteArray {
  IOSByteArray *res = [IOSByteArray newArrayWithLength:offset_];
  for (jint i = 0; i < offset_; i++) {
    *IOSByteArray_GetRef(res, i) = IOSByteArray_Get(nil_chk(data_), i);
  }
  return res;
}

- (void)writeASN1LengthWithInt:(jint)length {
  if (length > 127) {
    jint size = 1;
    jint val = length;
    
#line 145
    while ((URShiftAssignInt(&val, 8)) != 0) {
      size++;
    }
    
#line 149
    [self writeByteWithInt:(size | (jint) 0x80) & (jint) 0xFF];
    
#line 151
    for (jint i = (size - 1) * 8; i >= 0; i -= 8) {
      [self writeByteWithInt:(RShift32(length, i)) & (jint) 0xFF];
    }
  }
  else {
    
#line 155
    [self writeByteWithInt:length & (jint) 0xFF];
  }
}

@end


#line 13
void BSDataOutput_init(BSDataOutput *self) {
  (void) NSObject_init(self);
  self->data_ = [IOSByteArray newArrayWithLength:
#line 10
  16];
}


#line 13
BSDataOutput *new_BSDataOutput_init() {
  BSDataOutput *self = [BSDataOutput alloc];
  BSDataOutput_init(self);
  return self;
}


#line 17
void BSDataOutput_expandWithInt_(BSDataOutput *self, jint size) {
  IOSByteArray *nData = [IOSByteArray newArrayWithLength:size];
  for (jint i = 0; i < self->offset_; i++) {
    *IOSByteArray_GetRef(nData, i) = IOSByteArray_Get(nil_chk(self->data_), i);
  }
  self->data_ = nData;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BSDataOutput)
