//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/droidkit/json/JSONArray.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/json/JSONArray.h"
#include "im/actor/model/droidkit/json/JSONException.h"
#include "im/actor/model/droidkit/json/JSONObject.h"
#include "im/actor/model/droidkit/json/JSONTokener.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"

@interface ImActorModelDroidkitJsonJSONArray () {
 @public
  JavaUtilArrayList *myArrayList_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelDroidkitJsonJSONArray, myArrayList_, JavaUtilArrayList *)

@implementation ImActorModelDroidkitJsonJSONArray

- (instancetype)init {
  ImActorModelDroidkitJsonJSONArray_init(self);
  return self;
}

- (instancetype)initWithImActorModelDroidkitJsonJSONTokener:(ImActorModelDroidkitJsonJSONTokener *)x {
  ImActorModelDroidkitJsonJSONArray_initWithImActorModelDroidkitJsonJSONTokener_(self, x);
  return self;
}

- (instancetype)initWithNSString:(NSString *)source {
  ImActorModelDroidkitJsonJSONArray_initWithNSString_(self, source);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  ImActorModelDroidkitJsonJSONArray_initWithJavaUtilCollection_(self, collection);
  return self;
}

- (id)getWithInt:(jint)index {
  id object = [self optWithInt:index];
  if (object == nil) {
    @throw new_ImActorModelDroidkitJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not found."));
  }
  return object;
}

- (jboolean)getBooleanWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([nil_chk(object) isEqual:JavaLangBoolean_get_FALSE__()] || ([object isKindOfClass:[NSString class]] && [((NSString *) check_class_cast(object, [NSString class])) equalsIgnoreCase:@"false"])) {
    return NO;
  }
  else if ([object isEqual:JavaLangBoolean_get_TRUE__()] || ([object isKindOfClass:[NSString class]] && [((NSString *) check_class_cast(object, [NSString class])) equalsIgnoreCase:@"true"])) {
    return YES;
  }
  @throw new_ImActorModelDroidkitJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a boolean."));
}

- (jdouble)getDoubleWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) doubleValue] : JavaLangDouble_parseDoubleWithNSString_((NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw new_ImActorModelDroidkitJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}

- (jint)getIntWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) intValue] : JavaLangInteger_parseIntWithNSString_((NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw new_ImActorModelDroidkitJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}

- (ImActorModelDroidkitJsonJSONArray *)getJSONArrayWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[ImActorModelDroidkitJsonJSONArray class]]) {
    return (ImActorModelDroidkitJsonJSONArray *) check_class_cast(object, [ImActorModelDroidkitJsonJSONArray class]);
  }
  @throw new_ImActorModelDroidkitJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a JSONArray."));
}

- (ImActorModelDroidkitJsonJSONObject *)getJSONObjectWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[ImActorModelDroidkitJsonJSONObject class]]) {
    return (ImActorModelDroidkitJsonJSONObject *) check_class_cast(object, [ImActorModelDroidkitJsonJSONObject class]);
  }
  @throw new_ImActorModelDroidkitJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a JSONObject."));
}

- (jlong)getLongWithInt:(jint)index {
  id object = [self getWithInt:index];
  @try {
    return [object isKindOfClass:[NSNumber class]] ? [((NSNumber *) nil_chk(((NSNumber *) check_class_cast(object, [NSNumber class])))) longLongValue] : JavaLangLong_parseLongWithNSString_((NSString *) check_class_cast(object, [NSString class]));
  }
  @catch (JavaLangException *e) {
    @throw new_ImActorModelDroidkitJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] is not a number."));
  }
}

- (NSString *)getStringWithInt:(jint)index {
  id object = [self getWithInt:index];
  if ([object isKindOfClass:[NSString class]]) {
    return (NSString *) check_class_cast(object, [NSString class]);
  }
  @throw new_ImActorModelDroidkitJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not a string."));
}

- (jboolean)isNullWithInt:(jint)index {
  return [nil_chk(ImActorModelDroidkitJsonJSONObject_get_NULL__()) isEqual:[self optWithInt:index]];
}

- (jint)length {
  return [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) size];
}

- (id)optWithInt:(jint)index {
  return (index < 0 || index >= [self length]) ? nil : [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) getWithInt:index];
}

- (jboolean)optBooleanWithInt:(jint)index {
  return [self optBooleanWithInt:index withBoolean:NO];
}

- (jboolean)optBooleanWithInt:(jint)index
                  withBoolean:(jboolean)defaultValue {
  @try {
    return [self getBooleanWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (jdouble)optDoubleWithInt:(jint)index {
  return [self optDoubleWithInt:index withDouble:JavaLangDouble_NaN];
}

- (jdouble)optDoubleWithInt:(jint)index
                 withDouble:(jdouble)defaultValue {
  @try {
    return [self getDoubleWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (jint)optIntWithInt:(jint)index {
  return [self optIntWithInt:index withInt:0];
}

- (jint)optIntWithInt:(jint)index
              withInt:(jint)defaultValue {
  @try {
    return [self getIntWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (ImActorModelDroidkitJsonJSONArray *)optJSONArrayWithInt:(jint)index {
  id o = [self optWithInt:index];
  return [o isKindOfClass:[ImActorModelDroidkitJsonJSONArray class]] ? (ImActorModelDroidkitJsonJSONArray *) check_class_cast(o, [ImActorModelDroidkitJsonJSONArray class]) : nil;
}

- (ImActorModelDroidkitJsonJSONObject *)optJSONObjectWithInt:(jint)index {
  id o = [self optWithInt:index];
  return [o isKindOfClass:[ImActorModelDroidkitJsonJSONObject class]] ? (ImActorModelDroidkitJsonJSONObject *) check_class_cast(o, [ImActorModelDroidkitJsonJSONObject class]) : nil;
}

- (jlong)optLongWithInt:(jint)index {
  return [self optLongWithInt:index withLong:0];
}

- (jlong)optLongWithInt:(jint)index
               withLong:(jlong)defaultValue {
  @try {
    return [self getLongWithInt:index];
  }
  @catch (JavaLangException *e) {
    return defaultValue;
  }
}

- (NSString *)optStringWithInt:(jint)index {
  return [self optStringWithInt:index withNSString:@""];
}

- (NSString *)optStringWithInt:(jint)index
                  withNSString:(NSString *)defaultValue {
  id object = [self optWithInt:index];
  return [nil_chk(ImActorModelDroidkitJsonJSONObject_get_NULL__()) isEqual:object] ? defaultValue : [nil_chk(object) description];
}

- (ImActorModelDroidkitJsonJSONArray *)putWithBoolean:(jboolean)value {
  (void) [self putWithId:value ? JavaLangBoolean_get_TRUE__() : JavaLangBoolean_get_FALSE__()];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithJavaUtilCollection:(id<JavaUtilCollection>)value {
  (void) [self putWithId:new_ImActorModelDroidkitJsonJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithDouble:(jdouble)value {
  JavaLangDouble *d = new_JavaLangDouble_initWithDouble_(value);
  ImActorModelDroidkitJsonJSONObject_testValidityWithId_(d);
  (void) [self putWithId:d];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithInt:(jint)value {
  (void) [self putWithId:new_JavaLangInteger_initWithInt_(value)];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithLong:(jlong)value {
  (void) [self putWithId:new_JavaLangLong_initWithLong_(value)];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithJavaUtilMap:(id<JavaUtilMap>)value {
  (void) [self putWithId:new_ImActorModelDroidkitJsonJSONObject_initWithJavaUtilMap_(value)];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithId:(id)value {
  [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:value];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithInt:(jint)index
                                      withBoolean:(jboolean)value {
  (void) [self putWithInt:index withId:value ? JavaLangBoolean_get_TRUE__() : JavaLangBoolean_get_FALSE__()];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithInt:(jint)index
                           withJavaUtilCollection:(id<JavaUtilCollection>)value {
  (void) [self putWithInt:index withId:new_ImActorModelDroidkitJsonJSONArray_initWithJavaUtilCollection_(value)];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithInt:(jint)index
                                       withDouble:(jdouble)value {
  (void) [self putWithInt:index withId:new_JavaLangDouble_initWithDouble_(value)];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithInt:(jint)index
                                          withInt:(jint)value {
  (void) [self putWithInt:index withId:new_JavaLangInteger_initWithInt_(value)];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithInt:(jint)index
                                         withLong:(jlong)value {
  (void) [self putWithInt:index withId:new_JavaLangLong_initWithLong_(value)];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithInt:(jint)index
                                  withJavaUtilMap:(id<JavaUtilMap>)value {
  (void) [self putWithInt:index withId:new_ImActorModelDroidkitJsonJSONObject_initWithJavaUtilMap_(value)];
  return self;
}

- (ImActorModelDroidkitJsonJSONArray *)putWithInt:(jint)index
                                           withId:(id)value {
  ImActorModelDroidkitJsonJSONObject_testValidityWithId_(value);
  if (index < 0) {
    @throw new_ImActorModelDroidkitJsonJSONException_initWithNSString_(JreStrcat("$I$", @"JSONArray[", index, @"] not found."));
  }
  if (index < [self length]) {
    (void) [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) setWithInt:index withId:value];
  }
  else {
    while (index != [self length]) {
      (void) [self putWithId:ImActorModelDroidkitJsonJSONObject_get_NULL__()];
    }
    (void) [self putWithId:value];
  }
  return self;
}

- (id)removeWithInt:(jint)index {
  return index >= 0 && index < [self length] ? [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) removeWithInt:index] : nil;
}

- (jboolean)similarWithId:(id)other {
  if (!([other isKindOfClass:[ImActorModelDroidkitJsonJSONArray class]])) {
    return NO;
  }
  jint len = [self length];
  if (len != [((ImActorModelDroidkitJsonJSONArray *) nil_chk(((ImActorModelDroidkitJsonJSONArray *) check_class_cast(other, [ImActorModelDroidkitJsonJSONArray class])))) length]) {
    return NO;
  }
  for (jint i = 0; i < len; i += 1) {
    id valueThis = [self getWithInt:i];
    id valueOther = [((ImActorModelDroidkitJsonJSONArray *) nil_chk(((ImActorModelDroidkitJsonJSONArray *) check_class_cast(other, [ImActorModelDroidkitJsonJSONArray class])))) getWithInt:i];
    if ([valueThis isKindOfClass:[ImActorModelDroidkitJsonJSONObject class]]) {
      if (![((ImActorModelDroidkitJsonJSONObject *) nil_chk(((ImActorModelDroidkitJsonJSONObject *) check_class_cast(valueThis, [ImActorModelDroidkitJsonJSONObject class])))) similarWithId:valueOther]) {
        return NO;
      }
    }
    else if ([valueThis isKindOfClass:[ImActorModelDroidkitJsonJSONArray class]]) {
      if (![((ImActorModelDroidkitJsonJSONArray *) nil_chk(((ImActorModelDroidkitJsonJSONArray *) check_class_cast(valueThis, [ImActorModelDroidkitJsonJSONArray class])))) similarWithId:valueOther]) {
        return NO;
      }
    }
    else if (![nil_chk(valueThis) isEqual:valueOther]) {
      return NO;
    }
  }
  return YES;
}

- (ImActorModelDroidkitJsonJSONObject *)toJSONObjectWithImActorModelDroidkitJsonJSONArray:(ImActorModelDroidkitJsonJSONArray *)names {
  if (names == nil || [names length] == 0 || [self length] == 0) {
    return nil;
  }
  ImActorModelDroidkitJsonJSONObject *jo = new_ImActorModelDroidkitJsonJSONObject_init();
  for (jint i = 0; i < [((ImActorModelDroidkitJsonJSONArray *) nil_chk(names)) length]; i += 1) {
    (void) [jo putWithNSString:[names getStringWithInt:i] withId:[self optWithInt:i]];
  }
  return jo;
}

@end

void ImActorModelDroidkitJsonJSONArray_init(ImActorModelDroidkitJsonJSONArray *self) {
  (void) NSObject_init(self);
  self->myArrayList_ = new_JavaUtilArrayList_init();
}

ImActorModelDroidkitJsonJSONArray *new_ImActorModelDroidkitJsonJSONArray_init() {
  ImActorModelDroidkitJsonJSONArray *self = [ImActorModelDroidkitJsonJSONArray alloc];
  ImActorModelDroidkitJsonJSONArray_init(self);
  return self;
}

void ImActorModelDroidkitJsonJSONArray_initWithImActorModelDroidkitJsonJSONTokener_(ImActorModelDroidkitJsonJSONArray *self, ImActorModelDroidkitJsonJSONTokener *x) {
  (void) ImActorModelDroidkitJsonJSONArray_init(self);
  if ([((ImActorModelDroidkitJsonJSONTokener *) nil_chk(x)) nextClean] != '[') {
    @throw [x syntaxErrorWithNSString:@"A JSONArray text must start with '['"];
  }
  if ([x nextClean] != ']') {
    [x back];
    for (; ; ) {
      if ([x nextClean] == ',') {
        [x back];
        [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:ImActorModelDroidkitJsonJSONObject_get_NULL__()];
      }
      else {
        [x back];
        [((JavaUtilArrayList *) nil_chk(self->myArrayList_)) addWithId:[x nextValue]];
      }
      switch ([x nextClean]) {
        case ',':
        if ([x nextClean] == ']') {
          return;
        }
        [x back];
        break;
        case ']':
        return;
        default:
        @throw [x syntaxErrorWithNSString:@"Expected a ',' or ']'"];
      }
    }
  }
}

ImActorModelDroidkitJsonJSONArray *new_ImActorModelDroidkitJsonJSONArray_initWithImActorModelDroidkitJsonJSONTokener_(ImActorModelDroidkitJsonJSONTokener *x) {
  ImActorModelDroidkitJsonJSONArray *self = [ImActorModelDroidkitJsonJSONArray alloc];
  ImActorModelDroidkitJsonJSONArray_initWithImActorModelDroidkitJsonJSONTokener_(self, x);
  return self;
}

void ImActorModelDroidkitJsonJSONArray_initWithNSString_(ImActorModelDroidkitJsonJSONArray *self, NSString *source) {
  (void) ImActorModelDroidkitJsonJSONArray_initWithImActorModelDroidkitJsonJSONTokener_(self, new_ImActorModelDroidkitJsonJSONTokener_initWithNSString_(source));
}

ImActorModelDroidkitJsonJSONArray *new_ImActorModelDroidkitJsonJSONArray_initWithNSString_(NSString *source) {
  ImActorModelDroidkitJsonJSONArray *self = [ImActorModelDroidkitJsonJSONArray alloc];
  ImActorModelDroidkitJsonJSONArray_initWithNSString_(self, source);
  return self;
}

void ImActorModelDroidkitJsonJSONArray_initWithJavaUtilCollection_(ImActorModelDroidkitJsonJSONArray *self, id<JavaUtilCollection> collection) {
  (void) NSObject_init(self);
  self->myArrayList_ = new_JavaUtilArrayList_init();
  if (collection != nil) {
    id<JavaUtilIterator> iter = [collection iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      [self->myArrayList_ addWithId:[iter next]];
    }
  }
}

ImActorModelDroidkitJsonJSONArray *new_ImActorModelDroidkitJsonJSONArray_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  ImActorModelDroidkitJsonJSONArray *self = [ImActorModelDroidkitJsonJSONArray alloc];
  ImActorModelDroidkitJsonJSONArray_initWithJavaUtilCollection_(self, collection);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelDroidkitJsonJSONArray)
