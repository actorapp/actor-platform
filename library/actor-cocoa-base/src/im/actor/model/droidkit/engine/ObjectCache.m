//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/droidkit/engine/ObjectCache.java
//


#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/engine/ObjectCache.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

@interface DKObjectCache () {
 @public
  jboolean lockLoading_;
}

@end

@implementation DKObjectCache

- (void)onObjectLoadedWithId:(id)key
                      withId:(id)value {
  @synchronized(self) {
    if (lockLoading_) {
      return;
    }
    if ([((JavaUtilHashSet *) nil_chk(removedItems_)) containsWithId:key]) {
      return;
    }
    if ([((JavaUtilHashMap *) nil_chk(memoryCache_)) containsKeyWithId:key]) {
      return;
    }
    (void) [memoryCache_ putWithId:key withId:value];
  }
}

- (void)onObjectUpdatedWithId:(id)key
                       withId:(id)value {
  @synchronized(self) {
    [((JavaUtilHashSet *) nil_chk(removedItems_)) removeWithId:key];
    (void) [((JavaUtilHashMap *) nil_chk(memoryCache_)) putWithId:key withId:value];
  }
}

- (void)removeObjectWithId:(id)key {
  @synchronized(self) {
    (void) [((JavaUtilHashMap *) nil_chk(memoryCache_)) removeWithId:key];
    [((JavaUtilHashSet *) nil_chk(removedItems_)) addWithId:key];
  }
}

- (id)lookupWithId:(id)key {
  @synchronized(self) {
    return [((JavaUtilHashMap *) nil_chk(memoryCache_)) getWithId:key];
  }
}

- (void)clear {
  @synchronized(self) {
    [((JavaUtilHashMap *) nil_chk(memoryCache_)) clear];
    [((JavaUtilHashSet *) nil_chk(removedItems_)) clear];
  }
}

- (void)startLock {
  @synchronized(self) {
    lockLoading_ = YES;
  }
}

- (void)stopLock {
  @synchronized(self) {
    lockLoading_ = NO;
  }
}

- (instancetype)init {
  DKObjectCache_init(self);
  return self;
}

@end

void DKObjectCache_init(DKObjectCache *self) {
  (void) NSObject_init(self);
  self->memoryCache_ = new_JavaUtilHashMap_init();
  self->removedItems_ = new_JavaUtilHashSet_init();
  self->lockLoading_ = NO;
}

DKObjectCache *new_DKObjectCache_init() {
  DKObjectCache *self = [DKObjectCache alloc];
  DKObjectCache_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DKObjectCache)
