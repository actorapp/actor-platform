//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/api/TextExMarkdown.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "im/actor/model/api/TextExMarkdown.h"
#include "im/actor/model/api/TextMessageEx.h"
#include "im/actor/model/droidkit/bser/BserObject.h"
#include "im/actor/model/droidkit/bser/BserValues.h"
#include "im/actor/model/droidkit/bser/BserWriter.h"
#include "im/actor/model/droidkit/bser/util/SparseArray.h"
#include "java/io/IOException.h"

@interface APTextExMarkdown () {
 @public
  NSString *markdown_;
}

@end

J2OBJC_FIELD_SETTER(APTextExMarkdown, markdown_, NSString *)

@implementation APTextExMarkdown

- (instancetype)initWithNSString:(NSString *)markdown {
  APTextExMarkdown_initWithNSString_(self, markdown);
  return self;
}

- (instancetype)init {
  APTextExMarkdown_init(self);
  return self;
}

- (jint)getHeader {
  return 1;
}

- (NSString *)getMarkdown {
  return self->markdown_;
}

- (void)parseWithBSBserValues:(BSBserValues *)values {
  self->markdown_ = [((BSBserValues *) nil_chk(values)) getStringWithInt:2];
  if ([values hasRemaining]) {
    [self setUnmappedObjectsWithImActorModelDroidkitBserUtilSparseArray:[values buildRemaining]];
  }
}

- (void)serializeWithBSBserWriter:(BSBserWriter *)writer {
  if (self->markdown_ == nil) {
    @throw new_JavaIoIOException_init();
  }
  [((BSBserWriter *) nil_chk(writer)) writeStringWithInt:2 withNSString:self->markdown_];
  if ([self getUnmappedObjects] != nil) {
    ImActorModelDroidkitBserUtilSparseArray *unmapped = [self getUnmappedObjects];
    for (jint i = 0; i < [((ImActorModelDroidkitBserUtilSparseArray *) nil_chk(unmapped)) size]; i++) {
      jint key = [unmapped keyAtWithInt:i];
      [writer writeUnmappedWithInt:key withId:[unmapped getWithInt:key]];
    }
  }
}

- (NSString *)description {
  NSString *res = @"struct TextExMarkdown{";
  res = JreStrcat("$$", res, JreStrcat("$$", @"markdown=", self->markdown_));
  res = JreStrcat("$C", res, '}');
  return res;
}

@end

void APTextExMarkdown_initWithNSString_(APTextExMarkdown *self, NSString *markdown) {
  (void) APTextMessageEx_init(self);
  self->markdown_ = markdown;
}

APTextExMarkdown *new_APTextExMarkdown_initWithNSString_(NSString *markdown) {
  APTextExMarkdown *self = [APTextExMarkdown alloc];
  APTextExMarkdown_initWithNSString_(self, markdown);
  return self;
}

void APTextExMarkdown_init(APTextExMarkdown *self) {
  (void) APTextMessageEx_init(self);
}

APTextExMarkdown *new_APTextExMarkdown_init() {
  APTextExMarkdown *self = [APTextExMarkdown alloc];
  APTextExMarkdown_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(APTextExMarkdown)
