//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/api/rpc/RequestLoadHistory.java
//

#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/api/rpc/RequestLoadHistory.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/api/OutPeer.h"
#include "im/actor/model/api/rpc/RequestLoadHistory.h"
#include "im/actor/model/droidkit/bser/Bser.h"
#include "im/actor/model/droidkit/bser/BserObject.h"
#include "im/actor/model/droidkit/bser/BserValues.h"
#include "im/actor/model/droidkit/bser/BserWriter.h"
#include "java/io/IOException.h"

@interface ImActorModelApiRpcRequestLoadHistory () {
 @public
  ImActorModelApiOutPeer *peer_;
  jlong minDate_;
  jint limit_;
}
@end

J2OBJC_FIELD_SETTER(ImActorModelApiRpcRequestLoadHistory, peer_, ImActorModelApiOutPeer *)


#line 20
@implementation ImActorModelApiRpcRequestLoadHistory


#line 23
+ (ImActorModelApiRpcRequestLoadHistory *)fromBytesWithByteArray:(IOSByteArray *)data {
  return ImActorModelApiRpcRequestLoadHistory_fromBytesWithByteArray_(data);
}


#line 31
- (instancetype)initWithImActorModelApiOutPeer:(ImActorModelApiOutPeer *)peer
                                      withLong:(jlong)minDate
                                       withInt:(jint)limit {
  if (self = [super init]) {
    
#line 32
    self->peer_ = peer;
    
#line 33
    self->minDate_ = minDate;
    
#line 34
    self->limit_ = limit;
  }
  return self;
}


#line 37
- (instancetype)init {
  return [super init];
}

- (ImActorModelApiOutPeer *)getPeer {
  
#line 42
  return self->peer_;
}


#line 45
- (jlong)getMinDate {
  
#line 46
  return self->minDate_;
}


#line 49
- (jint)getLimit {
  
#line 50
  return self->limit_;
}


#line 54
- (void)parseWithBSBserValues:(BSBserValues *)values {
  self->peer_ = [((BSBserValues *) nil_chk(values)) getObjWithInt:1 withBSBserObject:[[ImActorModelApiOutPeer alloc] init]];
  self->minDate_ = [values getLongWithInt:3];
  self->limit_ = [values getIntWithInt:4];
}


#line 61
- (void)serializeWithBSBserWriter:(BSBserWriter *)writer {
  
#line 62
  if (self->peer_ == nil) {
    @throw [[JavaIoIOException alloc] init];
  }
  [((BSBserWriter *) nil_chk(writer)) writeObjectWithInt:1 withBSBserObject:self->peer_];
  [writer writeLongWithInt:3 withLong:self->minDate_];
  [writer writeIntWithInt:4 withInt:self->limit_];
}

- (NSString *)description {
  NSString *res = @"rpc LoadHistory{";
  res = JreStrcat("$$", res, JreStrcat("$@", @"peer=", self->peer_));
  res = JreStrcat("$$", res, JreStrcat("$J", @", minDate=", self->minDate_));
  res = JreStrcat("$$", res, JreStrcat("$I", @", limit=", self->limit_));
  res = JreStrcat("$C", res, '}');
  return res;
}

- (jint)getHeaderKey {
  
#line 82
  return ImActorModelApiRpcRequestLoadHistory_HEADER;
}

- (void)copyAllFieldsTo:(ImActorModelApiRpcRequestLoadHistory *)other {
  [super copyAllFieldsTo:other];
  other->peer_ = peer_;
  other->minDate_ = minDate_;
  other->limit_ = limit_;
}

@end

ImActorModelApiRpcRequestLoadHistory *ImActorModelApiRpcRequestLoadHistory_fromBytesWithByteArray_(IOSByteArray *data) {
  ImActorModelApiRpcRequestLoadHistory_init();
  
#line 24
  return ((ImActorModelApiRpcRequestLoadHistory *) BSBser_parseWithBSBserObject_withByteArray_([[ImActorModelApiRpcRequestLoadHistory alloc] init], data));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelApiRpcRequestLoadHistory)
