//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/mvvm/MVVMCollection.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/engine/KeyValueEngine.h"
#include "im/actor/model/droidkit/engine/KeyValueItem.h"
#include "im/actor/model/droidkit/engine/KeyValueRecord.h"
#include "im/actor/model/droidkit/engine/KeyValueStorage.h"
#include "im/actor/model/mvvm/BaseValueModel.h"
#include "im/actor/model/mvvm/MVVMCollection.h"
#include "im/actor/model/mvvm/MVVMEngine.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"

@class AMMVVMCollection_ProxyKeyValueEngine;

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface AMMVVMCollection () {
 @public
  JavaUtilHashMap *values_;
  id<DKKeyValueStorage> collectionStorage_;
  AMMVVMCollection_ProxyKeyValueEngine *proxyKeyValueEngine_;
}

- (void)notifyChangeWithJavaUtilList:(id<JavaUtilList>)items;

- (void)notifyRemoveWithLongArray:(IOSLongArray *)ids;

- (void)notifyClear;

@end

J2OBJC_FIELD_SETTER(AMMVVMCollection, values_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(AMMVVMCollection, collectionStorage_, id<DKKeyValueStorage>)
J2OBJC_FIELD_SETTER(AMMVVMCollection, proxyKeyValueEngine_, AMMVVMCollection_ProxyKeyValueEngine *)

__attribute__((unused)) static void AMMVVMCollection_notifyChangeWithJavaUtilList_(AMMVVMCollection *self, id<JavaUtilList> items);

__attribute__((unused)) static void AMMVVMCollection_notifyRemoveWithLongArray_(AMMVVMCollection *self, IOSLongArray *ids);

__attribute__((unused)) static void AMMVVMCollection_notifyClear(AMMVVMCollection *self);

@interface AMMVVMCollection_ProxyKeyValueEngine : NSObject < DKKeyValueEngine > {
 @public
  AMMVVMCollection *this$0_;
  JavaUtilHashMap *cache_;
}

- (void)addOrUpdateItem:(id<DKKeyValueItem>)item;

- (void)addOrUpdateItems:(id<JavaUtilList>)values;

- (void)removeItemWithKey:(jlong)id_;

- (void)removeItemsWithKeys:(IOSLongArray *)ids;

- (void)clear;

- (id)getValueWithKey:(jlong)id_;

- (instancetype)initWithAMMVVMCollection:(AMMVVMCollection *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(AMMVVMCollection_ProxyKeyValueEngine)

J2OBJC_FIELD_SETTER(AMMVVMCollection_ProxyKeyValueEngine, this$0_, AMMVVMCollection *)
J2OBJC_FIELD_SETTER(AMMVVMCollection_ProxyKeyValueEngine, cache_, JavaUtilHashMap *)

__attribute__((unused)) static void AMMVVMCollection_ProxyKeyValueEngine_initWithAMMVVMCollection_(AMMVVMCollection_ProxyKeyValueEngine *self, AMMVVMCollection *outer$);

__attribute__((unused)) static AMMVVMCollection_ProxyKeyValueEngine *new_AMMVVMCollection_ProxyKeyValueEngine_initWithAMMVVMCollection_(AMMVVMCollection *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AMMVVMCollection_ProxyKeyValueEngine)

@interface AMMVVMCollection_$1 : NSObject < JavaLangRunnable > {
 @public
  AMMVVMCollection *this$0_;
  id<JavaUtilList> val$items_;
}

- (void)run;

- (instancetype)initWithAMMVVMCollection:(AMMVVMCollection *)outer$
                        withJavaUtilList:(id<JavaUtilList>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(AMMVVMCollection_$1)

J2OBJC_FIELD_SETTER(AMMVVMCollection_$1, this$0_, AMMVVMCollection *)
J2OBJC_FIELD_SETTER(AMMVVMCollection_$1, val$items_, id<JavaUtilList>)

__attribute__((unused)) static void AMMVVMCollection_$1_initWithAMMVVMCollection_withJavaUtilList_(AMMVVMCollection_$1 *self, AMMVVMCollection *outer$, id<JavaUtilList> capture$0);

__attribute__((unused)) static AMMVVMCollection_$1 *new_AMMVVMCollection_$1_initWithAMMVVMCollection_withJavaUtilList_(AMMVVMCollection *outer$, id<JavaUtilList> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AMMVVMCollection_$1)

@interface AMMVVMCollection_$2 : NSObject < JavaLangRunnable > {
 @public
  AMMVVMCollection *this$0_;
  IOSLongArray *val$ids_;
}

- (void)run;

- (instancetype)initWithAMMVVMCollection:(AMMVVMCollection *)outer$
                           withLongArray:(IOSLongArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(AMMVVMCollection_$2)

J2OBJC_FIELD_SETTER(AMMVVMCollection_$2, this$0_, AMMVVMCollection *)
J2OBJC_FIELD_SETTER(AMMVVMCollection_$2, val$ids_, IOSLongArray *)

__attribute__((unused)) static void AMMVVMCollection_$2_initWithAMMVVMCollection_withLongArray_(AMMVVMCollection_$2 *self, AMMVVMCollection *outer$, IOSLongArray *capture$0);

__attribute__((unused)) static AMMVVMCollection_$2 *new_AMMVVMCollection_$2_initWithAMMVVMCollection_withLongArray_(AMMVVMCollection *outer$, IOSLongArray *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AMMVVMCollection_$2)

@interface AMMVVMCollection_$3 : NSObject < JavaLangRunnable > {
 @public
  AMMVVMCollection *this$0_;
}

- (void)run;

- (instancetype)initWithAMMVVMCollection:(AMMVVMCollection *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(AMMVVMCollection_$3)

J2OBJC_FIELD_SETTER(AMMVVMCollection_$3, this$0_, AMMVVMCollection *)

__attribute__((unused)) static void AMMVVMCollection_$3_initWithAMMVVMCollection_(AMMVVMCollection_$3 *self, AMMVVMCollection *outer$);

__attribute__((unused)) static AMMVVMCollection_$3 *new_AMMVVMCollection_$3_initWithAMMVVMCollection_(AMMVVMCollection *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AMMVVMCollection_$3)

@implementation AMMVVMCollection

- (instancetype)initWithDKKeyValueStorage:(id<DKKeyValueStorage>)collectionStorage {
  AMMVVMCollection_initWithDKKeyValueStorage_(self, collectionStorage);
  return self;
}

- (id<DKKeyValueEngine>)getEngine {
  return proxyKeyValueEngine_;
}

- (id)getWithId:(jlong)id_ {
  @synchronized(self) {
    if ([((JavaUtilHashMap *) nil_chk(values_)) getWithId:JavaLangLong_valueOfWithLong_(id_)] == nil) {
      id<DKKeyValueItem> res = [((AMMVVMCollection_ProxyKeyValueEngine *) nil_chk(proxyKeyValueEngine_)) getValueWithKey:id_];
      if (res != nil) {
        (void) [values_ putWithId:JavaLangLong_valueOfWithLong_(id_) withId:[self createNewWithDKKeyValueItem:res]];
      }
      else {
        @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J", @"Unable to find user #", id_));
      }
    }
    return [values_ getWithId:JavaLangLong_valueOfWithLong_(id_)];
  }
}

- (void)clear {
  @synchronized(self) {
    [((AMMVVMCollection_ProxyKeyValueEngine *) nil_chk(proxyKeyValueEngine_)) clear];
  }
}

- (void)notifyChangeWithJavaUtilList:(id<JavaUtilList>)items {
  AMMVVMCollection_notifyChangeWithJavaUtilList_(self, items);
}

- (void)notifyRemoveWithLongArray:(IOSLongArray *)ids {
  AMMVVMCollection_notifyRemoveWithLongArray_(self, ids);
}

- (void)notifyClear {
  AMMVVMCollection_notifyClear(self);
}

@end

void AMMVVMCollection_initWithDKKeyValueStorage_(AMMVVMCollection *self, id<DKKeyValueStorage> collectionStorage) {
  (void) NSObject_init(self);
  self->values_ = new_JavaUtilHashMap_init();
  self->collectionStorage_ = collectionStorage;
  self->proxyKeyValueEngine_ = new_AMMVVMCollection_ProxyKeyValueEngine_initWithAMMVVMCollection_(self);
}

void AMMVVMCollection_notifyChangeWithJavaUtilList_(AMMVVMCollection *self, id<JavaUtilList> items) {
  AMMVVMEngine_runOnUiThreadWithJavaLangRunnable_(new_AMMVVMCollection_$1_initWithAMMVVMCollection_withJavaUtilList_(self, items));
}

void AMMVVMCollection_notifyRemoveWithLongArray_(AMMVVMCollection *self, IOSLongArray *ids) {
  AMMVVMEngine_runOnUiThreadWithJavaLangRunnable_(new_AMMVVMCollection_$2_initWithAMMVVMCollection_withLongArray_(self, ids));
}

void AMMVVMCollection_notifyClear(AMMVVMCollection *self) {
  AMMVVMEngine_runOnUiThreadWithJavaLangRunnable_(new_AMMVVMCollection_$3_initWithAMMVVMCollection_(self));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMMVVMCollection)

@implementation AMMVVMCollection_ProxyKeyValueEngine

- (void)addOrUpdateItem:(id<DKKeyValueItem>)item {
  @synchronized(self) {
    (void) [((JavaUtilHashMap *) nil_chk(cache_)) putWithId:JavaLangLong_valueOfWithLong_([((id<DKKeyValueItem>) nil_chk(item)) getEngineId]) withId:item];
    JavaUtilArrayList *res = new_JavaUtilArrayList_init();
    [res addWithId:item];
    AMMVVMCollection_notifyChangeWithJavaUtilList_(this$0_, res);
    IOSByteArray *data = [this$0_ serializeWithDKKeyValueItem:item];
    [((id<DKKeyValueStorage>) nil_chk(this$0_->collectionStorage_)) addOrUpdateItemWithKey:[item getEngineId] withData:data];
  }
}

- (void)addOrUpdateItems:(id<JavaUtilList>)values {
  @synchronized(self) {
    for (id<DKKeyValueItem> __strong t in nil_chk(values)) {
      (void) [((JavaUtilHashMap *) nil_chk(cache_)) putWithId:JavaLangLong_valueOfWithLong_([((id<DKKeyValueItem>) nil_chk(t)) getEngineId]) withId:t];
    }
    AMMVVMCollection_notifyChangeWithJavaUtilList_(this$0_, values);
    JavaUtilArrayList *records = new_JavaUtilArrayList_init();
    for (id<DKKeyValueItem> __strong v in values) {
      [records addWithId:new_DKKeyValueRecord_initWithKey_withData_([((id<DKKeyValueItem>) nil_chk(v)) getEngineId], [this$0_ serializeWithDKKeyValueItem:v])];
    }
    [((id<DKKeyValueStorage>) nil_chk(this$0_->collectionStorage_)) addOrUpdateItems:records];
  }
}

- (void)removeItemWithKey:(jlong)id_ {
  @synchronized(self) {
    (void) [((JavaUtilHashMap *) nil_chk(cache_)) removeWithId:JavaLangLong_valueOfWithLong_(id_)];
    AMMVVMCollection_notifyRemoveWithLongArray_(this$0_, [IOSLongArray newArrayWithLongs:(jlong[]){ id_ } count:1]);
    [((id<DKKeyValueStorage>) nil_chk(this$0_->collectionStorage_)) removeItemWithKey:id_];
  }
}

- (void)removeItemsWithKeys:(IOSLongArray *)ids {
  @synchronized(self) {
    {
      IOSLongArray *a__ = ids;
      jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
      jlong const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jlong l = *b__++;
        (void) [((JavaUtilHashMap *) nil_chk(cache_)) removeWithId:JavaLangLong_valueOfWithLong_(l)];
      }
    }
    AMMVVMCollection_notifyRemoveWithLongArray_(this$0_, ids);
    [((id<DKKeyValueStorage>) nil_chk(this$0_->collectionStorage_)) removeItemsWithKeys:ids];
  }
}

- (void)clear {
  @synchronized(self) {
    [((JavaUtilHashMap *) nil_chk(cache_)) clear];
    AMMVVMCollection_notifyClear(this$0_);
    [((id<DKKeyValueStorage>) nil_chk(this$0_->collectionStorage_)) clear];
  }
}

- (id)getValueWithKey:(jlong)id_ {
  @synchronized(self) {
    if ([((JavaUtilHashMap *) nil_chk(cache_)) containsKeyWithId:JavaLangLong_valueOfWithLong_(id_)]) {
      return [cache_ getWithId:JavaLangLong_valueOfWithLong_(id_)];
    }
    IOSByteArray *data = [((id<DKKeyValueStorage>) nil_chk(this$0_->collectionStorage_)) getValueWithKey:id_];
    if (data != nil) {
      id<DKKeyValueItem> res = [this$0_ deserializeWithByteArray:data];
      (void) [cache_ putWithId:JavaLangLong_valueOfWithLong_([((id<DKKeyValueItem>) nil_chk(res)) getEngineId]) withId:res];
      return res;
    }
    else {
      return nil;
    }
  }
}

- (instancetype)initWithAMMVVMCollection:(AMMVVMCollection *)outer$ {
  AMMVVMCollection_ProxyKeyValueEngine_initWithAMMVVMCollection_(self, outer$);
  return self;
}

@end

void AMMVVMCollection_ProxyKeyValueEngine_initWithAMMVVMCollection_(AMMVVMCollection_ProxyKeyValueEngine *self, AMMVVMCollection *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
  self->cache_ = new_JavaUtilHashMap_init();
}

AMMVVMCollection_ProxyKeyValueEngine *new_AMMVVMCollection_ProxyKeyValueEngine_initWithAMMVVMCollection_(AMMVVMCollection *outer$) {
  AMMVVMCollection_ProxyKeyValueEngine *self = [AMMVVMCollection_ProxyKeyValueEngine alloc];
  AMMVVMCollection_ProxyKeyValueEngine_initWithAMMVVMCollection_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMMVVMCollection_ProxyKeyValueEngine)

@implementation AMMVVMCollection_$1

- (void)run {
  for (id<DKKeyValueItem> __strong i in nil_chk(val$items_)) {
    if ([((JavaUtilHashMap *) nil_chk(this$0_->values_)) containsKeyWithId:JavaLangLong_valueOfWithLong_([((id<DKKeyValueItem>) nil_chk(i)) getEngineId])]) {
      [((AMBaseValueModel *) nil_chk([this$0_->values_ getWithId:JavaLangLong_valueOfWithLong_([i getEngineId])])) updateWithId:i];
    }
  }
}

- (instancetype)initWithAMMVVMCollection:(AMMVVMCollection *)outer$
                        withJavaUtilList:(id<JavaUtilList>)capture$0 {
  AMMVVMCollection_$1_initWithAMMVVMCollection_withJavaUtilList_(self, outer$, capture$0);
  return self;
}

@end

void AMMVVMCollection_$1_initWithAMMVVMCollection_withJavaUtilList_(AMMVVMCollection_$1 *self, AMMVVMCollection *outer$, id<JavaUtilList> capture$0) {
  self->this$0_ = outer$;
  self->val$items_ = capture$0;
  (void) NSObject_init(self);
}

AMMVVMCollection_$1 *new_AMMVVMCollection_$1_initWithAMMVVMCollection_withJavaUtilList_(AMMVVMCollection *outer$, id<JavaUtilList> capture$0) {
  AMMVVMCollection_$1 *self = [AMMVVMCollection_$1 alloc];
  AMMVVMCollection_$1_initWithAMMVVMCollection_withJavaUtilList_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMMVVMCollection_$1)

@implementation AMMVVMCollection_$2

- (void)run {
  {
    IOSLongArray *a__ = val$ids_;
    jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong l = *b__++;
      (void) [((JavaUtilHashMap *) nil_chk(this$0_->values_)) removeWithId:JavaLangLong_valueOfWithLong_(l)];
    }
  }
}

- (instancetype)initWithAMMVVMCollection:(AMMVVMCollection *)outer$
                           withLongArray:(IOSLongArray *)capture$0 {
  AMMVVMCollection_$2_initWithAMMVVMCollection_withLongArray_(self, outer$, capture$0);
  return self;
}

@end

void AMMVVMCollection_$2_initWithAMMVVMCollection_withLongArray_(AMMVVMCollection_$2 *self, AMMVVMCollection *outer$, IOSLongArray *capture$0) {
  self->this$0_ = outer$;
  self->val$ids_ = capture$0;
  (void) NSObject_init(self);
}

AMMVVMCollection_$2 *new_AMMVVMCollection_$2_initWithAMMVVMCollection_withLongArray_(AMMVVMCollection *outer$, IOSLongArray *capture$0) {
  AMMVVMCollection_$2 *self = [AMMVVMCollection_$2 alloc];
  AMMVVMCollection_$2_initWithAMMVVMCollection_withLongArray_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMMVVMCollection_$2)

@implementation AMMVVMCollection_$3

- (void)run {
  [((JavaUtilHashMap *) nil_chk(this$0_->values_)) clear];
}

- (instancetype)initWithAMMVVMCollection:(AMMVVMCollection *)outer$ {
  AMMVVMCollection_$3_initWithAMMVVMCollection_(self, outer$);
  return self;
}

@end

void AMMVVMCollection_$3_initWithAMMVVMCollection_(AMMVVMCollection_$3 *self, AMMVVMCollection *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

AMMVVMCollection_$3 *new_AMMVVMCollection_$3_initWithAMMVVMCollection_(AMMVVMCollection *outer$) {
  AMMVVMCollection_$3 *self = [AMMVVMCollection_$3 alloc];
  AMMVVMCollection_$3_initWithAMMVVMCollection_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMMVVMCollection_$3)
