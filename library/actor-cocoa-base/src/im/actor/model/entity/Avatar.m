//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/entity/Avatar.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/entity/Avatar.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/bser/Bser.h"
#include "im/actor/model/droidkit/bser/BserObject.h"
#include "im/actor/model/droidkit/bser/BserValues.h"
#include "im/actor/model/droidkit/bser/BserWriter.h"
#include "im/actor/model/entity/Avatar.h"
#include "im/actor/model/entity/AvatarImage.h"
#include "java/io/IOException.h"

@interface AMAvatar () {
 @public
  AMAvatarImage *smallImage_;
  AMAvatarImage *largeImage_;
  AMAvatarImage *fullImage_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(AMAvatar, smallImage_, AMAvatarImage *)
J2OBJC_FIELD_SETTER(AMAvatar, largeImage_, AMAvatarImage *)
J2OBJC_FIELD_SETTER(AMAvatar, fullImage_, AMAvatarImage *)

__attribute__((unused)) static void AMAvatar_init(AMAvatar *self);

__attribute__((unused)) static AMAvatar *new_AMAvatar_init() NS_RETURNS_RETAINED;


#line 14
@implementation AMAvatar

+ (AMAvatar *)fromBytesWithByteArray:(IOSByteArray *)data {
  return AMAvatar_fromBytesWithByteArray_(data);
}


#line 24
- (instancetype)initWithAMAvatarImage:(AMAvatarImage *)smallImage
                    withAMAvatarImage:(AMAvatarImage *)largeImage
                    withAMAvatarImage:(AMAvatarImage *)fullImage {
  AMAvatar_initWithAMAvatarImage_withAMAvatarImage_withAMAvatarImage_(self, smallImage, largeImage, fullImage);
  return self;
}


#line 30
- (instancetype)init {
  AMAvatar_init(self);
  return self;
}


#line 34
- (AMAvatarImage *)getSmallImage {
  return smallImage_;
}

- (AMAvatarImage *)getLargeImage {
  return largeImage_;
}

- (AMAvatarImage *)getFullImage {
  return fullImage_;
}


#line 47
- (jboolean)isEqual:(id)o {
  if (self == o) return YES;
  if (o == nil || [self getClass] != [o getClass]) return NO;
  
#line 51
  AMAvatar *avatar = (AMAvatar *) check_class_cast(o, [AMAvatar class]);
  
#line 53
  if (fullImage_ != nil ? ![fullImage_ isEqual:((AMAvatar *) nil_chk(avatar))->fullImage_] : ((AMAvatar *) nil_chk(avatar))->fullImage_ != nil)
#line 54
  return NO;
  if (largeImage_ != nil ? ![largeImage_ isEqual:((AMAvatar *) nil_chk(avatar))->largeImage_] : ((AMAvatar *) nil_chk(avatar))->largeImage_ != nil)
#line 56
  return NO;
  if (smallImage_ != nil ? ![smallImage_ isEqual:((AMAvatar *) nil_chk(avatar))->smallImage_] : ((AMAvatar *) nil_chk(avatar))->smallImage_ != nil)
#line 58
  return NO;
  
#line 60
  return YES;
}


#line 64
- (NSUInteger)hash {
  jint result = smallImage_ != nil ? ((jint) [smallImage_ hash]) : 0;
  result = 31 * result + (largeImage_ != nil ? ((jint) [largeImage_ hash]) : 0);
  result = 31 * result + (fullImage_ != nil ? ((jint) [fullImage_ hash]) : 0);
  return result;
}


#line 72
- (void)parseWithBSBserValues:(BSBserValues *)values {
  IOSByteArray *small = [((BSBserValues *) nil_chk(values)) optBytesWithInt:1];
  if (small != nil) {
    smallImage_ = AMAvatarImage_fromBytesWithByteArray_(small);
  }
  
#line 78
  IOSByteArray *large = [values optBytesWithInt:2];
  if (large != nil) {
    largeImage_ = AMAvatarImage_fromBytesWithByteArray_(large);
  }
  
#line 83
  IOSByteArray *full = [values optBytesWithInt:3];
  if (full != nil) {
    fullImage_ = AMAvatarImage_fromBytesWithByteArray_(full);
  }
}


#line 90
- (void)serializeWithBSBserWriter:(BSBserWriter *)writer {
  if (smallImage_ != nil) {
    [((BSBserWriter *) nil_chk(writer)) writeObjectWithInt:1 withBSBserObject:smallImage_];
  }
  if (largeImage_ != nil) {
    [((BSBserWriter *) nil_chk(writer)) writeObjectWithInt:2 withBSBserObject:smallImage_];
  }
  if (fullImage_ != nil) {
    [((BSBserWriter *) nil_chk(writer)) writeObjectWithInt:3 withBSBserObject:fullImage_];
  }
}

@end


#line 16
AMAvatar *AMAvatar_fromBytesWithByteArray_(IOSByteArray *data) {
  AMAvatar_initialize();
  
#line 17
  return ((AMAvatar *) BSBser_parseWithBSBserObject_withByteArray_(new_AMAvatar_init(), data));
}


#line 24
void AMAvatar_initWithAMAvatarImage_withAMAvatarImage_withAMAvatarImage_(AMAvatar *self, AMAvatarImage *smallImage, AMAvatarImage *largeImage, AMAvatarImage *fullImage) {
  (void) BSBserObject_init(self);
  
#line 25
  self->smallImage_ = smallImage;
  self->largeImage_ = largeImage;
  self->fullImage_ = fullImage;
}


#line 24
AMAvatar *new_AMAvatar_initWithAMAvatarImage_withAMAvatarImage_withAMAvatarImage_(AMAvatarImage *smallImage, AMAvatarImage *largeImage, AMAvatarImage *fullImage) {
  AMAvatar *self = [AMAvatar alloc];
  AMAvatar_initWithAMAvatarImage_withAMAvatarImage_withAMAvatarImage_(self, smallImage, largeImage, fullImage);
  return self;
}

void AMAvatar_init(AMAvatar *self) {
  (void) BSBserObject_init(self);
}


#line 30
AMAvatar *new_AMAvatar_init() {
  AMAvatar *self = [AMAvatar alloc];
  AMAvatar_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMAvatar)
