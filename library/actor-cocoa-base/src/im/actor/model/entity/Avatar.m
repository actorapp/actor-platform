//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/entity/Avatar.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/api/Avatar.h"
#include "im/actor/model/api/AvatarImage.h"
#include "im/actor/model/api/FileLocation.h"
#include "im/actor/model/droidkit/bser/BserValues.h"
#include "im/actor/model/droidkit/bser/BserWriter.h"
#include "im/actor/model/entity/Avatar.h"
#include "im/actor/model/entity/AvatarImage.h"
#include "im/actor/model/entity/FileReference.h"
#include "im/actor/model/entity/WrapperEntity.h"
#include "java/io/IOException.h"

#define AMAvatar_RECORD_ID 10

@interface AMAvatar () {
 @public
  AMAvatarImage *smallImage_;
  AMAvatarImage *largeImage_;
  AMAvatarImage *fullImage_;
}

@end

J2OBJC_FIELD_SETTER(AMAvatar, smallImage_, AMAvatarImage *)
J2OBJC_FIELD_SETTER(AMAvatar, largeImage_, AMAvatarImage *)
J2OBJC_FIELD_SETTER(AMAvatar, fullImage_, AMAvatarImage *)

J2OBJC_STATIC_FIELD_GETTER(AMAvatar, RECORD_ID, jint)

@implementation AMAvatar

- (instancetype)initWithAPAvatar:(APAvatar *)wrapped {
  AMAvatar_initWithAPAvatar_(self, wrapped);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  AMAvatar_initWithByteArray_(self, data);
  return self;
}

- (instancetype)init {
  AMAvatar_init(self);
  return self;
}

- (AMAvatarImage *)getSmallImage {
  return smallImage_;
}

- (AMAvatarImage *)getLargeImage {
  return largeImage_;
}

- (AMAvatarImage *)getFullImage {
  return fullImage_;
}

- (void)parseWithBSBserValues:(BSBserValues *)values {
  if (![((BSBserValues *) nil_chk(values)) getBoolWithInt:5 withBoolean:NO]) {
    APAvatarImage *smallImage = nil;
    APAvatarImage *largeImage = nil;
    APAvatarImage *fullImage = nil;
    IOSByteArray *small = [values optBytesWithInt:1];
    if (small != nil) {
      AMAvatarImage *oldSmallImage = new_AMAvatarImage_initWithByteArray_(small);
      smallImage = new_APAvatarImage_initWithAPFileLocation_withInt_withInt_withInt_([((AMFileReference *) nil_chk([oldSmallImage getFileReference])) getFileLocation], [oldSmallImage getWidth], [oldSmallImage getHeight], [((AMFileReference *) nil_chk([oldSmallImage getFileReference])) getFileSize]);
    }
    IOSByteArray *large = [values optBytesWithInt:2];
    if (large != nil) {
      AMAvatarImage *oldLargeImage = new_AMAvatarImage_initWithByteArray_(large);
      largeImage = new_APAvatarImage_initWithAPFileLocation_withInt_withInt_withInt_([((AMFileReference *) nil_chk([oldLargeImage getFileReference])) getFileLocation], [oldLargeImage getWidth], [oldLargeImage getHeight], [((AMFileReference *) nil_chk([oldLargeImage getFileReference])) getFileSize]);
    }
    IOSByteArray *full = [values optBytesWithInt:3];
    if (full != nil) {
      AMAvatarImage *oldFullImage = new_AMAvatarImage_initWithByteArray_(full);
      fullImage = new_APAvatarImage_initWithAPFileLocation_withInt_withInt_withInt_([((AMFileReference *) nil_chk([oldFullImage getFileReference])) getFileLocation], [oldFullImage getWidth], [oldFullImage getHeight], [((AMFileReference *) nil_chk([oldFullImage getFileReference])) getFileSize]);
    }
    [self setWrappedWithBSBserObject:new_APAvatar_initWithAPAvatarImage_withAPAvatarImage_withAPAvatarImage_(smallImage, largeImage, fullImage)];
  }
  [super parseWithBSBserValues:values];
}

- (void)serializeWithBSBserWriter:(BSBserWriter *)writer {
  [((BSBserWriter *) nil_chk(writer)) writeBoolWithInt:5 withBoolean:YES];
  [super serializeWithBSBserWriter:writer];
}

- (void)applyWrappedWithBSBserObject:(APAvatar *)wrapped {
  if ([((APAvatar *) nil_chk(wrapped)) getSmallImage] != nil) {
    smallImage_ = new_AMAvatarImage_initWithAPAvatarImage_([wrapped getSmallImage]);
  }
  else {
    smallImage_ = nil;
  }
  if ([wrapped getLargeImage] != nil) {
    largeImage_ = new_AMAvatarImage_initWithAPAvatarImage_([wrapped getLargeImage]);
  }
  else {
    largeImage_ = nil;
  }
  if ([wrapped getFullImage] != nil) {
    fullImage_ = new_AMAvatarImage_initWithAPAvatarImage_([wrapped getFullImage]);
  }
  else {
    fullImage_ = nil;
  }
}

- (jboolean)isEqual:(id)o {
  if (self == o) return YES;
  if (o == nil || [self getClass] != [o getClass]) return NO;
  AMAvatar *avatar = (AMAvatar *) check_class_cast(o, [AMAvatar class]);
  if (fullImage_ != nil ? ![fullImage_ isEqual:((AMAvatar *) nil_chk(avatar))->fullImage_] : ((AMAvatar *) nil_chk(avatar))->fullImage_ != nil) return NO;
  if (largeImage_ != nil ? ![largeImage_ isEqual:((AMAvatar *) nil_chk(avatar))->largeImage_] : ((AMAvatar *) nil_chk(avatar))->largeImage_ != nil) return NO;
  if (smallImage_ != nil ? ![smallImage_ isEqual:((AMAvatar *) nil_chk(avatar))->smallImage_] : ((AMAvatar *) nil_chk(avatar))->smallImage_ != nil) return NO;
  return YES;
}

- (NSUInteger)hash {
  jint result = smallImage_ != nil ? ((jint) [smallImage_ hash]) : 0;
  result = 31 * result + (largeImage_ != nil ? ((jint) [largeImage_ hash]) : 0);
  result = 31 * result + (fullImage_ != nil ? ((jint) [fullImage_ hash]) : 0);
  return result;
}

- (APAvatar *)createInstance {
  return new_APAvatar_init();
}

@end

void AMAvatar_initWithAPAvatar_(AMAvatar *self, APAvatar *wrapped) {
  (void) AMWrapperEntity_initWithInt_withBSBserObject_(self, AMAvatar_RECORD_ID, wrapped);
}

AMAvatar *new_AMAvatar_initWithAPAvatar_(APAvatar *wrapped) {
  AMAvatar *self = [AMAvatar alloc];
  AMAvatar_initWithAPAvatar_(self, wrapped);
  return self;
}

void AMAvatar_initWithByteArray_(AMAvatar *self, IOSByteArray *data) {
  (void) AMWrapperEntity_initWithInt_withByteArray_(self, AMAvatar_RECORD_ID, data);
}

AMAvatar *new_AMAvatar_initWithByteArray_(IOSByteArray *data) {
  AMAvatar *self = [AMAvatar alloc];
  AMAvatar_initWithByteArray_(self, data);
  return self;
}

void AMAvatar_init(AMAvatar *self) {
  (void) AMWrapperEntity_initWithInt_withBSBserObject_(self, AMAvatar_RECORD_ID, new_APAvatar_init());
}

AMAvatar *new_AMAvatar_init() {
  AMAvatar *self = [AMAvatar alloc];
  AMAvatar_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMAvatar)
