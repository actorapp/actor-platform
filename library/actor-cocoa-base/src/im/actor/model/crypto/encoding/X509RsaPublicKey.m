//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/crypto/encoding/X509RsaPublicKey.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/crypto/asn1/ASN1.h"
#include "im/actor/model/crypto/asn1/ASN1BitString.h"
#include "im/actor/model/crypto/asn1/ASN1Integer.h"
#include "im/actor/model/crypto/asn1/ASN1Null.h"
#include "im/actor/model/crypto/asn1/ASN1ObjectIdentifier.h"
#include "im/actor/model/crypto/asn1/ASN1Primitive.h"
#include "im/actor/model/crypto/asn1/ASN1Sequence.h"
#include "im/actor/model/crypto/encoding/X509RsaPublicKey.h"
#include "java/io/IOException.h"
#include "java/math/BigInteger.h"

@interface BCX509RsaPublicKey () {
 @public
  JavaMathBigInteger *modulus_;
  JavaMathBigInteger *exponent_;
}

@end

J2OBJC_FIELD_SETTER(BCX509RsaPublicKey, modulus_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(BCX509RsaPublicKey, exponent_, JavaMathBigInteger *)

static NSString *BCX509RsaPublicKey_ALGO_TYPE_ = @"1.2.840.113549.1.1.1";
J2OBJC_STATIC_FIELD_GETTER(BCX509RsaPublicKey, ALGO_TYPE_, NSString *)

@implementation BCX509RsaPublicKey

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)modulus
                    withJavaMathBigInteger:(JavaMathBigInteger *)exponent {
  BCX509RsaPublicKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, modulus, exponent);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  BCX509RsaPublicKey_initWithByteArray_(self, data);
  return self;
}

- (JavaMathBigInteger *)getModulus {
  return modulus_;
}

- (JavaMathBigInteger *)getExponent {
  return exponent_;
}

- (IOSByteArray *)serialize {
  return [new_BCASN1Sequence_initWithBCASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_BCASN1Sequence_initWithBCASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_BCASN1ObjectIdentifier_initWithNSString_(BCX509RsaPublicKey_ALGO_TYPE_), new_BCASN1Null_init() } count:2 type:BCASN1Primitive_class_()]), new_BCASN1BitString_initWithInt_withByteArray_(0, [new_BCASN1Sequence_initWithBCASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_BCASN1Integer_initWithJavaMathBigInteger_(modulus_), new_BCASN1Integer_initWithJavaMathBigInteger_(exponent_) } count:2 type:BCASN1Primitive_class_()]) serialize]) } count:2 type:BCASN1Primitive_class_()]) serialize];
}

@end

void BCX509RsaPublicKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(BCX509RsaPublicKey *self, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  (void) NSObject_init(self);
  self->modulus_ = modulus;
  self->exponent_ = exponent;
}

BCX509RsaPublicKey *new_BCX509RsaPublicKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  BCX509RsaPublicKey *self = [BCX509RsaPublicKey alloc];
  BCX509RsaPublicKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, modulus, exponent);
  return self;
}

void BCX509RsaPublicKey_initWithByteArray_(BCX509RsaPublicKey *self, IOSByteArray *data) {
  (void) NSObject_init(self);
  BCASN1Primitive *root = BCASN1_readObjectWithByteArray_(data);
  if (!([root isKindOfClass:[BCASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  BCASN1Sequence *rootSequence = (BCASN1Sequence *) check_class_cast(BCASN1_readObjectWithByteArray_(data), [BCASN1Sequence class]);
  if ([((BCASN1Sequence *) nil_chk(rootSequence)) size] != 2) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  if (!([[rootSequence getWithInt:0] isKindOfClass:[BCASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  if (!([[rootSequence getWithInt:1] isKindOfClass:[BCASN1BitString class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  BCASN1Sequence *algoHeader = (BCASN1Sequence *) check_class_cast([rootSequence getWithInt:0], [BCASN1Sequence class]);
  if (!([[((BCASN1Sequence *) nil_chk(algoHeader)) getWithInt:0] isKindOfClass:[BCASN1ObjectIdentifier class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  BCASN1ObjectIdentifier *algo = (BCASN1ObjectIdentifier *) check_class_cast([algoHeader getWithInt:0], [BCASN1ObjectIdentifier class]);
  if (![((NSString *) nil_chk([((BCASN1ObjectIdentifier *) nil_chk(algo)) getIdentifier])) isEqual:BCX509RsaPublicKey_ALGO_TYPE_]) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Incorrect type of header: ", [algo getIdentifier]));
  }
  BCASN1BitString *bitString = (BCASN1BitString *) check_class_cast([rootSequence getWithInt:1], [BCASN1BitString class]);
  BCASN1Primitive *keyRoot = BCASN1_readObjectWithByteArray_([((BCASN1BitString *) nil_chk(bitString)) getContent]);
  if (!([keyRoot isKindOfClass:[BCASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  BCASN1Sequence *keySequence = (BCASN1Sequence *) check_class_cast(keyRoot, [BCASN1Sequence class]);
  if ([((BCASN1Sequence *) nil_chk(keySequence)) size] != 2) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  if (!([[keySequence getWithInt:0] isKindOfClass:[BCASN1Integer class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  if (!([[keySequence getWithInt:1] isKindOfClass:[BCASN1Integer class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  BCASN1Integer *modulus = (BCASN1Integer *) check_class_cast([keySequence getWithInt:0], [BCASN1Integer class]);
  BCASN1Integer *exponent = (BCASN1Integer *) check_class_cast([keySequence getWithInt:1], [BCASN1Integer class]);
  self->modulus_ = new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((BCASN1Integer *) nil_chk(modulus)) getData]);
  self->exponent_ = new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((BCASN1Integer *) nil_chk(exponent)) getData]);
}

BCX509RsaPublicKey *new_BCX509RsaPublicKey_initWithByteArray_(IOSByteArray *data) {
  BCX509RsaPublicKey *self = [BCX509RsaPublicKey alloc];
  BCX509RsaPublicKey_initWithByteArray_(self, data);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BCX509RsaPublicKey)
