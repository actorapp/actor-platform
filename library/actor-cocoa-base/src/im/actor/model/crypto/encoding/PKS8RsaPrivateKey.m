//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/crypto/encoding/PKS8RsaPrivateKey.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/crypto/encoding/PKS8RsaPrivateKey.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/crypto/asn1/ASN1.h"
#include "im/actor/model/crypto/asn1/ASN1Integer.h"
#include "im/actor/model/crypto/asn1/ASN1Null.h"
#include "im/actor/model/crypto/asn1/ASN1ObjectIdentifier.h"
#include "im/actor/model/crypto/asn1/ASN1OctetString.h"
#include "im/actor/model/crypto/asn1/ASN1Primitive.h"
#include "im/actor/model/crypto/asn1/ASN1Sequence.h"
#include "im/actor/model/crypto/encoding/PKS8RsaPrivateKey.h"
#include "java/io/IOException.h"
#include "java/math/BigInteger.h"

@interface BCPKS8RsaPrivateKey () {
 @public
  JavaMathBigInteger *modulus_;
  JavaMathBigInteger *exponent_;
}

@end

J2OBJC_FIELD_SETTER(BCPKS8RsaPrivateKey, modulus_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(BCPKS8RsaPrivateKey, exponent_, JavaMathBigInteger *)

static NSString *BCPKS8RsaPrivateKey_ALGO_ = 
#line 19
@"1.2.840.113549.1.1.1";
J2OBJC_STATIC_FIELD_GETTER(BCPKS8RsaPrivateKey, ALGO_, NSString *)


#line 17
@implementation BCPKS8RsaPrivateKey


#line 24
- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)modulus
                    withJavaMathBigInteger:(JavaMathBigInteger *)exponent {
  BCPKS8RsaPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, modulus, exponent);
  return self;
}


#line 29
- (instancetype)initWithByteArray:(IOSByteArray *)encoded {
  BCPKS8RsaPrivateKey_initWithByteArray_(self, encoded);
  return self;
}


#line 87
- (JavaMathBigInteger *)getModulus {
  return modulus_;
}

- (JavaMathBigInteger *)getExponent {
  return exponent_;
}

- (IOSByteArray *)serialize {
  return [new_BCASN1Sequence_initWithBCASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_BCASN1Integer_initWithInt_(
#line 97
  0), new_BCASN1Sequence_initWithBCASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_BCASN1ObjectIdentifier_initWithNSString_(
#line 99
  BCPKS8RsaPrivateKey_ALGO_), new_BCASN1Null_init() } count:2 type:BCASN1Primitive_class_()]), new_BCASN1OctetString_initWithByteArray_(
#line 102
  [new_BCASN1Sequence_initWithBCASN1PrimitiveArray_([IOSObjectArray newArrayWithObjects:(id[]){ new_BCASN1Integer_init(), new_BCASN1Integer_initWithJavaMathBigInteger_(
#line 104
  modulus_), new_BCASN1Integer_init(), new_BCASN1Integer_initWithJavaMathBigInteger_(
#line 106
  exponent_), new_BCASN1Integer_init(), new_BCASN1Integer_init(), new_BCASN1Integer_init(), new_BCASN1Integer_init(), new_BCASN1Integer_init() } count:9 type:BCASN1Primitive_class_()]) serialize]) } count:3 type:BCASN1Primitive_class_()]) serialize];
}

@end


#line 24
void BCPKS8RsaPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(BCPKS8RsaPrivateKey *self, JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  (void) NSObject_init(self);
  
#line 25
  self->modulus_ = modulus;
  self->exponent_ = exponent;
}


#line 24
BCPKS8RsaPrivateKey *new_BCPKS8RsaPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *modulus, JavaMathBigInteger *exponent) {
  BCPKS8RsaPrivateKey *self = [BCPKS8RsaPrivateKey alloc];
  BCPKS8RsaPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, modulus, exponent);
  return self;
}


#line 29
void BCPKS8RsaPrivateKey_initWithByteArray_(BCPKS8RsaPrivateKey *self, IOSByteArray *encoded) {
  (void) NSObject_init(self);
  
#line 30
  BCASN1Primitive *root = BCASN1_readObjectWithByteArray_(encoded);
  if (!([root isKindOfClass:[BCASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  BCASN1Sequence *sequence = (BCASN1Sequence *) check_class_cast(root, [BCASN1Sequence class]);
  
#line 36
  if (!([[((BCASN1Sequence *) nil_chk(sequence)) getWithInt:0] isKindOfClass:[BCASN1Integer class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  if ([((JavaMathBigInteger *) nil_chk([((BCASN1Integer *) nil_chk(((BCASN1Integer *) check_class_cast([sequence getWithInt:0], [BCASN1Integer class])))) asBigInteger])) intValue] != 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 43
  if (!([[sequence getWithInt:1] isKindOfClass:[BCASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  BCASN1Sequence *algoHeader = (BCASN1Sequence *) check_class_cast([sequence getWithInt:1], [BCASN1Sequence class]);
  if (!([[((BCASN1Sequence *) nil_chk(algoHeader)) getWithInt:0] isKindOfClass:[BCASN1ObjectIdentifier class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 51
  BCASN1ObjectIdentifier *algo = (BCASN1ObjectIdentifier *) check_class_cast([algoHeader getWithInt:0], [BCASN1ObjectIdentifier class]);
  if (![((NSString *) nil_chk([((BCASN1ObjectIdentifier *) nil_chk(algo)) getIdentifier])) isEqual:BCPKS8RsaPrivateKey_ALGO_]) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Incorrect type of header: ", [algo getIdentifier]));
  }
  
#line 56
  if (!([[sequence getWithInt:2] isKindOfClass:[BCASN1OctetString class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 60
  IOSByteArray *contents = [((BCASN1OctetString *) nil_chk(((BCASN1OctetString *) check_class_cast([sequence getWithInt:2], [BCASN1OctetString class])))) getData];
  BCASN1Primitive *keyRoot = BCASN1_readObjectWithByteArray_(contents);
  
#line 63
  if (!([keyRoot isKindOfClass:[BCASN1Sequence class]])) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 67
  BCASN1Sequence *keySequence = (BCASN1Sequence *) check_class_cast(keyRoot, [BCASN1Sequence class]);
  if ([((BCASN1Sequence *) nil_chk(keySequence)) size] != 9) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  for (jint i = 0; i < 9; i++) {
    if (!([[keySequence getWithInt:i] isKindOfClass:[BCASN1Integer class]])) {
      @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
    }
  }
  
#line 77
  jint keyVersion = [((JavaMathBigInteger *) nil_chk([((BCASN1Integer *) nil_chk(((BCASN1Integer *) check_class_cast([keySequence getWithInt:0], [BCASN1Integer class])))) asBigInteger])) intValue];
  
#line 79
  if (keyVersion != 0 && keyVersion != 1) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incorrect type of sequence");
  }
  
#line 83
  self->modulus_ = [((BCASN1Integer *) nil_chk(((BCASN1Integer *) check_class_cast([keySequence getWithInt:1], [BCASN1Integer class])))) asBigInteger];
  self->exponent_ = [((BCASN1Integer *) nil_chk(((BCASN1Integer *) check_class_cast([keySequence getWithInt:3], [BCASN1Integer class])))) asBigInteger];
}


#line 29
BCPKS8RsaPrivateKey *new_BCPKS8RsaPrivateKey_initWithByteArray_(IOSByteArray *encoded) {
  BCPKS8RsaPrivateKey *self = [BCPKS8RsaPrivateKey alloc];
  BCPKS8RsaPrivateKey_initWithByteArray_(self, encoded);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BCPKS8RsaPrivateKey)
