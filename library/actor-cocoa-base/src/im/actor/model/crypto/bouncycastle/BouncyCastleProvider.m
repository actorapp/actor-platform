//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/crypto/bouncycastle/BouncyCastleProvider.java
//


#line 1 "/Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/crypto/bouncycastle/BouncyCastleProvider.java"

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/crypto/AesCipher.h"
#include "im/actor/model/crypto/CryptoKeyPair.h"
#include "im/actor/model/crypto/RsaCipher.h"
#include "im/actor/model/crypto/RsaEncryptCipher.h"
#include "im/actor/model/crypto/bouncycastle/BcAesCipher.h"
#include "im/actor/model/crypto/bouncycastle/BcRsaCipher.h"
#include "im/actor/model/crypto/bouncycastle/BcRsaEncryptCipher.h"
#include "im/actor/model/crypto/bouncycastle/BouncyCastleProvider.h"
#include "im/actor/model/crypto/bouncycastle/RandomProvider.h"
#include "im/actor/model/crypto/encoding/PKS8RsaPrivateKey.h"
#include "im/actor/model/crypto/encoding/X509RsaPublicKey.h"
#include "im/actor/model/log/Log.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/bouncycastle/crypto/digests/MD5Digest.h"
#include "org/bouncycastle/crypto/digests/SHA256Digest.h"
#include "org/bouncycastle/crypto/digests/SHA512Digest.h"
#include "org/bouncycastle/crypto/generators/RSAKeyPairGenerator.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/RSAKeyGenerationParameters.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"
#include "org/bouncycastle/crypto/params/RSAPrivateCrtKeyParameters.h"

#define BCBouncyCastleProvider_RSA_CERTAINITY 80
#define BCBouncyCastleProvider_RSA_1024_STREIGHT 1024

@interface BCBouncyCastleProvider () {
 @public
  id<BCRandomProvider> provider_;
}

@end

J2OBJC_FIELD_SETTER(BCBouncyCastleProvider, provider_, id<BCRandomProvider>)

static JavaMathBigInteger *BCBouncyCastleProvider_RSA_EXPONENT_;
J2OBJC_STATIC_FIELD_GETTER(BCBouncyCastleProvider, RSA_EXPONENT_, JavaMathBigInteger *)

J2OBJC_STATIC_FIELD_GETTER(BCBouncyCastleProvider, RSA_CERTAINITY, jint)

J2OBJC_STATIC_FIELD_GETTER(BCBouncyCastleProvider, RSA_1024_STREIGHT, jint)

static JavaMathBigInteger *BCBouncyCastleProvider_ZERO_;
J2OBJC_STATIC_FIELD_GETTER(BCBouncyCastleProvider, ZERO_, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(BCBouncyCastleProvider)


#line 27
@implementation BCBouncyCastleProvider


#line 41
- (instancetype)initWithBCRandomProvider:(id<BCRandomProvider>)provider {
  BCBouncyCastleProvider_initWithBCRandomProvider_(self, provider);
  return self;
}

- (AMCryptoKeyPair *)generateRSA1024KeyPair {
  OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator *generator = new_OrgBouncycastleCryptoGeneratorsRSAKeyPairGenerator_init();
  [generator init__WithOrgBouncycastleCryptoKeyGenerationParameters:new_OrgBouncycastleCryptoParamsRSAKeyGenerationParameters_initWithJavaMathBigInteger_withBCRandomProvider_withInt_withInt_(
#line 49
  BCBouncyCastleProvider_RSA_EXPONENT_,
#line 50
  provider_,
#line 51
  BCBouncyCastleProvider_RSA_1024_STREIGHT,
#line 52
  BCBouncyCastleProvider_RSA_CERTAINITY)];
  AMLog_dWithNSString_withNSString_(@"RSA", @"Starting key generation...");
  OrgBouncycastleCryptoAsymmetricCipherKeyPair *res = [generator generateKeyPair];
  
#line 57
  OrgBouncycastleCryptoParamsRSAKeyParameters *rsaPublicKey = (OrgBouncycastleCryptoParamsRSAKeyParameters *) check_class_cast([((OrgBouncycastleCryptoAsymmetricCipherKeyPair *) nil_chk(res)) getPublic], [OrgBouncycastleCryptoParamsRSAKeyParameters class]);
  IOSByteArray *publicKey = [new_BCX509RsaPublicKey_initWithJavaMathBigInteger_withJavaMathBigInteger_([((OrgBouncycastleCryptoParamsRSAKeyParameters *) nil_chk(rsaPublicKey)) getModulus],
#line 59
  [rsaPublicKey getExponent]) serialize];
  
#line 62
  OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *parameter = (OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) check_class_cast([res getPrivate], [OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters class]);
  IOSByteArray *privateKey = [new_BCPKS8RsaPrivateKey_initWithJavaMathBigInteger_withJavaMathBigInteger_([((OrgBouncycastleCryptoParamsRSAPrivateCrtKeyParameters *) nil_chk(parameter)) getModulus], [parameter getExponent]) serialize];
  
#line 65
  return new_AMCryptoKeyPair_initWithByteArray_withByteArray_(publicKey, privateKey);
}


#line 69
- (id<AMRsaEncryptCipher>)createRSAOAEPSHA1CipherWithByteArray:(IOSByteArray *)key {
  return new_BCBcRsaEncryptCipher_initWithBCRandomProvider_withByteArray_(provider_, key);
}


#line 74
- (id<AMRsaCipher>)createRSAOAEPSHA1CipherWithByteArray:(IOSByteArray *)publicKey
                                          withByteArray:(IOSByteArray *)privateKey {
  return new_BCBcRsaCipher_initWithBCRandomProvider_withByteArray_withByteArray_(provider_, publicKey, privateKey);
}

- (id<AMAesCipher>)createAESCBCPKS7CipherWithByteArray:(IOSByteArray *)key
                                         withByteArray:(IOSByteArray *)iv {
  return new_BCBcAesCipher_initWithByteArray_withByteArray_(key, iv);
}

- (IOSByteArray *)MD5WithByteArray:(IOSByteArray *)data {
  OrgBouncycastleCryptoDigestsMD5Digest *digest = new_OrgBouncycastleCryptoDigestsMD5Digest_init();
  [digest updateWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
  IOSByteArray *res = [IOSByteArray newArrayWithLength:16];
  [digest doFinalWithByteArray:res withInt:0];
  return res;
}


#line 93
- (IOSByteArray *)SHA256WithByteArray:(IOSByteArray *)data {
  OrgBouncycastleCryptoDigestsSHA256Digest *digest = new_OrgBouncycastleCryptoDigestsSHA256Digest_init();
  [digest updateWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
  IOSByteArray *res = [IOSByteArray newArrayWithLength:32];
  [digest doFinalWithByteArray:res withInt:0];
  return res;
}


#line 102
- (IOSByteArray *)SHA512WithByteArray:(IOSByteArray *)data {
  OrgBouncycastleCryptoDigestsSHA512Digest *digest = new_OrgBouncycastleCryptoDigestsSHA512Digest_init();
  [digest updateWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
  IOSByteArray *res = [IOSByteArray newArrayWithLength:64];
  [digest doFinalWithByteArray:res withInt:0];
  return res;
}


#line 111
- (IOSByteArray *)randomBytesWithInt:(jint)length {
  return [((id<BCRandomProvider>) nil_chk(provider_)) randomBytesWithInt:length];
}


#line 116
- (jint)randomIntWithInt:(jint)maxValue {
  return [((id<BCRandomProvider>) nil_chk(provider_)) randomIntWithInt:maxValue];
}

+ (void)initialize {
  if (self == [BCBouncyCastleProvider class]) {
    BCBouncyCastleProvider_RSA_EXPONENT_ = new_JavaMathBigInteger_initWithNSString_(
#line 31
    @"3");
    BCBouncyCastleProvider_ZERO_ = JavaMathBigInteger_valueOfWithLong_(
#line 35
    0);
    J2OBJC_SET_INITIALIZED(BCBouncyCastleProvider)
  }
}

@end


#line 41
void BCBouncyCastleProvider_initWithBCRandomProvider_(BCBouncyCastleProvider *self, id<BCRandomProvider> provider) {
  (void) NSObject_init(self);
  
#line 42
  self->provider_ = provider;
}


#line 41
BCBouncyCastleProvider *new_BCBouncyCastleProvider_initWithBCRandomProvider_(id<BCRandomProvider> provider) {
  BCBouncyCastleProvider *self = [BCBouncyCastleProvider alloc];
  BCBouncyCastleProvider_initWithBCRandomProvider_(self, provider);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BCBouncyCastleProvider)
