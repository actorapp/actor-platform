//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/crypto/CryptoUtils.java
//

#ifndef _AMCryptoUtils_H_
#define _AMCryptoUtils_H_

#include "J2ObjC_header.h"

@class AMCryptoKeyPair;
@class IOSByteArray;
@class IOSCharArray;
@protocol AMCryptoProvider;

@interface AMCryptoUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (IOSByteArray *)fromHexWithNSString:(NSString *)hex;

+ (AMCryptoKeyPair *)generateRSA1024KeyPair;

+ (NSString *)hexWithByteArray:(IOSByteArray *)bytes;

+ (void)init__WithAMCryptoProvider:(id<AMCryptoProvider>)provider OBJC_METHOD_FAMILY_NONE;

+ (IOSByteArray *)MD5WithByteArray:(IOSByteArray *)data;

+ (IOSByteArray *)randomBytesWithInt:(jint)len;

+ (jint)randomIntWithInt:(jint)maxValue;

+ (IOSByteArray *)SHA256WithByteArray:(IOSByteArray *)data;

+ (IOSByteArray *)SHA512WithByteArray:(IOSByteArray *)data;

@end

J2OBJC_STATIC_INIT(AMCryptoUtils)

FOUNDATION_EXPORT IOSCharArray *AMCryptoUtils_hexArray_;
J2OBJC_STATIC_FIELD_GETTER(AMCryptoUtils, hexArray_, IOSCharArray *)

FOUNDATION_EXPORT void AMCryptoUtils_init__WithAMCryptoProvider_(id<AMCryptoProvider> provider);

FOUNDATION_EXPORT AMCryptoKeyPair *AMCryptoUtils_generateRSA1024KeyPair();

FOUNDATION_EXPORT IOSByteArray *AMCryptoUtils_MD5WithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSByteArray *AMCryptoUtils_SHA256WithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT IOSByteArray *AMCryptoUtils_SHA512WithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT jint AMCryptoUtils_randomIntWithInt_(jint maxValue);

FOUNDATION_EXPORT IOSByteArray *AMCryptoUtils_randomBytesWithInt_(jint len);

FOUNDATION_EXPORT NSString *AMCryptoUtils_hexWithByteArray_(IOSByteArray *bytes);

FOUNDATION_EXPORT IOSByteArray *AMCryptoUtils_fromHexWithNSString_(NSString *hex);

FOUNDATION_EXPORT void AMCryptoUtils_init(AMCryptoUtils *self);

FOUNDATION_EXPORT AMCryptoUtils *new_AMCryptoUtils_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(AMCryptoUtils)

typedef AMCryptoUtils ImActorModelCryptoCryptoUtils;

#endif // _AMCryptoUtils_H_
