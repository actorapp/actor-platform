//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/crypto/CryptoUtils.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/CryptoProvider.h"
#include "im/actor/model/crypto/CryptoKeyPair.h"
#include "im/actor/model/crypto/CryptoUtils.h"
#include "java/lang/RuntimeException.h"

@interface AMCryptoUtils ()

+ (jint)fromHexShortWithChar:(jchar)a;

@end

static id<AMCryptoProvider> AMCryptoUtils_provider_;
J2OBJC_STATIC_FIELD_GETTER(AMCryptoUtils, provider_, id<AMCryptoProvider>)
J2OBJC_STATIC_FIELD_SETTER(AMCryptoUtils, provider_, id<AMCryptoProvider>)

__attribute__((unused)) static jint AMCryptoUtils_fromHexShortWithChar_(jchar a);

J2OBJC_INITIALIZED_DEFN(AMCryptoUtils)

IOSCharArray *AMCryptoUtils_hexArray_;

@implementation AMCryptoUtils

+ (void)init__WithAMCryptoProvider:(id<AMCryptoProvider>)provider {
  AMCryptoUtils_init__WithAMCryptoProvider_(provider);
}

+ (AMCryptoKeyPair *)generateRSA1024KeyPair {
  return AMCryptoUtils_generateRSA1024KeyPair();
}

+ (IOSByteArray *)MD5WithByteArray:(IOSByteArray *)data {
  return AMCryptoUtils_MD5WithByteArray_(data);
}

+ (IOSByteArray *)SHA256WithByteArray:(IOSByteArray *)data {
  return AMCryptoUtils_SHA256WithByteArray_(data);
}

+ (IOSByteArray *)SHA512WithByteArray:(IOSByteArray *)data {
  return AMCryptoUtils_SHA512WithByteArray_(data);
}

+ (jint)randomIntWithInt:(jint)maxValue {
  return AMCryptoUtils_randomIntWithInt_(maxValue);
}

+ (IOSByteArray *)randomBytesWithInt:(jint)len {
  return AMCryptoUtils_randomBytesWithInt_(len);
}

+ (NSString *)hexWithByteArray:(IOSByteArray *)bytes {
  return AMCryptoUtils_hexWithByteArray_(bytes);
}

+ (jint)fromHexShortWithChar:(jchar)a {
  return AMCryptoUtils_fromHexShortWithChar_(a);
}

+ (IOSByteArray *)fromHexWithNSString:(NSString *)hex {
  return AMCryptoUtils_fromHexWithNSString_(hex);
}

- (instancetype)init {
  AMCryptoUtils_init(self);
  return self;
}

+ (void)initialize {
  if (self == [AMCryptoUtils class]) {
    AMCryptoUtils_hexArray_ = [@"0123456789abcdef" toCharArray];
    J2OBJC_SET_INITIALIZED(AMCryptoUtils)
  }
}

@end

void AMCryptoUtils_init__WithAMCryptoProvider_(id<AMCryptoProvider> provider) {
  AMCryptoUtils_initialize();
  AMCryptoUtils_provider_ = provider;
}

AMCryptoKeyPair *AMCryptoUtils_generateRSA1024KeyPair() {
  AMCryptoUtils_initialize();
  return [((id<AMCryptoProvider>) nil_chk(AMCryptoUtils_provider_)) generateRSA1024KeyPair];
}

IOSByteArray *AMCryptoUtils_MD5WithByteArray_(IOSByteArray *data) {
  AMCryptoUtils_initialize();
  return [((id<AMCryptoProvider>) nil_chk(AMCryptoUtils_provider_)) MD5WithByteArray:data];
}

IOSByteArray *AMCryptoUtils_SHA256WithByteArray_(IOSByteArray *data) {
  AMCryptoUtils_initialize();
  return [((id<AMCryptoProvider>) nil_chk(AMCryptoUtils_provider_)) SHA256WithByteArray:data];
}

IOSByteArray *AMCryptoUtils_SHA512WithByteArray_(IOSByteArray *data) {
  AMCryptoUtils_initialize();
  return [((id<AMCryptoProvider>) nil_chk(AMCryptoUtils_provider_)) SHA512WithByteArray:data];
}

jint AMCryptoUtils_randomIntWithInt_(jint maxValue) {
  AMCryptoUtils_initialize();
  return [((id<AMCryptoProvider>) nil_chk(AMCryptoUtils_provider_)) randomIntWithInt:maxValue];
}

IOSByteArray *AMCryptoUtils_randomBytesWithInt_(jint len) {
  AMCryptoUtils_initialize();
  return [((id<AMCryptoProvider>) nil_chk(AMCryptoUtils_provider_)) randomBytesWithInt:len];
}

NSString *AMCryptoUtils_hexWithByteArray_(IOSByteArray *bytes) {
  AMCryptoUtils_initialize();
  IOSCharArray *hexChars = [IOSCharArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_ * 2];
  for (jint j = 0; j < bytes->size_; j++) {
    jint v = IOSByteArray_Get(bytes, j) & (jint) 0xFF;
    *IOSCharArray_GetRef(hexChars, j * 2) = IOSCharArray_Get(nil_chk(AMCryptoUtils_hexArray_), URShift32(v, 4));
    *IOSCharArray_GetRef(hexChars, j * 2 + 1) = IOSCharArray_Get(AMCryptoUtils_hexArray_, v & (jint) 0x0F);
  }
  return [NSString stringWithCharacters:hexChars];
}

jint AMCryptoUtils_fromHexShortWithChar_(jchar a) {
  AMCryptoUtils_initialize();
  if (a >= '0' && a <= '9') {
    return a - '0';
  }
  if (a >= 'a' && a <= 'f') {
    return 10 + (a - 'a');
  }
  @throw new_JavaLangRuntimeException_init();
}

IOSByteArray *AMCryptoUtils_fromHexWithNSString_(NSString *hex) {
  AMCryptoUtils_initialize();
  IOSByteArray *res = [IOSByteArray newArrayWithLength:((jint) [((NSString *) nil_chk(hex)) length]) / 2];
  for (jint i = 0; i < res->size_; i++) {
    *IOSByteArray_GetRef(res, i) = (jbyte) ((LShift32(AMCryptoUtils_fromHexShortWithChar_([hex charAtWithInt:i * 2]), 4)) + AMCryptoUtils_fromHexShortWithChar_([hex charAtWithInt:i * 2 + 1]));
  }
  return res;
}

void AMCryptoUtils_init(AMCryptoUtils *self) {
  (void) NSObject_init(self);
}

AMCryptoUtils *new_AMCryptoUtils_init() {
  AMCryptoUtils *self = [AMCryptoUtils alloc];
  AMCryptoUtils_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMCryptoUtils)
