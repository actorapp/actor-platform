//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/org/bouncycastle/math/ec/FixedPointCombMultiplier.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/AbstractECMultiplier.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/FixedPointCombMultiplier.h"
#include "org/bouncycastle/math/ec/FixedPointPreCompInfo.h"
#include "org/bouncycastle/math/ec/FixedPointUtil.h"

@implementation OrgBouncycastleMathEcFixedPointCombMultiplier

- (OrgBouncycastleMathEcECPoint *)multiplyPositiveWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  jint size = OrgBouncycastleMathEcFixedPointUtil_getCombSizeWithOrgBouncycastleMathEcECCurve_(c);
  if ([((JavaMathBigInteger *) nil_chk(k)) bitLength] > size) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"fixed-point comb doesn't support scalars larger than the curve order");
  }
  jint minWidth = [self getWidthForCombSizeWithInt:size];
  OrgBouncycastleMathEcFixedPointPreCompInfo *info = OrgBouncycastleMathEcFixedPointUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_(p, minWidth);
  IOSObjectArray *lookupTable = [((OrgBouncycastleMathEcFixedPointPreCompInfo *) nil_chk(info)) getPreComp];
  jint width = [info getWidth];
  jint d = (size + width - 1) / width;
  OrgBouncycastleMathEcECPoint *R = [((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getInfinity];
  jint top = d * width - 1;
  for (jint i = 0; i < d; ++i) {
    jint index = 0;
    for (jint j = top - i; j >= 0; j -= d) {
      LShiftAssignInt(&index, 1);
      if ([k testBitWithInt:j]) {
        index |= 1;
      }
    }
    R = [((OrgBouncycastleMathEcECPoint *) nil_chk(R)) twicePlusWithOrgBouncycastleMathEcECPoint:IOSObjectArray_Get(nil_chk(lookupTable), index)];
  }
  return R;
}

- (jint)getWidthForCombSizeWithInt:(jint)combSize {
  return combSize > 257 ? 6 : 5;
}

- (instancetype)init {
  OrgBouncycastleMathEcFixedPointCombMultiplier_init(self);
  return self;
}

@end

void OrgBouncycastleMathEcFixedPointCombMultiplier_init(OrgBouncycastleMathEcFixedPointCombMultiplier *self) {
  (void) OrgBouncycastleMathEcAbstractECMultiplier_init(self);
}

OrgBouncycastleMathEcFixedPointCombMultiplier *new_OrgBouncycastleMathEcFixedPointCombMultiplier_init() {
  OrgBouncycastleMathEcFixedPointCombMultiplier *self = [OrgBouncycastleMathEcFixedPointCombMultiplier alloc];
  OrgBouncycastleMathEcFixedPointCombMultiplier_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcFixedPointCombMultiplier)
