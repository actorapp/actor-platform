repositories {
    mavenCentral()
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    }
}

apply plugin: 'war'
apply plugin: 'gwt'

// Configuration

gwt {
    gwtVersion = '2.7.0'
    modules 'im.actor.ActorMessenger'

    compiler {
        strict = true;
        style = "DETAILED"
        // enableClosureCompiler = true;
        disableClassMetadata = true;
        disableCastChecking = true;
    }

    minHeapSize = "512M";
    maxHeapSize = "1024M";
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/gen/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/gen/resources']
        }
    }
}

dependencies {
    providedCompile 'com.google.gwt:gwt-user:2.7.0'
    providedCompile 'org.timepedia.exporter:gwtexporter:2.4.0'
    gwt 'org.timepedia.exporter:gwtexporter:2.4.0'
}

// Copy fresh sources to project

task cleanExternalSources(type: Delete) {
    delete "${projectDir}/src/gen/java/"
    delete "${projectDir}/src/gen/resources/"
}
tasks.clean.dependsOn(cleanExternalSources)

task updateExternalSources(dependsOn: ['cleanExternalSources']) {
    doFirst {
        delete {
            "${projectDir}/src/gen/java/"
        }
        delete {
            "${projectDir}/src/gen/resources/"
        }
        copy {
            from fileTree("${projectDir}/../actor-common/src/main/java/")
            from fileTree("${projectDir}/../actor-bc/src/main/java/")

            into "${projectDir}/src/gen/java/"
        }

        copy {
            from fileTree("${projectDir}/../actor-common/src/main/resources/")

            into "${projectDir}/src/gen/resources/"
        }
    }
}
tasks.compileJava.dependsOn(updateExternalSources)

// Builiding library
task buildPackage(dependsOn: ['war']) {
    doFirst {
        delete "$buildDir/library"

        copy {
            into "$buildDir/library"
            with war
            include "actor/**"
        }
        copy {
            into "$buildDir/library"
            from fileTree("${projectDir}/src/main/library")
        }
    }
}

// Development

task cleanWebApp(type: Delete) {
    delete "${projectDir}/src/main/webapp/"
}

task updateWebApp() {
    doFirst {
        delete "${buildDir}/webapp/"
        delete "${projectDir}/src/main/webapp/"

        copy {
            from fileTree("${projectDir}/../../apps/actor-web/")

            exclude "ActorMessenger/**"
            exclude "actor/**"
            into "${buildDir}/webapp/"
        }

        exec {
            workingDir "${buildDir}/webapp/"
            commandLine 'npm', 'install'
        }
        exec {
            workingDir "${buildDir}/webapp/"
            commandLine 'bower', 'install'
        }
        exec {
            workingDir "${buildDir}/webapp/"
            commandLine 'gulp', 'build:gwt'
        }

        copy {
            from fileTree("${buildDir}/webapp/dist/")

            exclude "ActorMessenger/**"
            exclude "actor/**"
            into "${projectDir}/src/main/webapp/"
        }
    }
}