package im.actor.model.api.parser;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.model.droidkit.bser.Bser;
import im.actor.model.droidkit.bser.BserParser;
import im.actor.model.droidkit.bser.BserObject;
import im.actor.model.droidkit.bser.BserValues;
import im.actor.model.droidkit.bser.BserWriter;
import im.actor.model.droidkit.bser.DataInput;
import im.actor.model.droidkit.bser.DataOutput;
import static im.actor.model.droidkit.bser.Utils.*;
import java.io.IOException;
import im.actor.model.network.parser.*;
import java.util.List;
import java.util.ArrayList;
import im.actor.model.api.updates.*;

public class UpdatesParser extends BaseParser<Update> {
    @Override
    public Update read(int type, byte[] payload) throws IOException {
        switch(type) {
            case 16: return UpdateUserAvatarChanged.fromBytes(payload);
            case 32: return UpdateUserNameChanged.fromBytes(payload);
            case 51: return UpdateUserLocalNameChanged.fromBytes(payload);
            case 87: return UpdateUserPhoneAdded.fromBytes(payload);
            case 88: return UpdateUserPhoneRemoved.fromBytes(payload);
            case 89: return UpdatePhoneTitleChanged.fromBytes(payload);
            case 101: return UpdatePhoneMoved.fromBytes(payload);
            case 96: return UpdateUserEmailAdded.fromBytes(payload);
            case 97: return UpdateUserEmailRemoved.fromBytes(payload);
            case 98: return UpdateEmailTitleChanged.fromBytes(payload);
            case 102: return UpdateEmailMoved.fromBytes(payload);
            case 86: return UpdateUserContactsChanged.fromBytes(payload);
            case 5: return UpdateContactRegistered.fromBytes(payload);
            case 40: return UpdateContactsAdded.fromBytes(payload);
            case 41: return UpdateContactsRemoved.fromBytes(payload);
            case 55: return UpdateMessage.fromBytes(payload);
            case 4: return UpdateMessageSent.fromBytes(payload);
            case 54: return UpdateMessageReceived.fromBytes(payload);
            case 19: return UpdateMessageRead.fromBytes(payload);
            case 50: return UpdateMessageReadByMe.fromBytes(payload);
            case 46: return UpdateMessageDelete.fromBytes(payload);
            case 47: return UpdateChatClear.fromBytes(payload);
            case 48: return UpdateChatDelete.fromBytes(payload);
            case 36: return UpdateGroupInvite.fromBytes(payload);
            case 21: return UpdateGroupUserAdded.fromBytes(payload);
            case 23: return UpdateGroupUserLeave.fromBytes(payload);
            case 24: return UpdateGroupUserKick.fromBytes(payload);
            case 44: return UpdateGroupMembersUpdate.fromBytes(payload);
            case 38: return UpdateGroupTitleChanged.fromBytes(payload);
            case 39: return UpdateGroupAvatarChanged.fromBytes(payload);
            case 6: return UpdateTyping.fromBytes(payload);
            case 7: return UpdateUserOnline.fromBytes(payload);
            case 8: return UpdateUserOffline.fromBytes(payload);
            case 9: return UpdateUserLastSeen.fromBytes(payload);
            case 33: return UpdateGroupOnline.fromBytes(payload);
            case 131: return UpdateParameterChanged.fromBytes(payload);
            case 42: return UpdateConfig.fromBytes(payload);
        }
        throw new IOException();
    }
}
