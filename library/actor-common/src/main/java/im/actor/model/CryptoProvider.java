/*
 * Copyright (C) 2015 Actor LLC. <https://actor.im>
 */

package im.actor.model;

import im.actor.model.crypto.AesCipher;
import im.actor.model.crypto.CryptoKeyPair;
import im.actor.model.crypto.RsaCipher;
import im.actor.model.crypto.RsaEncryptCipher;

/**
 * Provider for Cryptography support
 */
public interface CryptoProvider {

    /**
     * Generation of RSA 1024 bit key pair
     *
     * @return generated key pair
     */
    public CryptoKeyPair generateRSA1024KeyPair();

    /**
     * Create RSA encryption cipher
     *
     * @param publicKey public rsa key
     * @return the RSA encryption cipher for publicKey
     */
    public RsaEncryptCipher createRSAOAEPSHA1Cipher(byte[] publicKey);

    /**
     * Create RSA encryption/decryption cipher
     *
     * @param publicKey  public rsa key
     * @param privateKey private rsa key
     * @return the RSA encryption/decryption cipher for key pair
     */
    public RsaCipher createRSAOAEPSHA1Cipher(byte[] publicKey, byte[] privateKey);

    /**
     * Create AES cipher
     *
     * @param key AES Key
     * @param iv  AES IV
     * @return the AES cipher for keys
     */
    public AesCipher createAESCBCPKS7Cipher(byte[] key, byte[] iv);

    /**
     * Calculate MD5
     *
     * @param data source data
     * @return md5 hash of data
     */
    public byte[] MD5(byte[] data);

    /**
     * Calculate SHA256
     *
     * @param data source data
     * @return sha256 hash of data
     */
    public byte[] SHA256(byte[] data);

    /**
     * Calculate SHA512
     *
     * @param data source data
     * @return sha512 hash of data
     */
    public byte[] SHA512(byte[] data);

    /**
     * Securely generate random bytes
     *
     * @param length bytes length
     * @return generated bytes
     */
    public byte[] randomBytes(int length);

    /**
     * Securely generate integer
     *
     * @param maxValue maximum value of result
     * @return generated integer
     */
    public int randomInt(int maxValue);
}