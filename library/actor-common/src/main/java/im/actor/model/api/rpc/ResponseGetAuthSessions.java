package im.actor.model.api.rpc;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.model.droidkit.bser.Bser;
import im.actor.model.droidkit.bser.BserParser;
import im.actor.model.droidkit.bser.BserObject;
import im.actor.model.droidkit.bser.BserValues;
import im.actor.model.droidkit.bser.BserWriter;
import im.actor.model.droidkit.bser.DataInput;
import im.actor.model.droidkit.bser.DataOutput;
import im.actor.model.droidkit.bser.util.SparseArray;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import com.google.j2objc.annotations.ObjectiveCName;
import static im.actor.model.droidkit.bser.Utils.*;
import java.io.IOException;
import im.actor.model.network.parser.*;
import java.util.List;
import java.util.ArrayList;
import im.actor.model.api.*;

public class ResponseGetAuthSessions extends Response {

    public static final int HEADER = 0x51;
    public static ResponseGetAuthSessions fromBytes(byte[] data) throws IOException {
        return Bser.parse(new ResponseGetAuthSessions(), data);
    }

    private List<AuthSession> userAuths;

    public ResponseGetAuthSessions(@NotNull List<AuthSession> userAuths) {
        this.userAuths = userAuths;
    }

    public ResponseGetAuthSessions() {

    }

    @NotNull
    public List<AuthSession> getUserAuths() {
        return this.userAuths;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        List<AuthSession> _userAuths = new ArrayList<AuthSession>();
        for (int i = 0; i < values.getRepeatedCount(1); i ++) {
            _userAuths.add(new AuthSession());
        }
        this.userAuths = values.getRepeatedObj(1, _userAuths);
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        writer.writeRepeatedObj(1, this.userAuths);
    }

    @Override
    public String toString() {
        String res = "tuple GetAuthSessions{";
        res += "}";
        return res;
    }

    @Override
    public int getHeaderKey() {
        return HEADER;
    }
}
