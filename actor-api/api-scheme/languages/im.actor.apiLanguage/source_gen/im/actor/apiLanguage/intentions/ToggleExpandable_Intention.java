package im.actor.apiLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionDescriptor;

public class ToggleExpandable_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ToggleExpandable_Intention() {
  }
  public String getConcept() {
    return "im.actor.apiLanguage.structure.Struct";
  }
  public String getPresentation() {
    return "ToggleExpandable";
  }
  public String getPersistentStateKey() {
    return "im.actor.apiLanguage.intentions.ToggleExpandable_Intention";
  }
  public String getLanguageFqName() {
    return "im.actor.apiLanguage";
  }
  public IntentionType getType() {
    return IntentionType.NORMAL;
  }
  public boolean isAvailableInChildNodes() {
    return false;
  }
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:52c9340c-ed61-4b09-bbfb-18570a524404(im.actor.apiLanguage.intentions)", "2838010799854846725");
  }
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ToggleExpandable_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }
    public String getDescription(final SNode node, final EditorContext editorContext) {
      if (SPropertyOperations.getBoolean(node, MetaAdapterFactory.getProperty(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68208d1L, 0x2762a3c93a11e7eaL, "isExpandable"))) {
        return "Disable Expandable";
      } else {
        return "Enable Expandable";
      }
    }
    public void execute(final SNode node, final EditorContext editorContext) {
      SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68208d1L, 0x2762a3c93a11e7eaL, "isExpandable"), "" + (!(SPropertyOperations.getBoolean(node, MetaAdapterFactory.getProperty(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68208d1L, 0x2762a3c93a11e7eaL, "isExpandable")))));
    }
    public IntentionDescriptor getDescriptor() {
      return ToggleExpandable_Intention.this;
    }
  }
}
