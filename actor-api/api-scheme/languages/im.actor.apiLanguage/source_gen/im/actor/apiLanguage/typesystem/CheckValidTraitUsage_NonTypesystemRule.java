package im.actor.apiLanguage.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelUtil_new;

public class CheckValidTraitUsage_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public CheckValidTraitUsage_NonTypesystemRule() {
  }
  public void applyRule(final SNode iStruct, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode a : SLinkOperations.getChildren(iStruct, MetaAdapterFactory.getContainmentLink(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b69665d2L, 0x20977a66b6966607L, "attributes"))) {
      if (!((SNodeOperations.isInstanceOf(SLinkOperations.getTarget(a, MetaAdapterFactory.getContainmentLink(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68879a3L, 0x20977a66b689e4b7L, "type")), MetaAdapterFactory.getConcept(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x514b58ebb61ff524L, "im.actor.apiLanguage.structure.TraitType")) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(a, MetaAdapterFactory.getContainmentLink(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68879a3L, 0x20977a66b689e4b7L, "type")), MetaAdapterFactory.getConcept(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b6820f1fL, "im.actor.apiLanguage.structure.Optional")) && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(a, MetaAdapterFactory.getContainmentLink(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68879a3L, 0x20977a66b689e4b7L, "type")), MetaAdapterFactory.getConcept(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b6820f1fL, "im.actor.apiLanguage.structure.Optional")), MetaAdapterFactory.getContainmentLink(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b6820f1fL, 0xb2770c7e7932897L, "type")), MetaAdapterFactory.getConcept(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x514b58ebb61ff524L, "im.actor.apiLanguage.structure.TraitType"))))) {
        continue;
      }

      SNode trait = SNodeOperations.cast(SLinkOperations.getTarget(a, MetaAdapterFactory.getContainmentLink(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68879a3L, 0x20977a66b689e4b7L, "type")), MetaAdapterFactory.getConcept(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x514b58ebb61ff524L, "im.actor.apiLanguage.structure.TraitType"));
      if (SPropertyOperations.getBoolean(SLinkOperations.getTarget(trait, MetaAdapterFactory.getReferenceLink(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x514b58ebb61ff524L, 0x514b58ebb6244b48L, "trait")), MetaAdapterFactory.getProperty(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x49b8c233699cfad0L, 0x5cfd033037d676eaL, "isContainer"))) {
        continue;
      }

      if (SPropertyOperations.getInteger(a, MetaAdapterFactory.getProperty(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68879a3L, 0x20977a66b689e4d5L, "id")) == 1) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(a, "Trait can't be first argument", "r:6e7b088d-9a56-43ad-8e6a-4a3f15c66539(im.actor.apiLanguage.typesystem)", "5857873509722370106", null, errorTarget);
        }
        continue;
      }

      boolean founded = false;
      for (SNode n : ListSequence.fromList(SLinkOperations.getChildren(iStruct, MetaAdapterFactory.getContainmentLink(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b69665d2L, 0x20977a66b6966607L, "attributes")))) {
        if (SPropertyOperations.getInteger(n, MetaAdapterFactory.getProperty(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68879a3L, 0x20977a66b689e4d5L, "id")) == SPropertyOperations.getInteger(a, MetaAdapterFactory.getProperty(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68879a3L, 0x20977a66b689e4d5L, "id")) - 1) {
          founded = true;
          if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(n, MetaAdapterFactory.getContainmentLink(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b68879a3L, 0x20977a66b689e4b7L, "type")), MetaAdapterFactory.getConcept(0x77fdf769432b4edeL, 0x8171050f8dee73fcL, 0x20977a66b682090cL, "im.actor.apiLanguage.structure.Int32")))) {
            {
              MessageTarget errorTarget = new NodeMessageTarget();
              IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(n, "Trait type field doesn't have int32 type", "r:6e7b088d-9a56-43ad-8e6a-4a3f15c66539(im.actor.apiLanguage.typesystem)", "5857873509722703775", null, errorTarget);
            }
          }
        }
      }

      if (!(founded)) {
        {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(a, "Trait doesn't have related type field", "r:6e7b088d-9a56-43ad-8e6a-4a3f15c66539(im.actor.apiLanguage.typesystem)", "5857873509722698059", null, errorTarget);
        }
      }
    }
  }
  public String getApplicableConceptFQName() {
    return "im.actor.apiLanguage.structure.IStruct";
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getQualifiedName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }
  public boolean overrides() {
    return false;
  }
}
