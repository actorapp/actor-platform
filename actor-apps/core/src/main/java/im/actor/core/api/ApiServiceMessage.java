package im.actor.core.api;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.runtime.bser.*;
import im.actor.runtime.collections.*;
import static im.actor.runtime.bser.Utils.*;
import im.actor.core.network.parser.*;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import com.google.j2objc.annotations.ObjectiveCName;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;

public class ApiServiceMessage extends ApiMessage {

    private String text;
    private ApiServiceEx ext;

    public ApiServiceMessage(@NotNull String text, @Nullable ApiServiceEx ext) {
        this.text = text;
        this.ext = ext;
    }

    public ApiServiceMessage() {

    }

    public int getHeader() {
        return 2;
    }

    @NotNull
    public String getText() {
        return this.text;
    }

    @Nullable
    public ApiServiceEx getExt() {
        return this.ext;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.text = values.getString(1);
        if (values.optBytes(3) != null) {
            this.ext = ApiServiceEx.fromBytes(values.getBytes(3));
        }
        if (values.hasRemaining()) {
            setUnmappedObjects(values.buildRemaining());
        }
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        if (this.text == null) {
            throw new IOException();
        }
        writer.writeString(1, this.text);
        if (this.ext != null) {
            writer.writeBytes(3, this.ext.buildContainer());
        }
        if (this.getUnmappedObjects() != null) {
            SparseArray<Object> unmapped = this.getUnmappedObjects();
            for (int i = 0; i < unmapped.size(); i++) {
                int key = unmapped.keyAt(i);
                writer.writeUnmapped(key, unmapped.get(key));
            }
        }
    }

    @Override
    public String toString() {
        String res = "struct ServiceMessage{";
        res += "text=" + this.text;
        res += ", ext=" + (this.ext != null ? "set":"empty");
        res += "}";
        return res;
    }

}
