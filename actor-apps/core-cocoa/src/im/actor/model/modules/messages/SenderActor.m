//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-apps/core/src/main/java/im/actor/model/modules/messages/SenderActor.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/FileSystemProvider.h"
#include "im/actor/model/api/DocumentEx.h"
#include "im/actor/model/api/DocumentExPhoto.h"
#include "im/actor/model/api/DocumentExVideo.h"
#include "im/actor/model/api/DocumentMessage.h"
#include "im/actor/model/api/FastThumb.h"
#include "im/actor/model/api/Message.h"
#include "im/actor/model/api/OutPeer.h"
#include "im/actor/model/api/Peer.h"
#include "im/actor/model/api/TextMessage.h"
#include "im/actor/model/api/TextMessageEx.h"
#include "im/actor/model/api/base/SeqUpdate.h"
#include "im/actor/model/api/rpc/RequestSendMessage.h"
#include "im/actor/model/api/rpc/ResponseSeqDate.h"
#include "im/actor/model/api/updates/UpdateMessageSent.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/actors/Environment.h"
#include "im/actor/model/droidkit/engine/PreferencesStorage.h"
#include "im/actor/model/entity/FileReference.h"
#include "im/actor/model/entity/Group.h"
#include "im/actor/model/entity/GroupMember.h"
#include "im/actor/model/entity/Message.h"
#include "im/actor/model/entity/MessageState.h"
#include "im/actor/model/entity/Peer.h"
#include "im/actor/model/entity/PeerType.h"
#include "im/actor/model/entity/User.h"
#include "im/actor/model/entity/content/AbsContent.h"
#include "im/actor/model/entity/content/DocumentContent.h"
#include "im/actor/model/entity/content/FastThumb.h"
#include "im/actor/model/entity/content/FileLocalSource.h"
#include "im/actor/model/entity/content/FileRemoteSource.h"
#include "im/actor/model/entity/content/FileSource.h"
#include "im/actor/model/entity/content/PhotoContent.h"
#include "im/actor/model/entity/content/TextContent.h"
#include "im/actor/model/entity/content/VideoContent.h"
#include "im/actor/model/modules/Files.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/Updates.h"
#include "im/actor/model/modules/file/UploadManager.h"
#include "im/actor/model/modules/messages/ConversationActor.h"
#include "im/actor/model/modules/messages/SenderActor.h"
#include "im/actor/model/modules/messages/entity/PendingMessage.h"
#include "im/actor/model/modules/messages/entity/PendingMessagesStorage.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/modules/utils/RandomUtils.h"
#include "im/actor/model/network/RpcCallback.h"
#include "im/actor/model/network/RpcException.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface ImActorModelModulesMessagesSenderActor () {
 @public
  ImActorModelModulesMessagesEntityPendingMessagesStorage *pendingMessages_;
  jlong lastSendDate_;
}

- (jlong)createPendingDate;

- (void)performUploadFileWithLong:(jlong)rid
                     withNSString:(NSString *)descriptor
                     withNSString:(NSString *)fileName;

- (void)onFileUploadedWithLong:(jlong)rid
           withAMFileReference:(AMFileReference *)fileReference;

- (void)onFileUploadErrorWithLong:(jlong)rid;

- (void)performSendContentWithAMPeer:(AMPeer *)peer
                            withLong:(jlong)rid
                    withAMAbsContent:(AMAbsContent *)content;

- (void)onSentWithAMPeer:(AMPeer *)peer
                withLong:(jlong)rid;

- (void)onErrorWithAMPeer:(AMPeer *)peer
                 withLong:(jlong)rid;

- (void)savePending;

- (ImActorModelModulesMessagesEntityPendingMessage *)findPendingWithLong:(jlong)rid;

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor, pendingMessages_, ImActorModelModulesMessagesEntityPendingMessagesStorage *)

static NSString *ImActorModelModulesMessagesSenderActor_PREFERENCES_ = @"sender_pending";
J2OBJC_STATIC_FIELD_GETTER(ImActorModelModulesMessagesSenderActor, PREFERENCES_, NSString *)

__attribute__((unused)) static jlong ImActorModelModulesMessagesSenderActor_createPendingDate(ImActorModelModulesMessagesSenderActor *self);

__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(ImActorModelModulesMessagesSenderActor *self, jlong rid, NSString *descriptor, NSString *fileName);

__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_onFileUploadedWithLong_withAMFileReference_(ImActorModelModulesMessagesSenderActor *self, jlong rid, AMFileReference *fileReference);

__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_onFileUploadErrorWithLong_(ImActorModelModulesMessagesSenderActor *self, jlong rid);

__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid, AMAbsContent *content);

__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid);

__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid);

__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_savePending(ImActorModelModulesMessagesSenderActor *self);

__attribute__((unused)) static ImActorModelModulesMessagesEntityPendingMessage *ImActorModelModulesMessagesSenderActor_findPendingWithLong_(ImActorModelModulesMessagesSenderActor *self, jlong rid);

@interface ImActorModelModulesMessagesSenderActor_SendDocument () {
 @public
  AMPeer *peer_;
  AMFastThumb *fastThumb_;
  NSString *descriptor_;
  NSString *fileName_;
  NSString *mimeType_;
  jint fileSize_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendDocument, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendDocument, fastThumb_, AMFastThumb *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendDocument, descriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendDocument, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendDocument, mimeType_, NSString *)

@interface ImActorModelModulesMessagesSenderActor_SendPhoto () {
 @public
  AMPeer *peer_;
  AMFastThumb *fastThumb_;
  NSString *descriptor_;
  NSString *fileName_;
  jint fileSize_;
  jint w_;
  jint h_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendPhoto, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendPhoto, fastThumb_, AMFastThumb *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendPhoto, descriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendPhoto, fileName_, NSString *)

@interface ImActorModelModulesMessagesSenderActor_SendVideo () {
 @public
  AMPeer *peer_;
  NSString *fileName_;
  jint w_;
  jint h_;
  jint duration_;
  AMFastThumb *fastThumb_;
  NSString *descriptor_;
  jint fileSize_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendVideo, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendVideo, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendVideo, fastThumb_, AMFastThumb *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendVideo, descriptor_, NSString *)

@interface ImActorModelModulesMessagesSenderActor_SendText () {
 @public
  AMPeer *peer_;
  NSString *text_;
  NSString *markDownText_;
  JavaUtilArrayList *mentions_;
  jboolean autoDetect_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendText, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendText, text_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendText, markDownText_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_SendText, mentions_, JavaUtilArrayList *)

@interface ImActorModelModulesMessagesSenderActor_MessageSent () {
 @public
  AMPeer *peer_;
  jlong rid_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_MessageSent, peer_, AMPeer *)

@interface ImActorModelModulesMessagesSenderActor_MessageError () {
 @public
  AMPeer *peer_;
  jlong rid_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_MessageError, peer_, AMPeer *)

@interface ImActorModelModulesMessagesSenderActor_$1 : NSObject < AMRpcCallback > {
 @public
  ImActorModelModulesMessagesSenderActor *this$0_;
  AMPeer *val$peer_;
  jlong val$rid_;
  APPeer *val$apiPeer_;
}

- (void)onResult:(APResponseSeqDate *)response;

- (void)onError:(AMRpcException *)e;

- (instancetype)initWithImActorModelModulesMessagesSenderActor:(ImActorModelModulesMessagesSenderActor *)outer$
                                                    withAMPeer:(AMPeer *)capture$0
                                                      withLong:(jlong)capture$1
                                                    withAPPeer:(APPeer *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesMessagesSenderActor_$1)

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_$1, this$0_, ImActorModelModulesMessagesSenderActor *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_$1, val$peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesSenderActor_$1, val$apiPeer_, APPeer *)

__attribute__((unused)) static void ImActorModelModulesMessagesSenderActor_$1_initWithImActorModelModulesMessagesSenderActor_withAMPeer_withLong_withAPPeer_(ImActorModelModulesMessagesSenderActor_$1 *self, ImActorModelModulesMessagesSenderActor *outer$, AMPeer *capture$0, jlong capture$1, APPeer *capture$2);

__attribute__((unused)) static ImActorModelModulesMessagesSenderActor_$1 *new_ImActorModelModulesMessagesSenderActor_$1_initWithImActorModelModulesMessagesSenderActor_withAMPeer_withLong_withAPPeer_(ImActorModelModulesMessagesSenderActor *outer$, AMPeer *capture$0, jlong capture$1, APPeer *capture$2) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesMessagesSenderActor_$1)

@implementation ImActorModelModulesMessagesSenderActor

- (instancetype)initWithImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  ImActorModelModulesMessagesSenderActor_initWithImActorModelModulesModules_(self, messenger);
  return self;
}

- (void)preStart {
  pendingMessages_ = new_ImActorModelModulesMessagesEntityPendingMessagesStorage_init();
  IOSByteArray *p = [((id<DKPreferencesStorage>) nil_chk([self preferences])) getBytesWithKey:ImActorModelModulesMessagesSenderActor_PREFERENCES_];
  if (p != nil) {
    @try {
      pendingMessages_ = ImActorModelModulesMessagesEntityPendingMessagesStorage_fromBytesWithByteArray_(p);
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    }
  }
  jboolean isChanged = NO;
  JavaUtilArrayList *messages = [((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages];
  {
    IOSObjectArray *a__ = [messages toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(messages)) size] type:ImActorModelModulesMessagesEntityPendingMessage_class_()]];
    ImActorModelModulesMessagesEntityPendingMessage * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ImActorModelModulesMessagesEntityPendingMessage * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ImActorModelModulesMessagesEntityPendingMessage *pending = *b__++;
      if ([[((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(pending)) getContent] isKindOfClass:[AMTextContent class]]) {
        ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(self, [pending getPeer], [pending getRid], [pending getContent]);
      }
      else if ([[pending getContent] isKindOfClass:[AMDocumentContent class]]) {
        AMDocumentContent *documentContent = (AMDocumentContent *) check_class_cast([pending getContent], [AMDocumentContent class]);
        if ([[((AMDocumentContent *) nil_chk(documentContent)) getSource] isKindOfClass:[AMFileLocalSource class]]) {
          if ([((AMConfiguration *) nil_chk([self config])) getFileSystemProvider] != nil && [((id<AMFileSystemProvider>) nil_chk([((AMConfiguration *) nil_chk([self config])) getFileSystemProvider])) isFsPersistent]) {
            ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, [pending getRid], [((AMFileLocalSource *) nil_chk(((AMFileLocalSource *) check_class_cast([documentContent getSource], [AMFileLocalSource class])))) getFileDescriptor], [((AMFileLocalSource *) nil_chk(((AMFileLocalSource *) check_class_cast([documentContent getSource], [AMFileLocalSource class])))) getFileName]);
          }
          else {
            id<JavaUtilList> rids = new_JavaUtilArrayList_init();
            [rids addWithId:JavaLangLong_valueOfWithLong_([pending getRid])];
            [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:[pending getPeer]])) sendWithId:new_ImActorModelModulesMessagesConversationActor_MessagesDeleted_initWithJavaUtilList_(rids)];
            [((JavaUtilArrayList *) nil_chk([pendingMessages_ getPendingMessages])) removeWithId:pending];
            isChanged = YES;
          }
        }
        else {
          ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(self, [pending getPeer], [pending getRid], [pending getContent]);
        }
      }
    }
  }
  if (isChanged) {
    ImActorModelModulesMessagesSenderActor_savePending(self);
  }
}

- (jlong)createPendingDate {
  return ImActorModelModulesMessagesSenderActor_createPendingDate(self);
}

- (void)doSendTextWithAMPeer:(AMPeer *)peer
                withNSString:(NSString *)text
       withJavaUtilArrayList:(JavaUtilArrayList *)mentions
                withNSString:(NSString *)markDownText
                 withBoolean:(jboolean)autoDetect {
  text = [((NSString *) nil_chk(text)) trim];
  jlong rid = ImActorModelModulesUtilsRandomUtils_nextRid();
  jlong date = ImActorModelModulesMessagesSenderActor_createPendingDate(self);
  jlong sortDate = date + 365 * 24 * 60 * 60 * 1000LL;
  if (autoDetect) {
    mentions = new_JavaUtilArrayList_init();
    if ([((AMPeer *) nil_chk(peer)) getPeerType] == AMPeerTypeEnum_get_GROUP()) {
      AMGroup *group = [self getGroupWithInt:[peer getPeerId]];
      NSString *lowText = [((NSString *) nil_chk(text)) lowercaseString];
      for (AMGroupMember * __strong member in nil_chk([((AMGroup *) nil_chk(group)) getMembers])) {
        AMUser *user = [self getUserWithInt:[((AMGroupMember *) nil_chk(member)) getUid]];
        if ([((AMUser *) nil_chk(user)) getNick] != nil) {
          NSString *nick = JreStrcat("C$", '@', [((NSString *) nil_chk([user getNick])) lowercaseString]);
          if ([((NSString *) nil_chk(lowText)) contains:JreStrcat("$C", nick, ':')] || [lowText contains:JreStrcat("$C", nick, ' ')] || [lowText contains:JreStrcat("C$", ' ', nick)] || [lowText hasSuffix:nick] || [lowText isEqual:nick]) {
            [mentions addWithId:JavaLangInteger_valueOfWithInt_([user getUid])];
          }
        }
      }
    }
  }
  AMTextContent *content = AMTextContent_createWithNSString_withNSString_withJavaUtilArrayList_(text, markDownText, mentions);
  AMMessage *message = new_AMMessage_initWithLong_withLong_withLong_withInt_withAMMessageStateEnum_withAMAbsContent_(rid, sortDate, date, [self myUid], AMMessageStateEnum_get_PENDING(), content);
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:message];
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:new_ImActorModelModulesMessagesEntityPendingMessage_initWithAMPeer_withLong_withAMAbsContent_(peer, rid, content)];
  ImActorModelModulesMessagesSenderActor_savePending(self);
  ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(self, peer, rid, content);
}

- (void)doSendDocumentWithAMPeer:(AMPeer *)peer
                    withNSString:(NSString *)fileName
                    withNSString:(NSString *)mimeType
                         withInt:(jint)fileSize
                 withAMFastThumb:(AMFastThumb *)fastThumb
                    withNSString:(NSString *)descriptor {
  jlong rid = ImActorModelModulesUtilsRandomUtils_nextRid();
  jlong date = ImActorModelModulesMessagesSenderActor_createPendingDate(self);
  jlong sortDate = date + 365 * 24 * 60 * 60 * 1000LL;
  AMDocumentContent *documentContent = AMDocumentContent_createLocalWithNSString_withInt_withNSString_withNSString_withAMFastThumb_(fileName, fileSize, descriptor, mimeType, fastThumb);
  AMMessage *message = new_AMMessage_initWithLong_withLong_withLong_withInt_withAMMessageStateEnum_withAMAbsContent_(rid, sortDate, date, [self myUid], AMMessageStateEnum_get_PENDING(), documentContent);
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:message];
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:new_ImActorModelModulesMessagesEntityPendingMessage_initWithAMPeer_withLong_withAMAbsContent_(peer, rid, documentContent)];
  ImActorModelModulesMessagesSenderActor_savePending(self);
  ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}

- (void)doSendPhotoWithAMPeer:(AMPeer *)peer
              withAMFastThumb:(AMFastThumb *)fastThumb
                 withNSString:(NSString *)descriptor
                 withNSString:(NSString *)fileName
                      withInt:(jint)fileSize
                      withInt:(jint)w
                      withInt:(jint)h {
  jlong rid = ImActorModelModulesUtilsRandomUtils_nextRid();
  jlong date = ImActorModelModulesMessagesSenderActor_createPendingDate(self);
  jlong sortDate = date + 365 * 24 * 60 * 60 * 1000LL;
  AMPhotoContent *photoContent = AMPhotoContent_createLocalPhotoWithNSString_withNSString_withInt_withInt_withInt_withAMFastThumb_(descriptor, fileName, fileSize, w, h, fastThumb);
  AMMessage *message = new_AMMessage_initWithLong_withLong_withLong_withInt_withAMMessageStateEnum_withAMAbsContent_(rid, sortDate, date, [self myUid], AMMessageStateEnum_get_PENDING(), photoContent);
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:message];
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:new_ImActorModelModulesMessagesEntityPendingMessage_initWithAMPeer_withLong_withAMAbsContent_(peer, rid, photoContent)];
  ImActorModelModulesMessagesSenderActor_savePending(self);
  ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}

- (void)doSendVideoWithAMPeer:(AMPeer *)peer
                 withNSString:(NSString *)fileName
                      withInt:(jint)w
                      withInt:(jint)h
                      withInt:(jint)duration
              withAMFastThumb:(AMFastThumb *)fastThumb
                 withNSString:(NSString *)descriptor
                      withInt:(jint)fileSize {
  jlong rid = ImActorModelModulesUtilsRandomUtils_nextRid();
  jlong date = ImActorModelModulesMessagesSenderActor_createPendingDate(self);
  jlong sortDate = date + 365 * 24 * 60 * 60 * 1000LL;
  AMVideoContent *videoContent = AMVideoContent_createLocalVideoWithNSString_withNSString_withInt_withInt_withInt_withInt_withAMFastThumb_(descriptor, fileName, fileSize, w, h, duration, fastThumb);
  AMMessage *message = new_AMMessage_initWithLong_withLong_withLong_withInt_withAMMessageStateEnum_withAMAbsContent_(rid, sortDate, date, [self myUid], AMMessageStateEnum_get_PENDING(), videoContent);
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:message];
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(pendingMessages_)) getPendingMessages])) addWithId:new_ImActorModelModulesMessagesEntityPendingMessage_initWithAMPeer_withLong_withAMAbsContent_(peer, rid, videoContent)];
  ImActorModelModulesMessagesSenderActor_savePending(self);
  ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}

- (void)performUploadFileWithLong:(jlong)rid
                     withNSString:(NSString *)descriptor
                     withNSString:(NSString *)fileName {
  ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(self, rid, descriptor, fileName);
}

- (void)onFileUploadedWithLong:(jlong)rid
           withAMFileReference:(AMFileReference *)fileReference {
  ImActorModelModulesMessagesSenderActor_onFileUploadedWithLong_withAMFileReference_(self, rid, fileReference);
}

- (void)onFileUploadErrorWithLong:(jlong)rid {
  ImActorModelModulesMessagesSenderActor_onFileUploadErrorWithLong_(self, rid);
}

- (void)performSendContentWithAMPeer:(AMPeer *)peer
                            withLong:(jlong)rid
                    withAMAbsContent:(AMAbsContent *)content {
  ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(self, peer, rid, content);
}

- (void)onSentWithAMPeer:(AMPeer *)peer
                withLong:(jlong)rid {
  ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(self, peer, rid);
}

- (void)onErrorWithAMPeer:(AMPeer *)peer
                 withLong:(jlong)rid {
  ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(self, peer, rid);
}

- (void)savePending {
  ImActorModelModulesMessagesSenderActor_savePending(self);
}

- (ImActorModelModulesMessagesEntityPendingMessage *)findPendingWithLong:(jlong)rid {
  return ImActorModelModulesMessagesSenderActor_findPendingWithLong_(self, rid);
}

- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_SendText class]]) {
    ImActorModelModulesMessagesSenderActor_SendText *sendText = (ImActorModelModulesMessagesSenderActor_SendText *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_SendText class]);
    [self doSendTextWithAMPeer:[((ImActorModelModulesMessagesSenderActor_SendText *) nil_chk(sendText)) getPeer] withNSString:[sendText getText] withJavaUtilArrayList:[sendText getMentions] withNSString:[sendText getMarkDownText] withBoolean:[sendText isAutoDetect]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_MessageSent class]]) {
    ImActorModelModulesMessagesSenderActor_MessageSent *messageSent = (ImActorModelModulesMessagesSenderActor_MessageSent *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_MessageSent class]);
    ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(self, [((ImActorModelModulesMessagesSenderActor_MessageSent *) nil_chk(messageSent)) getPeer], [messageSent getRid]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_MessageError class]]) {
    ImActorModelModulesMessagesSenderActor_MessageError *messageError = (ImActorModelModulesMessagesSenderActor_MessageError *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_MessageError class]);
    ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(self, [((ImActorModelModulesMessagesSenderActor_MessageError *) nil_chk(messageError)) getPeer], [messageError getRid]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_SendDocument class]]) {
    ImActorModelModulesMessagesSenderActor_SendDocument *sendDocument = (ImActorModelModulesMessagesSenderActor_SendDocument *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_SendDocument class]);
    [self doSendDocumentWithAMPeer:[((ImActorModelModulesMessagesSenderActor_SendDocument *) nil_chk(sendDocument)) getPeer] withNSString:[sendDocument getFileName] withNSString:[sendDocument getMimeType] withInt:[sendDocument getFileSize] withAMFastThumb:[sendDocument getFastThumb] withNSString:[sendDocument getDescriptor]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UploadCompleted class]]) {
    ImActorModelModulesFileUploadManager_UploadCompleted *uploadCompleted = (ImActorModelModulesFileUploadManager_UploadCompleted *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UploadCompleted class]);
    ImActorModelModulesMessagesSenderActor_onFileUploadedWithLong_withAMFileReference_(self, [((ImActorModelModulesFileUploadManager_UploadCompleted *) nil_chk(uploadCompleted)) getRid], [uploadCompleted getFileReference]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UploadError class]]) {
    ImActorModelModulesFileUploadManager_UploadError *uploadError = (ImActorModelModulesFileUploadManager_UploadError *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UploadError class]);
    ImActorModelModulesMessagesSenderActor_onFileUploadErrorWithLong_(self, [((ImActorModelModulesFileUploadManager_UploadError *) nil_chk(uploadError)) getRid]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_SendPhoto class]]) {
    ImActorModelModulesMessagesSenderActor_SendPhoto *sendPhoto = (ImActorModelModulesMessagesSenderActor_SendPhoto *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_SendPhoto class]);
    [self doSendPhotoWithAMPeer:[((ImActorModelModulesMessagesSenderActor_SendPhoto *) nil_chk(sendPhoto)) getPeer] withAMFastThumb:[sendPhoto getFastThumb] withNSString:[sendPhoto getDescriptor] withNSString:[sendPhoto getFileName] withInt:[sendPhoto getFileSize] withInt:[sendPhoto getW] withInt:[sendPhoto getH]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesSenderActor_SendVideo class]]) {
    ImActorModelModulesMessagesSenderActor_SendVideo *sendVideo = (ImActorModelModulesMessagesSenderActor_SendVideo *) check_class_cast(message, [ImActorModelModulesMessagesSenderActor_SendVideo class]);
    [self doSendVideoWithAMPeer:[((ImActorModelModulesMessagesSenderActor_SendVideo *) nil_chk(sendVideo)) getPeer] withNSString:[sendVideo getFileName] withInt:[sendVideo getW] withInt:[sendVideo getH] withInt:[sendVideo getDuration] withAMFastThumb:[sendVideo getFastThumb] withNSString:[sendVideo getDescriptor] withInt:[sendVideo getFileSize]];
  }
  else {
    [self dropWithId:message];
  }
}

@end

void ImActorModelModulesMessagesSenderActor_initWithImActorModelModulesModules_(ImActorModelModulesMessagesSenderActor *self, ImActorModelModulesModules *messenger) {
  (void) ImActorModelModulesUtilsModuleActor_initWithImActorModelModulesModules_(self, messenger);
  self->lastSendDate_ = 0;
}

ImActorModelModulesMessagesSenderActor *new_ImActorModelModulesMessagesSenderActor_initWithImActorModelModulesModules_(ImActorModelModulesModules *messenger) {
  ImActorModelModulesMessagesSenderActor *self = [ImActorModelModulesMessagesSenderActor alloc];
  ImActorModelModulesMessagesSenderActor_initWithImActorModelModulesModules_(self, messenger);
  return self;
}

jlong ImActorModelModulesMessagesSenderActor_createPendingDate(ImActorModelModulesMessagesSenderActor *self) {
  jlong res = DKEnvironment_getCurrentSyncedTime();
  if (self->lastSendDate_ >= res) {
    res = self->lastSendDate_ + 1;
  }
  self->lastSendDate_ = res;
  return res;
}

void ImActorModelModulesMessagesSenderActor_performUploadFileWithLong_withNSString_withNSString_(ImActorModelModulesMessagesSenderActor *self, jlong rid, NSString *descriptor, NSString *fileName) {
  [((ImActorModelModulesFiles *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getFilesModule])) requestUploadWithLong:rid withNSString:descriptor withNSString:fileName withDKActorRef:[self self__]];
}

void ImActorModelModulesMessagesSenderActor_onFileUploadedWithLong_withAMFileReference_(ImActorModelModulesMessagesSenderActor *self, jlong rid, AMFileReference *fileReference) {
  ImActorModelModulesMessagesEntityPendingMessage *msg = ImActorModelModulesMessagesSenderActor_findPendingWithLong_(self, rid);
  if (msg == nil) {
    return;
  }
  [((JavaUtilArrayList *) nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) removeWithId:msg];
  AMAbsContent *nContent;
  if ([[((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(msg)) getContent] isKindOfClass:[AMPhotoContent class]]) {
    AMPhotoContent *basePhotoContent = (AMPhotoContent *) check_class_cast([msg getContent], [AMPhotoContent class]);
    nContent = AMPhotoContent_createRemotePhotoWithAMFileReference_withInt_withInt_withAMFastThumb_(fileReference, [((AMPhotoContent *) nil_chk(basePhotoContent)) getW], [basePhotoContent getH], [basePhotoContent getFastThumb]);
  }
  else if ([[msg getContent] isKindOfClass:[AMVideoContent class]]) {
    AMVideoContent *baseVideoContent = (AMVideoContent *) check_class_cast([msg getContent], [AMVideoContent class]);
    nContent = AMVideoContent_createRemoteVideoWithAMFileReference_withInt_withInt_withInt_withAMFastThumb_(fileReference, [((AMVideoContent *) nil_chk(baseVideoContent)) getW], [baseVideoContent getH], [baseVideoContent getDuration], [baseVideoContent getFastThumb]);
  }
  else if ([[msg getContent] isKindOfClass:[AMDocumentContent class]]) {
    AMDocumentContent *baseDocContent = (AMDocumentContent *) check_class_cast([msg getContent], [AMDocumentContent class]);
    nContent = AMDocumentContent_createRemoteDocumentWithAMFileReference_withAMFastThumb_(fileReference, [((AMDocumentContent *) nil_chk(baseDocContent)) getFastThumb]);
  }
  else {
    return;
  }
  [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) addWithId:new_ImActorModelModulesMessagesEntityPendingMessage_initWithAMPeer_withLong_withAMAbsContent_([msg getPeer], [msg getRid], nContent)];
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:[msg getPeer]])) sendWithId:new_ImActorModelModulesMessagesConversationActor_MessageContentUpdated_initWithLong_withAMAbsContent_([msg getRid], nContent)];
  ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(self, [msg getPeer], rid, nContent);
}

void ImActorModelModulesMessagesSenderActor_onFileUploadErrorWithLong_(ImActorModelModulesMessagesSenderActor *self, jlong rid) {
  ImActorModelModulesMessagesEntityPendingMessage *msg = ImActorModelModulesMessagesSenderActor_findPendingWithLong_(self, rid);
  if (msg == nil) {
    return;
  }
  [((DKActorRef *) nil_chk([self self__])) sendWithId:new_ImActorModelModulesMessagesSenderActor_MessageError_initWithAMPeer_withLong_([((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(msg)) getPeer], [msg getRid])];
}

void ImActorModelModulesMessagesSenderActor_performSendContentWithAMPeer_withLong_withAMAbsContent_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid, AMAbsContent *content) {
  APOutPeer *outPeer = [self buidOutPeerWithAMPeer:peer];
  APPeer *apiPeer = [self buildApiPeerWithAMPeer:peer];
  if (outPeer == nil || apiPeer == nil) {
    return;
  }
  APMessage *message;
  if ([content isKindOfClass:[AMTextContent class]]) {
    message = new_APTextMessage_initWithNSString_withJavaUtilList_withAPTextMessageEx_([((AMTextContent *) nil_chk(((AMTextContent *) check_class_cast(content, [AMTextContent class])))) getText], [((AMTextContent *) nil_chk(((AMTextContent *) check_class_cast(content, [AMTextContent class])))) getMentions], [((AMTextContent *) nil_chk(((AMTextContent *) check_class_cast(content, [AMTextContent class])))) getTextMessageEx]);
  }
  else if ([content isKindOfClass:[AMDocumentContent class]]) {
    AMDocumentContent *documentContent = (AMDocumentContent *) check_class_cast(content, [AMDocumentContent class]);
    AMFileRemoteSource *source = (AMFileRemoteSource *) check_class_cast([((AMDocumentContent *) nil_chk(documentContent)) getSource], [AMFileRemoteSource class]);
    APDocumentEx *documentEx = nil;
    if ([content isKindOfClass:[AMPhotoContent class]]) {
      AMPhotoContent *photoContent = (AMPhotoContent *) check_class_cast(content, [AMPhotoContent class]);
      documentEx = new_APDocumentExPhoto_initWithInt_withInt_([((AMPhotoContent *) nil_chk(photoContent)) getW], [photoContent getH]);
    }
    else if ([content isKindOfClass:[AMVideoContent class]]) {
      AMVideoContent *videoContent = (AMVideoContent *) check_class_cast(content, [AMVideoContent class]);
      documentEx = new_APDocumentExVideo_initWithInt_withInt_withInt_([((AMVideoContent *) nil_chk(videoContent)) getW], [videoContent getH], [videoContent getDuration]);
    }
    APFastThumb *fastThumb = nil;
    if ([documentContent getFastThumb] != nil) {
      fastThumb = new_APFastThumb_initWithInt_withInt_withByteArray_([((AMFastThumb *) nil_chk([documentContent getFastThumb])) getW], [((AMFastThumb *) nil_chk([documentContent getFastThumb])) getH], [((AMFastThumb *) nil_chk([documentContent getFastThumb])) getImage]);
    }
    message = new_APDocumentMessage_initWithLong_withLong_withInt_withNSString_withNSString_withAPFastThumb_withAPDocumentEx_([((AMFileReference *) nil_chk([((AMFileRemoteSource *) nil_chk(source)) getFileReference])) getFileId], [((AMFileReference *) nil_chk([source getFileReference])) getAccessHash], [((AMFileReference *) nil_chk([source getFileReference])) getFileSize], [((AMFileReference *) nil_chk([source getFileReference])) getFileName], [documentContent getMimeType], fastThumb, documentEx);
  }
  else {
    return;
  }
  [self requestWithAPRequest:new_APRequestSendMessage_initWithAPOutPeer_withLong_withAPMessage_(outPeer, rid, message) withAMRpcCallback:new_ImActorModelModulesMessagesSenderActor_$1_initWithImActorModelModulesMessagesSenderActor_withAMPeer_withLong_withAPPeer_(self, peer, rid, apiPeer)];
}

void ImActorModelModulesMessagesSenderActor_onSentWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid) {
  for (ImActorModelModulesMessagesEntityPendingMessage * __strong pending in nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(pending)) getRid] == rid && [((AMPeer *) nil_chk([pending getPeer])) isEqual:peer]) {
      [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) removeWithId:pending];
      break;
    }
  }
  ImActorModelModulesMessagesSenderActor_savePending(self);
}

void ImActorModelModulesMessagesSenderActor_onErrorWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor *self, AMPeer *peer, jlong rid) {
  for (ImActorModelModulesMessagesEntityPendingMessage * __strong pending in nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(pending)) getRid] == rid && [((AMPeer *) nil_chk([pending getPeer])) isEqual:peer]) {
      [((JavaUtilArrayList *) nil_chk([self->pendingMessages_ getPendingMessages])) removeWithId:pending];
      break;
    }
  }
  ImActorModelModulesMessagesSenderActor_savePending(self);
  [((DKActorRef *) nil_chk([self getConversationActorWithAMPeer:peer])) sendWithId:new_ImActorModelModulesMessagesConversationActor_MessageError_initWithLong_(rid)];
}

void ImActorModelModulesMessagesSenderActor_savePending(ImActorModelModulesMessagesSenderActor *self) {
  [((id<DKPreferencesStorage>) nil_chk([self preferences])) putBytesWithKey:ImActorModelModulesMessagesSenderActor_PREFERENCES_ withValue:[((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) toByteArray]];
}

ImActorModelModulesMessagesEntityPendingMessage *ImActorModelModulesMessagesSenderActor_findPendingWithLong_(ImActorModelModulesMessagesSenderActor *self, jlong rid) {
  for (ImActorModelModulesMessagesEntityPendingMessage * __strong message in nil_chk([((ImActorModelModulesMessagesEntityPendingMessagesStorage *) nil_chk(self->pendingMessages_)) getPendingMessages])) {
    if ([((ImActorModelModulesMessagesEntityPendingMessage *) nil_chk(message)) getRid] == rid) {
      return message;
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor)

@implementation ImActorModelModulesMessagesSenderActor_SendDocument

- (instancetype)initWithAMPeer:(AMPeer *)peer
                  withNSString:(NSString *)fileName
                  withNSString:(NSString *)mimeType
                       withInt:(jint)fileSize
                  withNSString:(NSString *)descriptor
               withAMFastThumb:(AMFastThumb *)fastThumb {
  ImActorModelModulesMessagesSenderActor_SendDocument_initWithAMPeer_withNSString_withNSString_withInt_withNSString_withAMFastThumb_(self, peer, fileName, mimeType, fileSize, descriptor, fastThumb);
  return self;
}

- (AMFastThumb *)getFastThumb {
  return fastThumb_;
}

- (jint)getFileSize {
  return fileSize_;
}

- (NSString *)getFileName {
  return fileName_;
}

- (NSString *)getMimeType {
  return mimeType_;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (NSString *)getDescriptor {
  return descriptor_;
}

@end

void ImActorModelModulesMessagesSenderActor_SendDocument_initWithAMPeer_withNSString_withNSString_withInt_withNSString_withAMFastThumb_(ImActorModelModulesMessagesSenderActor_SendDocument *self, AMPeer *peer, NSString *fileName, NSString *mimeType, jint fileSize, NSString *descriptor, AMFastThumb *fastThumb) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->fastThumb_ = fastThumb;
  self->descriptor_ = descriptor;
  self->fileName_ = fileName;
  self->mimeType_ = mimeType;
  self->fileSize_ = fileSize;
}

ImActorModelModulesMessagesSenderActor_SendDocument *new_ImActorModelModulesMessagesSenderActor_SendDocument_initWithAMPeer_withNSString_withNSString_withInt_withNSString_withAMFastThumb_(AMPeer *peer, NSString *fileName, NSString *mimeType, jint fileSize, NSString *descriptor, AMFastThumb *fastThumb) {
  ImActorModelModulesMessagesSenderActor_SendDocument *self = [ImActorModelModulesMessagesSenderActor_SendDocument alloc];
  ImActorModelModulesMessagesSenderActor_SendDocument_initWithAMPeer_withNSString_withNSString_withInt_withNSString_withAMFastThumb_(self, peer, fileName, mimeType, fileSize, descriptor, fastThumb);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_SendDocument)

@implementation ImActorModelModulesMessagesSenderActor_SendPhoto

- (instancetype)initWithAMPeer:(AMPeer *)peer
               withAMFastThumb:(AMFastThumb *)fastThumb
                  withNSString:(NSString *)descriptor
                  withNSString:(NSString *)fileName
                       withInt:(jint)fileSize
                       withInt:(jint)w
                       withInt:(jint)h {
  ImActorModelModulesMessagesSenderActor_SendPhoto_initWithAMPeer_withAMFastThumb_withNSString_withNSString_withInt_withInt_withInt_(self, peer, fastThumb, descriptor, fileName, fileSize, w, h);
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (AMFastThumb *)getFastThumb {
  return fastThumb_;
}

- (NSString *)getDescriptor {
  return descriptor_;
}

- (NSString *)getFileName {
  return fileName_;
}

- (jint)getFileSize {
  return fileSize_;
}

- (jint)getW {
  return w_;
}

- (jint)getH {
  return h_;
}

@end

void ImActorModelModulesMessagesSenderActor_SendPhoto_initWithAMPeer_withAMFastThumb_withNSString_withNSString_withInt_withInt_withInt_(ImActorModelModulesMessagesSenderActor_SendPhoto *self, AMPeer *peer, AMFastThumb *fastThumb, NSString *descriptor, NSString *fileName, jint fileSize, jint w, jint h) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->fastThumb_ = fastThumb;
  self->descriptor_ = descriptor;
  self->fileName_ = fileName;
  self->fileSize_ = fileSize;
  self->w_ = w;
  self->h_ = h;
}

ImActorModelModulesMessagesSenderActor_SendPhoto *new_ImActorModelModulesMessagesSenderActor_SendPhoto_initWithAMPeer_withAMFastThumb_withNSString_withNSString_withInt_withInt_withInt_(AMPeer *peer, AMFastThumb *fastThumb, NSString *descriptor, NSString *fileName, jint fileSize, jint w, jint h) {
  ImActorModelModulesMessagesSenderActor_SendPhoto *self = [ImActorModelModulesMessagesSenderActor_SendPhoto alloc];
  ImActorModelModulesMessagesSenderActor_SendPhoto_initWithAMPeer_withAMFastThumb_withNSString_withNSString_withInt_withInt_withInt_(self, peer, fastThumb, descriptor, fileName, fileSize, w, h);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_SendPhoto)

@implementation ImActorModelModulesMessagesSenderActor_SendVideo

- (instancetype)initWithAMPeer:(AMPeer *)peer
                  withNSString:(NSString *)fileName
                       withInt:(jint)w
                       withInt:(jint)h
                       withInt:(jint)duration
               withAMFastThumb:(AMFastThumb *)fastThumb
                  withNSString:(NSString *)descriptor
                       withInt:(jint)fileSize {
  ImActorModelModulesMessagesSenderActor_SendVideo_initWithAMPeer_withNSString_withInt_withInt_withInt_withAMFastThumb_withNSString_withInt_(self, peer, fileName, w, h, duration, fastThumb, descriptor, fileSize);
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (NSString *)getFileName {
  return fileName_;
}

- (jint)getW {
  return w_;
}

- (jint)getH {
  return h_;
}

- (jint)getDuration {
  return duration_;
}

- (AMFastThumb *)getFastThumb {
  return fastThumb_;
}

- (NSString *)getDescriptor {
  return descriptor_;
}

- (jint)getFileSize {
  return fileSize_;
}

@end

void ImActorModelModulesMessagesSenderActor_SendVideo_initWithAMPeer_withNSString_withInt_withInt_withInt_withAMFastThumb_withNSString_withInt_(ImActorModelModulesMessagesSenderActor_SendVideo *self, AMPeer *peer, NSString *fileName, jint w, jint h, jint duration, AMFastThumb *fastThumb, NSString *descriptor, jint fileSize) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->fileName_ = fileName;
  self->w_ = w;
  self->h_ = h;
  self->duration_ = duration;
  self->fastThumb_ = fastThumb;
  self->descriptor_ = descriptor;
  self->fileSize_ = fileSize;
}

ImActorModelModulesMessagesSenderActor_SendVideo *new_ImActorModelModulesMessagesSenderActor_SendVideo_initWithAMPeer_withNSString_withInt_withInt_withInt_withAMFastThumb_withNSString_withInt_(AMPeer *peer, NSString *fileName, jint w, jint h, jint duration, AMFastThumb *fastThumb, NSString *descriptor, jint fileSize) {
  ImActorModelModulesMessagesSenderActor_SendVideo *self = [ImActorModelModulesMessagesSenderActor_SendVideo alloc];
  ImActorModelModulesMessagesSenderActor_SendVideo_initWithAMPeer_withNSString_withInt_withInt_withInt_withAMFastThumb_withNSString_withInt_(self, peer, fileName, w, h, duration, fastThumb, descriptor, fileSize);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_SendVideo)

@implementation ImActorModelModulesMessagesSenderActor_SendText

- (instancetype)initWithAMPeer:(AMPeer *)peer
                  withNSString:(NSString *)text
                  withNSString:(NSString *)markDownText
         withJavaUtilArrayList:(JavaUtilArrayList *)mentions
                   withBoolean:(jboolean)autoDetect {
  ImActorModelModulesMessagesSenderActor_SendText_initWithAMPeer_withNSString_withNSString_withJavaUtilArrayList_withBoolean_(self, peer, text, markDownText, mentions, autoDetect);
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (NSString *)getText {
  return text_;
}

- (NSString *)getMarkDownText {
  return markDownText_;
}

- (JavaUtilArrayList *)getMentions {
  return mentions_;
}

- (jboolean)isAutoDetect {
  return autoDetect_;
}

@end

void ImActorModelModulesMessagesSenderActor_SendText_initWithAMPeer_withNSString_withNSString_withJavaUtilArrayList_withBoolean_(ImActorModelModulesMessagesSenderActor_SendText *self, AMPeer *peer, NSString *text, NSString *markDownText, JavaUtilArrayList *mentions, jboolean autoDetect) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->text_ = text;
  self->markDownText_ = markDownText;
  self->mentions_ = mentions;
  self->autoDetect_ = autoDetect;
}

ImActorModelModulesMessagesSenderActor_SendText *new_ImActorModelModulesMessagesSenderActor_SendText_initWithAMPeer_withNSString_withNSString_withJavaUtilArrayList_withBoolean_(AMPeer *peer, NSString *text, NSString *markDownText, JavaUtilArrayList *mentions, jboolean autoDetect) {
  ImActorModelModulesMessagesSenderActor_SendText *self = [ImActorModelModulesMessagesSenderActor_SendText alloc];
  ImActorModelModulesMessagesSenderActor_SendText_initWithAMPeer_withNSString_withNSString_withJavaUtilArrayList_withBoolean_(self, peer, text, markDownText, mentions, autoDetect);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_SendText)

@implementation ImActorModelModulesMessagesSenderActor_MessageSent

- (instancetype)initWithAMPeer:(AMPeer *)peer
                      withLong:(jlong)rid {
  ImActorModelModulesMessagesSenderActor_MessageSent_initWithAMPeer_withLong_(self, peer, rid);
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (jlong)getRid {
  return rid_;
}

@end

void ImActorModelModulesMessagesSenderActor_MessageSent_initWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor_MessageSent *self, AMPeer *peer, jlong rid) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->rid_ = rid;
}

ImActorModelModulesMessagesSenderActor_MessageSent *new_ImActorModelModulesMessagesSenderActor_MessageSent_initWithAMPeer_withLong_(AMPeer *peer, jlong rid) {
  ImActorModelModulesMessagesSenderActor_MessageSent *self = [ImActorModelModulesMessagesSenderActor_MessageSent alloc];
  ImActorModelModulesMessagesSenderActor_MessageSent_initWithAMPeer_withLong_(self, peer, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_MessageSent)

@implementation ImActorModelModulesMessagesSenderActor_MessageError

- (instancetype)initWithAMPeer:(AMPeer *)peer
                      withLong:(jlong)rid {
  ImActorModelModulesMessagesSenderActor_MessageError_initWithAMPeer_withLong_(self, peer, rid);
  return self;
}

- (AMPeer *)getPeer {
  return peer_;
}

- (jlong)getRid {
  return rid_;
}

@end

void ImActorModelModulesMessagesSenderActor_MessageError_initWithAMPeer_withLong_(ImActorModelModulesMessagesSenderActor_MessageError *self, AMPeer *peer, jlong rid) {
  (void) NSObject_init(self);
  self->peer_ = peer;
  self->rid_ = rid;
}

ImActorModelModulesMessagesSenderActor_MessageError *new_ImActorModelModulesMessagesSenderActor_MessageError_initWithAMPeer_withLong_(AMPeer *peer, jlong rid) {
  ImActorModelModulesMessagesSenderActor_MessageError *self = [ImActorModelModulesMessagesSenderActor_MessageError alloc];
  ImActorModelModulesMessagesSenderActor_MessageError_initWithAMPeer_withLong_(self, peer, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_MessageError)

@implementation ImActorModelModulesMessagesSenderActor_$1

- (void)onResult:(APResponseSeqDate *)response {
  [((DKActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ImActorModelModulesMessagesSenderActor_MessageSent_initWithAMPeer_withLong_(val$peer_, val$rid_)];
  [((ImActorModelModulesUpdates *) nil_chk([this$0_ updates])) onUpdateReceivedWithId:new_ImActorModelApiBaseSeqUpdate_initWithInt_withByteArray_withInt_withByteArray_([((APResponseSeqDate *) nil_chk(response)) getSeq], [response getState], APUpdateMessageSent_HEADER, [new_APUpdateMessageSent_initWithAPPeer_withLong_withLong_(val$apiPeer_, val$rid_, [response getDate]) toByteArray])];
}

- (void)onError:(AMRpcException *)e {
  [((DKActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ImActorModelModulesMessagesSenderActor_MessageError_initWithAMPeer_withLong_(val$peer_, val$rid_)];
}

- (instancetype)initWithImActorModelModulesMessagesSenderActor:(ImActorModelModulesMessagesSenderActor *)outer$
                                                    withAMPeer:(AMPeer *)capture$0
                                                      withLong:(jlong)capture$1
                                                    withAPPeer:(APPeer *)capture$2 {
  ImActorModelModulesMessagesSenderActor_$1_initWithImActorModelModulesMessagesSenderActor_withAMPeer_withLong_withAPPeer_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

@end

void ImActorModelModulesMessagesSenderActor_$1_initWithImActorModelModulesMessagesSenderActor_withAMPeer_withLong_withAPPeer_(ImActorModelModulesMessagesSenderActor_$1 *self, ImActorModelModulesMessagesSenderActor *outer$, AMPeer *capture$0, jlong capture$1, APPeer *capture$2) {
  self->this$0_ = outer$;
  self->val$peer_ = capture$0;
  self->val$rid_ = capture$1;
  self->val$apiPeer_ = capture$2;
  (void) NSObject_init(self);
}

ImActorModelModulesMessagesSenderActor_$1 *new_ImActorModelModulesMessagesSenderActor_$1_initWithImActorModelModulesMessagesSenderActor_withAMPeer_withLong_withAPPeer_(ImActorModelModulesMessagesSenderActor *outer$, AMPeer *capture$0, jlong capture$1, APPeer *capture$2) {
  ImActorModelModulesMessagesSenderActor_$1 *self = [ImActorModelModulesMessagesSenderActor_$1 alloc];
  ImActorModelModulesMessagesSenderActor_$1_initWithImActorModelModulesMessagesSenderActor_withAMPeer_withLong_withAPPeer_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesSenderActor_$1)
