//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-apps/core/src/main/java/im/actor/model/modules/messages/ConversationActor.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/StorageProvider.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/engine/IndexStorage.h"
#include "im/actor/model/droidkit/engine/ListEngine.h"
#include "im/actor/model/droidkit/engine/PreferencesStorage.h"
#include "im/actor/model/entity/Message.h"
#include "im/actor/model/entity/MessageState.h"
#include "im/actor/model/entity/Peer.h"
#include "im/actor/model/entity/PeerType.h"
#include "im/actor/model/entity/content/AbsContent.h"
#include "im/actor/model/modules/Messages.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/messages/ConversationActor.h"
#include "im/actor/model/modules/messages/DialogsActor.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface ImActorModelModulesMessagesConversationActor () {
 @public
  NSString *IN_READ_STATE_PREF_;
  NSString *OUT_READ_STATE_PREF_;
  NSString *OUT_RECEIVE_STATE_PREF_;
  AMPeer *peer_;
  id<DKListEngine> messages_;
  id<DKIndexStorage> outPendingIndex_;
  id<DKIndexStorage> inPendingIndex_;
  DKActorRef *dialogsActor_;
  jlong inReadState_;
  jlong outReadState_;
  jlong outReceiveState_;
}

- (void)onInMessageWithAMMessage:(AMMessage *)message;

- (void)onMessageContentUpdatedWithLong:(jlong)rid
                       withAMAbsContent:(AMAbsContent *)content;

- (void)onMessageDateChangeWithLong:(jlong)rid
                           withLong:(jlong)date;

- (void)onMessageSentWithLong:(jlong)rid
                     withLong:(jlong)date;

- (void)onMessageErrorWithLong:(jlong)rid;

- (void)onMessageReadWithLong:(jlong)date;

- (void)onMessageReceivedWithLong:(jlong)date;

- (void)onMessageReadByMeWithLong:(jlong)date;

- (void)onMessagesDeletedWithJavaUtilList:(id<JavaUtilList>)rids;

- (void)onClearConversation;

- (void)onDeleteConversation;

- (void)onHistoryLoadedWithJavaUtilList:(id<JavaUtilList>)history;

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, IN_READ_STATE_PREF_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, OUT_READ_STATE_PREF_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, OUT_RECEIVE_STATE_PREF_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, peer_, AMPeer *)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, messages_, id<DKListEngine>)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, outPendingIndex_, id<DKIndexStorage>)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, inPendingIndex_, id<DKIndexStorage>)
J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor, dialogsActor_, DKActorRef *)

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onInMessageWithAMMessage_(ImActorModelModulesMessagesConversationActor *self, AMMessage *message);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageContentUpdatedWithLong_withAMAbsContent_(ImActorModelModulesMessagesConversationActor *self, jlong rid, AMAbsContent *content);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageDateChangeWithLong_withLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid, jlong date);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageSentWithLong_withLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid, jlong date);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageErrorWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageReadWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong date);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageReceivedWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong date);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessageReadByMeWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong date);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onMessagesDeletedWithJavaUtilList_(ImActorModelModulesMessagesConversationActor *self, id<JavaUtilList> rids);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onClearConversation(ImActorModelModulesMessagesConversationActor *self);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onDeleteConversation(ImActorModelModulesMessagesConversationActor *self);

__attribute__((unused)) static void ImActorModelModulesMessagesConversationActor_onHistoryLoadedWithJavaUtilList_(ImActorModelModulesMessagesConversationActor *self, id<JavaUtilList> history);

@interface ImActorModelModulesMessagesConversationActor_MessageContentUpdated () {
 @public
  jlong rid_;
  AMAbsContent *content_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor_MessageContentUpdated, content_, AMAbsContent *)

@interface ImActorModelModulesMessagesConversationActor_HistoryLoaded () {
 @public
  id<JavaUtilList> messages_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor_HistoryLoaded, messages_, id<JavaUtilList>)

@interface ImActorModelModulesMessagesConversationActor_MessageReceived () {
 @public
  jlong date_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessageRead () {
 @public
  jlong date_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessageSent () {
 @public
  jlong rid_;
  jlong date_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessageReadByMe () {
 @public
  jlong date_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessageDateChange () {
 @public
  jlong rid_;
  jlong date_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessageError () {
 @public
  jlong rid_;
}

@end

@interface ImActorModelModulesMessagesConversationActor_MessagesDeleted () {
 @public
  id<JavaUtilList> rids_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesMessagesConversationActor_MessagesDeleted, rids_, id<JavaUtilList>)

@implementation ImActorModelModulesMessagesConversationActor

- (instancetype)initWithAMPeer:(AMPeer *)peer
withImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  ImActorModelModulesMessagesConversationActor_initWithAMPeer_withImActorModelModulesModules_(self, peer, messenger);
  return self;
}

- (void)preStart {
  messages_ = [self messagesWithAMPeer:peer_];
  dialogsActor_ = [((ImActorModelModulesMessages *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getMessagesModule])) getDialogsActor];
  outPendingIndex_ = [((id<AMStorageProvider>) nil_chk([((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getConfiguration])) getStorageProvider])) createIndexWithName:JreStrcat("$@CI", @"out_pending_", [((AMPeer *) nil_chk(peer_)) getPeerType], '_', [peer_ getPeerId])];
  inPendingIndex_ = [((id<AMStorageProvider>) nil_chk([((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getConfiguration])) getStorageProvider])) createIndexWithName:JreStrcat("$@CI", @"in_pending_", [peer_ getPeerType], '_', [peer_ getPeerId])];
  inReadState_ = [((id<DKPreferencesStorage>) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getPreferences])) getLongWithKey:IN_READ_STATE_PREF_ withDefault:0];
  outReadState_ = [((id<DKPreferencesStorage>) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getPreferences])) getLongWithKey:OUT_READ_STATE_PREF_ withDefault:0];
  outReceiveState_ = [((id<DKPreferencesStorage>) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getPreferences])) getLongWithKey:OUT_RECEIVE_STATE_PREF_ withDefault:0];
}

- (void)onInMessageWithAMMessage:(AMMessage *)message {
  ImActorModelModulesMessagesConversationActor_onInMessageWithAMMessage_(self, message);
}

- (void)onMessageContentUpdatedWithLong:(jlong)rid
                       withAMAbsContent:(AMAbsContent *)content {
  ImActorModelModulesMessagesConversationActor_onMessageContentUpdatedWithLong_withAMAbsContent_(self, rid, content);
}

- (void)onMessageDateChangeWithLong:(jlong)rid
                           withLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_onMessageDateChangeWithLong_withLong_(self, rid, date);
}

- (void)onMessageSentWithLong:(jlong)rid
                     withLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_onMessageSentWithLong_withLong_(self, rid, date);
}

- (void)onMessageErrorWithLong:(jlong)rid {
  ImActorModelModulesMessagesConversationActor_onMessageErrorWithLong_(self, rid);
}

- (void)onMessageReadWithLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_onMessageReadWithLong_(self, date);
}

- (void)onMessageReceivedWithLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_onMessageReceivedWithLong_(self, date);
}

- (void)onMessageReadByMeWithLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_onMessageReadByMeWithLong_(self, date);
}

- (void)onMessagesDeletedWithJavaUtilList:(id<JavaUtilList>)rids {
  ImActorModelModulesMessagesConversationActor_onMessagesDeletedWithJavaUtilList_(self, rids);
}

- (void)onClearConversation {
  ImActorModelModulesMessagesConversationActor_onClearConversation(self);
}

- (void)onDeleteConversation {
  ImActorModelModulesMessagesConversationActor_onDeleteConversation(self);
}

- (void)onHistoryLoadedWithJavaUtilList:(id<JavaUtilList>)history {
  ImActorModelModulesMessagesConversationActor_onHistoryLoadedWithJavaUtilList_(self, history);
}

- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[AMMessage class]]) {
    ImActorModelModulesMessagesConversationActor_onInMessageWithAMMessage_(self, (AMMessage *) check_class_cast(message, [AMMessage class]));
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageContentUpdated class]]) {
    ImActorModelModulesMessagesConversationActor_MessageContentUpdated *contentUpdated = (ImActorModelModulesMessagesConversationActor_MessageContentUpdated *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageContentUpdated class]);
    ImActorModelModulesMessagesConversationActor_onMessageContentUpdatedWithLong_withAMAbsContent_(self, [((ImActorModelModulesMessagesConversationActor_MessageContentUpdated *) nil_chk(contentUpdated)) getRid], [contentUpdated getContent]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageSent class]]) {
    ImActorModelModulesMessagesConversationActor_MessageSent *sent = (ImActorModelModulesMessagesConversationActor_MessageSent *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageSent class]);
    ImActorModelModulesMessagesConversationActor_onMessageSentWithLong_withLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageSent *) nil_chk(sent)) getRid], [sent getDate]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageError class]]) {
    ImActorModelModulesMessagesConversationActor_MessageError *messageError = (ImActorModelModulesMessagesConversationActor_MessageError *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageError class]);
    ImActorModelModulesMessagesConversationActor_onMessageErrorWithLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageError *) nil_chk(messageError)) getRid]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageRead class]]) {
    ImActorModelModulesMessagesConversationActor_onMessageReadWithLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageRead *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessageRead *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageRead class])))) getDate]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageReceived class]]) {
    ImActorModelModulesMessagesConversationActor_onMessageReceivedWithLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageReceived *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessageReceived *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageReceived class])))) getDate]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_HistoryLoaded class]]) {
    ImActorModelModulesMessagesConversationActor_onHistoryLoadedWithJavaUtilList_(self, [((ImActorModelModulesMessagesConversationActor_HistoryLoaded *) nil_chk(((ImActorModelModulesMessagesConversationActor_HistoryLoaded *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_HistoryLoaded class])))) getMessages]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_ClearConversation class]]) {
    ImActorModelModulesMessagesConversationActor_onClearConversation(self);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_DeleteConversation class]]) {
    ImActorModelModulesMessagesConversationActor_onDeleteConversation(self);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessagesDeleted class]]) {
    ImActorModelModulesMessagesConversationActor_onMessagesDeletedWithJavaUtilList_(self, [((ImActorModelModulesMessagesConversationActor_MessagesDeleted *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessagesDeleted *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessagesDeleted class])))) getRids]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageDateChange class]]) {
    ImActorModelModulesMessagesConversationActor_onMessageDateChangeWithLong_withLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageDateChange *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessageDateChange *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageDateChange class])))) getRid], [((ImActorModelModulesMessagesConversationActor_MessageDateChange *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessageDateChange *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageDateChange class])))) getDate]);
  }
  else if ([message isKindOfClass:[ImActorModelModulesMessagesConversationActor_MessageReadByMe class]]) {
    ImActorModelModulesMessagesConversationActor_onMessageReadByMeWithLong_(self, [((ImActorModelModulesMessagesConversationActor_MessageReadByMe *) nil_chk(((ImActorModelModulesMessagesConversationActor_MessageReadByMe *) check_class_cast(message, [ImActorModelModulesMessagesConversationActor_MessageReadByMe class])))) getDate]);
  }
  else {
    [self dropWithId:message];
  }
}

@end

void ImActorModelModulesMessagesConversationActor_initWithAMPeer_withImActorModelModulesModules_(ImActorModelModulesMessagesConversationActor *self, AMPeer *peer, ImActorModelModulesModules *messenger) {
  (void) ImActorModelModulesUtilsModuleActor_initWithImActorModelModulesModules_(self, messenger);
  self->peer_ = peer;
  self->IN_READ_STATE_PREF_ = JreStrcat("$@$", @"chat_state.", peer, @".in_read");
  self->OUT_READ_STATE_PREF_ = JreStrcat("$@$", @"chat_state.", peer, @".out_read");
  self->OUT_RECEIVE_STATE_PREF_ = JreStrcat("$@$", @"chat_state.", peer, @".out_receive");
}

ImActorModelModulesMessagesConversationActor *new_ImActorModelModulesMessagesConversationActor_initWithAMPeer_withImActorModelModulesModules_(AMPeer *peer, ImActorModelModulesModules *messenger) {
  ImActorModelModulesMessagesConversationActor *self = [ImActorModelModulesMessagesConversationActor alloc];
  ImActorModelModulesMessagesConversationActor_initWithAMPeer_withImActorModelModulesModules_(self, peer, messenger);
  return self;
}

void ImActorModelModulesMessagesConversationActor_onInMessageWithAMMessage_(ImActorModelModulesMessagesConversationActor *self, AMMessage *message) {
  if ([((AMMessage *) nil_chk(message)) getSenderId] == [self myUid]) {
    if ([message isOnServer]) {
      if ([message getSortDate] <= self->outReadState_) {
        message = [message changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_READ()];
      }
      else if ([message getSortDate] <= self->outReceiveState_) {
        message = [message changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_RECEIVED()];
      }
      else {
        message = [message changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_SENT()];
      }
    }
  }
  [((id<DKListEngine>) nil_chk(self->messages_)) addOrUpdateItem:message];
  if ([((AMMessage *) nil_chk(message)) isOnServer]) {
    if ([message getSenderId] == [self myUid]) {
      if ([message isOnServer] && [message getMessageState] != AMMessageStateEnum_get_READ()) {
        [((id<DKIndexStorage>) nil_chk(self->outPendingIndex_)) putWithKey:[message getRid] withValue:[message getDate]];
      }
    }
    else {
      if ([message getSortDate] <= self->inReadState_) {
        return;
      }
      [((id<DKIndexStorage>) nil_chk(self->inPendingIndex_)) putWithKey:[message getRid] withValue:[message getDate]];
    }
    [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_InMessage_initWithAMPeer_withAMMessage_withInt_(self->peer_, message, [((id<DKIndexStorage>) nil_chk(self->inPendingIndex_)) getCount])];
  }
}

void ImActorModelModulesMessagesConversationActor_onMessageContentUpdatedWithLong_withAMAbsContent_(ImActorModelModulesMessagesConversationActor *self, jlong rid, AMAbsContent *content) {
  AMMessage *message = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithKey:rid];
  if (message == nil) {
    return;
  }
  AMMessage *updatedMsg = [((AMMessage *) nil_chk(message)) changeContentWithAMAbsContent:content];
  [self->messages_ addOrUpdateItem:updatedMsg];
  [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageContentChanged_initWithAMPeer_withLong_withAMAbsContent_(self->peer_, rid, content)];
}

void ImActorModelModulesMessagesConversationActor_onMessageDateChangeWithLong_withLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid, jlong date) {
  AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithKey:rid];
  if (msg != nil && [msg isOnServer]) {
    AMMessage *updatedMsg = [((AMMessage *) nil_chk([msg changeAllDateWithLong:date])) changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_SENT()];
    [self->messages_ addOrUpdateItem:updatedMsg];
  }
}

void ImActorModelModulesMessagesConversationActor_onMessageSentWithLong_withLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid, jlong date) {
  AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithKey:rid];
  if (msg != nil && ([msg getMessageState] == AMMessageStateEnum_get_PENDING())) {
    AMMessageStateEnum *state;
    if (date <= self->outReadState_) {
      state = AMMessageStateEnum_get_READ();
    }
    else if (date <= self->outReceiveState_) {
      state = AMMessageStateEnum_get_RECEIVED();
    }
    else {
      state = AMMessageStateEnum_get_SENT();
    }
    AMMessage *updatedMsg = [((AMMessage *) nil_chk([msg changeAllDateWithLong:date])) changeStateWithAMMessageStateEnum:state];
    [self->messages_ addOrUpdateItem:updatedMsg];
    [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_InMessage_initWithAMPeer_withAMMessage_withInt_(self->peer_, updatedMsg, [((id<DKIndexStorage>) nil_chk(self->inPendingIndex_)) getCount])];
    if (state != AMMessageStateEnum_get_READ()) {
      [((id<DKIndexStorage>) nil_chk(self->outPendingIndex_)) putWithKey:rid withValue:date];
    }
  }
}

void ImActorModelModulesMessagesConversationActor_onMessageErrorWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong rid) {
  AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithKey:rid];
  if (msg != nil && [msg isPendingOrSent]) {
    AMMessage *updatedMsg = [msg changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_ERROR()];
    [self->messages_ addOrUpdateItem:updatedMsg];
    [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageStateChanged_initWithAMPeer_withLong_withAMMessageStateEnum_(self->peer_, rid, AMMessageStateEnum_get_ERROR())];
  }
}

void ImActorModelModulesMessagesConversationActor_onMessageReadWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong date) {
  if (date <= self->outReadState_) {
    return;
  }
  self->outReadState_ = date;
  [((id<DKPreferencesStorage>) nil_chk([self preferences])) putLongWithKey:self->OUT_READ_STATE_PREF_ withValue:date];
  id<JavaUtilList> res = [((id<DKIndexStorage>) nil_chk(self->outPendingIndex_)) removeBeforeValue:date];
  if ([((id<JavaUtilList>) nil_chk(res)) size] > 0) {
    jlong minRid = -1;
    jlong minDate = JavaLangLong_MAX_VALUE;
    JavaUtilArrayList *updated = new_JavaUtilArrayList_init();
    for (JavaLangLong * __strong ref in res) {
      AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithKey:[((JavaLangLong *) nil_chk(ref)) longLongValue]];
      if (msg != nil && [msg isReceivedOrSent]) {
        if ([msg getDate] < minDate) {
          minDate = [msg getDate];
          minRid = [ref longLongValue];
        }
        [updated addWithId:[msg changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_READ()]];
      }
    }
    if ([updated size] > 0) {
      [((id<DKListEngine>) nil_chk(self->messages_)) addOrUpdateItems:updated];
    }
    if (minRid != -1) {
      [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageStateChanged_initWithAMPeer_withLong_withAMMessageStateEnum_(self->peer_, minRid, AMMessageStateEnum_get_READ())];
    }
  }
}

void ImActorModelModulesMessagesConversationActor_onMessageReceivedWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong date) {
  if (date <= self->outReceiveState_) {
    return;
  }
  self->outReceiveState_ = date;
  [((id<DKPreferencesStorage>) nil_chk([self preferences])) putLongWithKey:self->OUT_RECEIVE_STATE_PREF_ withValue:date];
  id<JavaUtilList> res = [((id<DKIndexStorage>) nil_chk(self->outPendingIndex_)) findBeforeValue:date];
  if ([((id<JavaUtilList>) nil_chk(res)) size] > 0) {
    jlong minRid = -1;
    jlong minDate = JavaLangLong_MAX_VALUE;
    JavaUtilArrayList *updated = new_JavaUtilArrayList_init();
    for (JavaLangLong * __strong ref in res) {
      AMMessage *msg = [((id<DKListEngine>) nil_chk(self->messages_)) getValueWithKey:[((JavaLangLong *) nil_chk(ref)) longLongValue]];
      if (msg != nil && [msg isSent]) {
        if ([msg getDate] < minDate) {
          minDate = [msg getDate];
          minRid = [ref longLongValue];
        }
        [updated addWithId:[msg changeStateWithAMMessageStateEnum:AMMessageStateEnum_get_RECEIVED()]];
      }
    }
    if ([updated size] > 0) {
      [((id<DKListEngine>) nil_chk(self->messages_)) addOrUpdateItems:updated];
    }
    if (minRid != -1) {
      [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageStateChanged_initWithAMPeer_withLong_withAMMessageStateEnum_(self->peer_, minRid, AMMessageStateEnum_get_RECEIVED())];
    }
  }
}

void ImActorModelModulesMessagesConversationActor_onMessageReadByMeWithLong_(ImActorModelModulesMessagesConversationActor *self, jlong date) {
  if (date < self->inReadState_) {
    return;
  }
  self->inReadState_ = date;
  [((id<DKPreferencesStorage>) nil_chk([self preferences])) putLongWithKey:self->IN_READ_STATE_PREF_ withValue:date];
  (void) [((id<DKIndexStorage>) nil_chk(self->inPendingIndex_)) removeBeforeValue:date];
  [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_CounterChanged_initWithAMPeer_withInt_(self->peer_, [self->inPendingIndex_ getCount])];
}

void ImActorModelModulesMessagesConversationActor_onMessagesDeletedWithJavaUtilList_(ImActorModelModulesMessagesConversationActor *self, id<JavaUtilList> rids) {
  IOSLongArray *rids2 = [IOSLongArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(rids)) size]];
  for (jint i = 0; i < rids2->size_; i++) {
    *IOSLongArray_GetRef(rids2, i) = [((JavaLangLong *) nil_chk([rids getWithInt:i])) longLongValue];
  }
  [((id<DKListEngine>) nil_chk(self->messages_)) removeItemsWithKeys:rids2];
  [((id<DKIndexStorage>) nil_chk(self->inPendingIndex_)) removeWithKeys:rids];
  [((id<DKIndexStorage>) nil_chk(self->outPendingIndex_)) removeWithKeys:rids];
  [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_MessageDeleted_initWithAMPeer_withAMMessage_(self->peer_, [self->messages_ getHeadValue])];
}

void ImActorModelModulesMessagesConversationActor_onClearConversation(ImActorModelModulesMessagesConversationActor *self) {
  [((id<DKListEngine>) nil_chk(self->messages_)) clear];
  [((id<DKIndexStorage>) nil_chk(self->inPendingIndex_)) clear];
  [((id<DKIndexStorage>) nil_chk(self->outPendingIndex_)) clear];
  [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_ChatClear_initWithAMPeer_(self->peer_)];
}

void ImActorModelModulesMessagesConversationActor_onDeleteConversation(ImActorModelModulesMessagesConversationActor *self) {
  [((id<DKListEngine>) nil_chk(self->messages_)) clear];
  [((id<DKIndexStorage>) nil_chk(self->inPendingIndex_)) clear];
  [((id<DKIndexStorage>) nil_chk(self->outPendingIndex_)) clear];
  [((DKActorRef *) nil_chk(self->dialogsActor_)) sendWithId:new_ImActorModelModulesMessagesDialogsActor_ChatDelete_initWithAMPeer_(self->peer_)];
}

void ImActorModelModulesMessagesConversationActor_onHistoryLoadedWithJavaUtilList_(ImActorModelModulesMessagesConversationActor *self, id<JavaUtilList> history) {
  JavaUtilArrayList *updated = new_JavaUtilArrayList_init();
  for (AMMessage * __strong historyMessage in nil_chk(history)) {
    if ([((id<DKListEngine>) nil_chk(self->messages_)) getValueWithKey:[((AMMessage *) nil_chk(historyMessage)) getEngineId]] != nil) {
      continue;
    }
    [updated addWithId:historyMessage];
  }
  if ([updated size] > 0) {
    [((id<DKListEngine>) nil_chk(self->messages_)) addOrUpdateItems:updated];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor)

@implementation ImActorModelModulesMessagesConversationActor_MessageContentUpdated

- (instancetype)initWithLong:(jlong)rid
            withAMAbsContent:(AMAbsContent *)content {
  ImActorModelModulesMessagesConversationActor_MessageContentUpdated_initWithLong_withAMAbsContent_(self, rid, content);
  return self;
}

- (jlong)getRid {
  return rid_;
}

- (AMAbsContent *)getContent {
  return content_;
}

@end

void ImActorModelModulesMessagesConversationActor_MessageContentUpdated_initWithLong_withAMAbsContent_(ImActorModelModulesMessagesConversationActor_MessageContentUpdated *self, jlong rid, AMAbsContent *content) {
  (void) NSObject_init(self);
  self->rid_ = rid;
  self->content_ = content;
}

ImActorModelModulesMessagesConversationActor_MessageContentUpdated *new_ImActorModelModulesMessagesConversationActor_MessageContentUpdated_initWithLong_withAMAbsContent_(jlong rid, AMAbsContent *content) {
  ImActorModelModulesMessagesConversationActor_MessageContentUpdated *self = [ImActorModelModulesMessagesConversationActor_MessageContentUpdated alloc];
  ImActorModelModulesMessagesConversationActor_MessageContentUpdated_initWithLong_withAMAbsContent_(self, rid, content);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageContentUpdated)

@implementation ImActorModelModulesMessagesConversationActor_HistoryLoaded

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)messages {
  ImActorModelModulesMessagesConversationActor_HistoryLoaded_initWithJavaUtilList_(self, messages);
  return self;
}

- (id<JavaUtilList>)getMessages {
  return messages_;
}

@end

void ImActorModelModulesMessagesConversationActor_HistoryLoaded_initWithJavaUtilList_(ImActorModelModulesMessagesConversationActor_HistoryLoaded *self, id<JavaUtilList> messages) {
  (void) NSObject_init(self);
  self->messages_ = messages;
}

ImActorModelModulesMessagesConversationActor_HistoryLoaded *new_ImActorModelModulesMessagesConversationActor_HistoryLoaded_initWithJavaUtilList_(id<JavaUtilList> messages) {
  ImActorModelModulesMessagesConversationActor_HistoryLoaded *self = [ImActorModelModulesMessagesConversationActor_HistoryLoaded alloc];
  ImActorModelModulesMessagesConversationActor_HistoryLoaded_initWithJavaUtilList_(self, messages);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_HistoryLoaded)

@implementation ImActorModelModulesMessagesConversationActor_MessageReceived

- (instancetype)initWithLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_MessageReceived_initWithLong_(self, date);
  return self;
}

- (jlong)getDate {
  return date_;
}

@end

void ImActorModelModulesMessagesConversationActor_MessageReceived_initWithLong_(ImActorModelModulesMessagesConversationActor_MessageReceived *self, jlong date) {
  (void) NSObject_init(self);
  self->date_ = date;
}

ImActorModelModulesMessagesConversationActor_MessageReceived *new_ImActorModelModulesMessagesConversationActor_MessageReceived_initWithLong_(jlong date) {
  ImActorModelModulesMessagesConversationActor_MessageReceived *self = [ImActorModelModulesMessagesConversationActor_MessageReceived alloc];
  ImActorModelModulesMessagesConversationActor_MessageReceived_initWithLong_(self, date);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageReceived)

@implementation ImActorModelModulesMessagesConversationActor_MessageRead

- (instancetype)initWithLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_MessageRead_initWithLong_(self, date);
  return self;
}

- (jlong)getDate {
  return date_;
}

@end

void ImActorModelModulesMessagesConversationActor_MessageRead_initWithLong_(ImActorModelModulesMessagesConversationActor_MessageRead *self, jlong date) {
  (void) NSObject_init(self);
  self->date_ = date;
}

ImActorModelModulesMessagesConversationActor_MessageRead *new_ImActorModelModulesMessagesConversationActor_MessageRead_initWithLong_(jlong date) {
  ImActorModelModulesMessagesConversationActor_MessageRead *self = [ImActorModelModulesMessagesConversationActor_MessageRead alloc];
  ImActorModelModulesMessagesConversationActor_MessageRead_initWithLong_(self, date);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageRead)

@implementation ImActorModelModulesMessagesConversationActor_MessageSent

- (instancetype)initWithLong:(jlong)rid
                    withLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_MessageSent_initWithLong_withLong_(self, rid, date);
  return self;
}

- (jlong)getDate {
  return date_;
}

- (jlong)getRid {
  return rid_;
}

@end

void ImActorModelModulesMessagesConversationActor_MessageSent_initWithLong_withLong_(ImActorModelModulesMessagesConversationActor_MessageSent *self, jlong rid, jlong date) {
  (void) NSObject_init(self);
  self->rid_ = rid;
  self->date_ = date;
}

ImActorModelModulesMessagesConversationActor_MessageSent *new_ImActorModelModulesMessagesConversationActor_MessageSent_initWithLong_withLong_(jlong rid, jlong date) {
  ImActorModelModulesMessagesConversationActor_MessageSent *self = [ImActorModelModulesMessagesConversationActor_MessageSent alloc];
  ImActorModelModulesMessagesConversationActor_MessageSent_initWithLong_withLong_(self, rid, date);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageSent)

@implementation ImActorModelModulesMessagesConversationActor_MessageReadByMe

- (instancetype)initWithLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_MessageReadByMe_initWithLong_(self, date);
  return self;
}

- (jlong)getDate {
  return date_;
}

@end

void ImActorModelModulesMessagesConversationActor_MessageReadByMe_initWithLong_(ImActorModelModulesMessagesConversationActor_MessageReadByMe *self, jlong date) {
  (void) NSObject_init(self);
  self->date_ = date;
}

ImActorModelModulesMessagesConversationActor_MessageReadByMe *new_ImActorModelModulesMessagesConversationActor_MessageReadByMe_initWithLong_(jlong date) {
  ImActorModelModulesMessagesConversationActor_MessageReadByMe *self = [ImActorModelModulesMessagesConversationActor_MessageReadByMe alloc];
  ImActorModelModulesMessagesConversationActor_MessageReadByMe_initWithLong_(self, date);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageReadByMe)

@implementation ImActorModelModulesMessagesConversationActor_MessageDateChange

- (instancetype)initWithLong:(jlong)rid
                    withLong:(jlong)date {
  ImActorModelModulesMessagesConversationActor_MessageDateChange_initWithLong_withLong_(self, rid, date);
  return self;
}

- (jlong)getDate {
  return date_;
}

- (jlong)getRid {
  return rid_;
}

@end

void ImActorModelModulesMessagesConversationActor_MessageDateChange_initWithLong_withLong_(ImActorModelModulesMessagesConversationActor_MessageDateChange *self, jlong rid, jlong date) {
  (void) NSObject_init(self);
  self->rid_ = rid;
  self->date_ = date;
}

ImActorModelModulesMessagesConversationActor_MessageDateChange *new_ImActorModelModulesMessagesConversationActor_MessageDateChange_initWithLong_withLong_(jlong rid, jlong date) {
  ImActorModelModulesMessagesConversationActor_MessageDateChange *self = [ImActorModelModulesMessagesConversationActor_MessageDateChange alloc];
  ImActorModelModulesMessagesConversationActor_MessageDateChange_initWithLong_withLong_(self, rid, date);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageDateChange)

@implementation ImActorModelModulesMessagesConversationActor_MessageError

- (instancetype)initWithLong:(jlong)rid {
  ImActorModelModulesMessagesConversationActor_MessageError_initWithLong_(self, rid);
  return self;
}

- (jlong)getRid {
  return rid_;
}

@end

void ImActorModelModulesMessagesConversationActor_MessageError_initWithLong_(ImActorModelModulesMessagesConversationActor_MessageError *self, jlong rid) {
  (void) NSObject_init(self);
  self->rid_ = rid;
}

ImActorModelModulesMessagesConversationActor_MessageError *new_ImActorModelModulesMessagesConversationActor_MessageError_initWithLong_(jlong rid) {
  ImActorModelModulesMessagesConversationActor_MessageError *self = [ImActorModelModulesMessagesConversationActor_MessageError alloc];
  ImActorModelModulesMessagesConversationActor_MessageError_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessageError)

@implementation ImActorModelModulesMessagesConversationActor_MessagesDeleted

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)rids {
  ImActorModelModulesMessagesConversationActor_MessagesDeleted_initWithJavaUtilList_(self, rids);
  return self;
}

- (id<JavaUtilList>)getRids {
  return rids_;
}

@end

void ImActorModelModulesMessagesConversationActor_MessagesDeleted_initWithJavaUtilList_(ImActorModelModulesMessagesConversationActor_MessagesDeleted *self, id<JavaUtilList> rids) {
  (void) NSObject_init(self);
  self->rids_ = rids;
}

ImActorModelModulesMessagesConversationActor_MessagesDeleted *new_ImActorModelModulesMessagesConversationActor_MessagesDeleted_initWithJavaUtilList_(id<JavaUtilList> rids) {
  ImActorModelModulesMessagesConversationActor_MessagesDeleted *self = [ImActorModelModulesMessagesConversationActor_MessagesDeleted alloc];
  ImActorModelModulesMessagesConversationActor_MessagesDeleted_initWithJavaUtilList_(self, rids);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_MessagesDeleted)

@implementation ImActorModelModulesMessagesConversationActor_ClearConversation

- (instancetype)init {
  ImActorModelModulesMessagesConversationActor_ClearConversation_init(self);
  return self;
}

@end

void ImActorModelModulesMessagesConversationActor_ClearConversation_init(ImActorModelModulesMessagesConversationActor_ClearConversation *self) {
  (void) NSObject_init(self);
}

ImActorModelModulesMessagesConversationActor_ClearConversation *new_ImActorModelModulesMessagesConversationActor_ClearConversation_init() {
  ImActorModelModulesMessagesConversationActor_ClearConversation *self = [ImActorModelModulesMessagesConversationActor_ClearConversation alloc];
  ImActorModelModulesMessagesConversationActor_ClearConversation_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_ClearConversation)

@implementation ImActorModelModulesMessagesConversationActor_DeleteConversation

- (instancetype)init {
  ImActorModelModulesMessagesConversationActor_DeleteConversation_init(self);
  return self;
}

@end

void ImActorModelModulesMessagesConversationActor_DeleteConversation_init(ImActorModelModulesMessagesConversationActor_DeleteConversation *self) {
  (void) NSObject_init(self);
}

ImActorModelModulesMessagesConversationActor_DeleteConversation *new_ImActorModelModulesMessagesConversationActor_DeleteConversation_init() {
  ImActorModelModulesMessagesConversationActor_DeleteConversation *self = [ImActorModelModulesMessagesConversationActor_DeleteConversation alloc];
  ImActorModelModulesMessagesConversationActor_DeleteConversation_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesMessagesConversationActor_DeleteConversation)
