//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-apps/core-crypto/src/main/java/org/bouncycastle/crypto/digests/SHA1Digest.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/bouncycastle/crypto/digests/GeneralDigest.h"
#include "org/bouncycastle/crypto/digests/SHA1Digest.h"
#include "org/bouncycastle/util/Memoable.h"
#include "org/bouncycastle/util/Pack.h"

#define OrgBouncycastleCryptoDigestsSHA1Digest_DIGEST_LENGTH 20
#define OrgBouncycastleCryptoDigestsSHA1Digest_Y1 1518500249
#define OrgBouncycastleCryptoDigestsSHA1Digest_Y2 1859775393
#define OrgBouncycastleCryptoDigestsSHA1Digest_Y3 -1894007588
#define OrgBouncycastleCryptoDigestsSHA1Digest_Y4 -899497514

@interface OrgBouncycastleCryptoDigestsSHA1Digest () {
 @public
  jint H1_, H2_, H3_, H4_, H5_;
  IOSIntArray *X_;
  jint xOff_;
}

- (void)copyInWithOrgBouncycastleCryptoDigestsSHA1Digest:(OrgBouncycastleCryptoDigestsSHA1Digest *)t OBJC_METHOD_FAMILY_NONE;

- (jint)fWithInt:(jint)u
         withInt:(jint)v
         withInt:(jint)w;

- (jint)hWithInt:(jint)u
         withInt:(jint)v
         withInt:(jint)w;

- (jint)gWithInt:(jint)u
         withInt:(jint)v
         withInt:(jint)w;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoDigestsSHA1Digest, X_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgBouncycastleCryptoDigestsSHA1Digest, DIGEST_LENGTH, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgBouncycastleCryptoDigestsSHA1Digest, Y1, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgBouncycastleCryptoDigestsSHA1Digest, Y2, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgBouncycastleCryptoDigestsSHA1Digest, Y3, jint)

J2OBJC_STATIC_FIELD_GETTER(OrgBouncycastleCryptoDigestsSHA1Digest, Y4, jint)

__attribute__((unused)) static void OrgBouncycastleCryptoDigestsSHA1Digest_copyInWithOrgBouncycastleCryptoDigestsSHA1Digest_(OrgBouncycastleCryptoDigestsSHA1Digest *self, OrgBouncycastleCryptoDigestsSHA1Digest *t);

__attribute__((unused)) static jint OrgBouncycastleCryptoDigestsSHA1Digest_fWithInt_withInt_withInt_(OrgBouncycastleCryptoDigestsSHA1Digest *self, jint u, jint v, jint w);

__attribute__((unused)) static jint OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(OrgBouncycastleCryptoDigestsSHA1Digest *self, jint u, jint v, jint w);

__attribute__((unused)) static jint OrgBouncycastleCryptoDigestsSHA1Digest_gWithInt_withInt_withInt_(OrgBouncycastleCryptoDigestsSHA1Digest *self, jint u, jint v, jint w);

@implementation OrgBouncycastleCryptoDigestsSHA1Digest

- (instancetype)init {
  OrgBouncycastleCryptoDigestsSHA1Digest_init(self);
  return self;
}

- (instancetype)initWithOrgBouncycastleCryptoDigestsSHA1Digest:(OrgBouncycastleCryptoDigestsSHA1Digest *)t {
  OrgBouncycastleCryptoDigestsSHA1Digest_initWithOrgBouncycastleCryptoDigestsSHA1Digest_(self, t);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)encodedState {
  OrgBouncycastleCryptoDigestsSHA1Digest_initWithByteArray_(self, encodedState);
  return self;
}

- (void)copyInWithOrgBouncycastleCryptoDigestsSHA1Digest:(OrgBouncycastleCryptoDigestsSHA1Digest *)t {
  OrgBouncycastleCryptoDigestsSHA1Digest_copyInWithOrgBouncycastleCryptoDigestsSHA1Digest_(self, t);
}

- (NSString *)getAlgorithmName {
  return @"SHA-1";
}

- (jint)getDigestSize {
  return OrgBouncycastleCryptoDigestsSHA1Digest_DIGEST_LENGTH;
}

- (void)processWordWithByteArray:(IOSByteArray *)inArg
                         withInt:(jint)inOff {
  jint n = LShift32(IOSByteArray_Get(nil_chk(inArg), inOff), 24);
  n |= LShift32((IOSByteArray_Get(inArg, ++inOff) & (jint) 0xff), 16);
  n |= LShift32((IOSByteArray_Get(inArg, ++inOff) & (jint) 0xff), 8);
  n |= (IOSByteArray_Get(inArg, ++inOff) & (jint) 0xff);
  *IOSIntArray_GetRef(nil_chk(X_), xOff_) = n;
  if (++xOff_ == 16) {
    [self processBlock];
  }
}

- (void)processLengthWithLong:(jlong)bitLength {
  if (xOff_ > 14) {
    [self processBlock];
  }
  *IOSIntArray_GetRef(nil_chk(X_), 14) = (jint) (URShift64(bitLength, 32));
  *IOSIntArray_GetRef(X_, 15) = (jint) (bitLength & (jint) 0xffffffff);
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  [self finish];
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H1_, outArg, outOff);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H2_, outArg, outOff + 4);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H3_, outArg, outOff + 8);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H4_, outArg, outOff + 12);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H5_, outArg, outOff + 16);
  [self reset];
  return OrgBouncycastleCryptoDigestsSHA1Digest_DIGEST_LENGTH;
}

- (void)reset {
  [super reset];
  H1_ = (jint) 0x67452301;
  H2_ = (jint) 0xefcdab89;
  H3_ = (jint) 0x98badcfe;
  H4_ = (jint) 0x10325476;
  H5_ = (jint) 0xc3d2e1f0;
  xOff_ = 0;
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(X_))->size_; i++) {
    *IOSIntArray_GetRef(X_, i) = 0;
  }
}

- (jint)fWithInt:(jint)u
         withInt:(jint)v
         withInt:(jint)w {
  return OrgBouncycastleCryptoDigestsSHA1Digest_fWithInt_withInt_withInt_(self, u, v, w);
}

- (jint)hWithInt:(jint)u
         withInt:(jint)v
         withInt:(jint)w {
  return OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, u, v, w);
}

- (jint)gWithInt:(jint)u
         withInt:(jint)v
         withInt:(jint)w {
  return OrgBouncycastleCryptoDigestsSHA1Digest_gWithInt_withInt_withInt_(self, u, v, w);
}

- (void)processBlock {
  for (jint i = 16; i < 80; i++) {
    jint t = IOSIntArray_Get(nil_chk(X_), i - 3) ^ IOSIntArray_Get(X_, i - 8) ^ IOSIntArray_Get(X_, i - 14) ^ IOSIntArray_Get(X_, i - 16);
    *IOSIntArray_GetRef(X_, i) = (LShift32(t, 1)) | (URShift32(t, 31));
  }
  jint A = H1_;
  jint B = H2_;
  jint C = H3_;
  jint D = H4_;
  jint E = H5_;
  jint idx = 0;
  for (jint j = 0; j < 4; j++) {
    E += ((LShift32(A, 5)) | (URShift32(A, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_fWithInt_withInt_withInt_(self, B, C, D) + IOSIntArray_Get(nil_chk(X_), idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y1;
    B = (LShift32(B, 30)) | (URShift32(B, 2));
    D += ((LShift32(E, 5)) | (URShift32(E, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_fWithInt_withInt_withInt_(self, A, B, C) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y1;
    A = (LShift32(A, 30)) | (URShift32(A, 2));
    C += ((LShift32(D, 5)) | (URShift32(D, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_fWithInt_withInt_withInt_(self, E, A, B) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y1;
    E = (LShift32(E, 30)) | (URShift32(E, 2));
    B += ((LShift32(C, 5)) | (URShift32(C, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_fWithInt_withInt_withInt_(self, D, E, A) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y1;
    D = (LShift32(D, 30)) | (URShift32(D, 2));
    A += ((LShift32(B, 5)) | (URShift32(B, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_fWithInt_withInt_withInt_(self, C, D, E) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y1;
    C = (LShift32(C, 30)) | (URShift32(C, 2));
  }
  for (jint j = 0; j < 4; j++) {
    E += ((LShift32(A, 5)) | (URShift32(A, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, B, C, D) + IOSIntArray_Get(nil_chk(X_), idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y2;
    B = (LShift32(B, 30)) | (URShift32(B, 2));
    D += ((LShift32(E, 5)) | (URShift32(E, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, A, B, C) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y2;
    A = (LShift32(A, 30)) | (URShift32(A, 2));
    C += ((LShift32(D, 5)) | (URShift32(D, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, E, A, B) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y2;
    E = (LShift32(E, 30)) | (URShift32(E, 2));
    B += ((LShift32(C, 5)) | (URShift32(C, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, D, E, A) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y2;
    D = (LShift32(D, 30)) | (URShift32(D, 2));
    A += ((LShift32(B, 5)) | (URShift32(B, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, C, D, E) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y2;
    C = (LShift32(C, 30)) | (URShift32(C, 2));
  }
  for (jint j = 0; j < 4; j++) {
    E += ((LShift32(A, 5)) | (URShift32(A, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_gWithInt_withInt_withInt_(self, B, C, D) + IOSIntArray_Get(nil_chk(X_), idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y3;
    B = (LShift32(B, 30)) | (URShift32(B, 2));
    D += ((LShift32(E, 5)) | (URShift32(E, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_gWithInt_withInt_withInt_(self, A, B, C) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y3;
    A = (LShift32(A, 30)) | (URShift32(A, 2));
    C += ((LShift32(D, 5)) | (URShift32(D, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_gWithInt_withInt_withInt_(self, E, A, B) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y3;
    E = (LShift32(E, 30)) | (URShift32(E, 2));
    B += ((LShift32(C, 5)) | (URShift32(C, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_gWithInt_withInt_withInt_(self, D, E, A) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y3;
    D = (LShift32(D, 30)) | (URShift32(D, 2));
    A += ((LShift32(B, 5)) | (URShift32(B, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_gWithInt_withInt_withInt_(self, C, D, E) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y3;
    C = (LShift32(C, 30)) | (URShift32(C, 2));
  }
  for (jint j = 0; j <= 3; j++) {
    E += ((LShift32(A, 5)) | (URShift32(A, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, B, C, D) + IOSIntArray_Get(nil_chk(X_), idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y4;
    B = (LShift32(B, 30)) | (URShift32(B, 2));
    D += ((LShift32(E, 5)) | (URShift32(E, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, A, B, C) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y4;
    A = (LShift32(A, 30)) | (URShift32(A, 2));
    C += ((LShift32(D, 5)) | (URShift32(D, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, E, A, B) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y4;
    E = (LShift32(E, 30)) | (URShift32(E, 2));
    B += ((LShift32(C, 5)) | (URShift32(C, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, D, E, A) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y4;
    D = (LShift32(D, 30)) | (URShift32(D, 2));
    A += ((LShift32(B, 5)) | (URShift32(B, 27))) + OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(self, C, D, E) + IOSIntArray_Get(X_, idx++) + OrgBouncycastleCryptoDigestsSHA1Digest_Y4;
    C = (LShift32(C, 30)) | (URShift32(C, 2));
  }
  H1_ += A;
  H2_ += B;
  H3_ += C;
  H4_ += D;
  H5_ += E;
  xOff_ = 0;
  for (jint i = 0; i < 16; i++) {
    *IOSIntArray_GetRef(nil_chk(X_), i) = 0;
  }
}

- (id<OrgBouncycastleUtilMemoable>)copy__ {
  return new_OrgBouncycastleCryptoDigestsSHA1Digest_initWithOrgBouncycastleCryptoDigestsSHA1Digest_(self);
}

- (void)resetWithOrgBouncycastleUtilMemoable:(id<OrgBouncycastleUtilMemoable>)other {
  OrgBouncycastleCryptoDigestsSHA1Digest *d = (OrgBouncycastleCryptoDigestsSHA1Digest *) check_class_cast(other, [OrgBouncycastleCryptoDigestsSHA1Digest class]);
  [super copyInWithOrgBouncycastleCryptoDigestsGeneralDigest:d];
  OrgBouncycastleCryptoDigestsSHA1Digest_copyInWithOrgBouncycastleCryptoDigestsSHA1Digest_(self, d);
}

- (IOSByteArray *)getEncodedState {
  IOSByteArray *state = [IOSByteArray newArrayWithLength:40 + xOff_ * 4];
  [super populateStateWithByteArray:state];
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H1_, state, 16);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H2_, state, 20);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H3_, state, 24);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H4_, state, 28);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(H5_, state, 32);
  OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(xOff_, state, 36);
  for (jint i = 0; i != xOff_; i++) {
    OrgBouncycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(IOSIntArray_Get(nil_chk(X_), i), state, 40 + (i * 4));
  }
  return state;
}

@end

void OrgBouncycastleCryptoDigestsSHA1Digest_init(OrgBouncycastleCryptoDigestsSHA1Digest *self) {
  (void) OrgBouncycastleCryptoDigestsGeneralDigest_init(self);
  self->X_ = [IOSIntArray newArrayWithLength:80];
  [self reset];
}

OrgBouncycastleCryptoDigestsSHA1Digest *new_OrgBouncycastleCryptoDigestsSHA1Digest_init() {
  OrgBouncycastleCryptoDigestsSHA1Digest *self = [OrgBouncycastleCryptoDigestsSHA1Digest alloc];
  OrgBouncycastleCryptoDigestsSHA1Digest_init(self);
  return self;
}

void OrgBouncycastleCryptoDigestsSHA1Digest_initWithOrgBouncycastleCryptoDigestsSHA1Digest_(OrgBouncycastleCryptoDigestsSHA1Digest *self, OrgBouncycastleCryptoDigestsSHA1Digest *t) {
  (void) OrgBouncycastleCryptoDigestsGeneralDigest_initWithOrgBouncycastleCryptoDigestsGeneralDigest_(self, t);
  self->X_ = [IOSIntArray newArrayWithLength:80];
  OrgBouncycastleCryptoDigestsSHA1Digest_copyInWithOrgBouncycastleCryptoDigestsSHA1Digest_(self, t);
}

OrgBouncycastleCryptoDigestsSHA1Digest *new_OrgBouncycastleCryptoDigestsSHA1Digest_initWithOrgBouncycastleCryptoDigestsSHA1Digest_(OrgBouncycastleCryptoDigestsSHA1Digest *t) {
  OrgBouncycastleCryptoDigestsSHA1Digest *self = [OrgBouncycastleCryptoDigestsSHA1Digest alloc];
  OrgBouncycastleCryptoDigestsSHA1Digest_initWithOrgBouncycastleCryptoDigestsSHA1Digest_(self, t);
  return self;
}

void OrgBouncycastleCryptoDigestsSHA1Digest_initWithByteArray_(OrgBouncycastleCryptoDigestsSHA1Digest *self, IOSByteArray *encodedState) {
  (void) OrgBouncycastleCryptoDigestsGeneralDigest_initWithByteArray_(self, encodedState);
  self->X_ = [IOSIntArray newArrayWithLength:80];
  self->H1_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 16);
  self->H2_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 20);
  self->H3_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 24);
  self->H4_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 28);
  self->H5_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 32);
  self->xOff_ = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 36);
  for (jint i = 0; i != self->xOff_; i++) {
    *IOSIntArray_GetRef(self->X_, i) = OrgBouncycastleUtilPack_bigEndianToIntWithByteArray_withInt_(encodedState, 40 + (i * 4));
  }
}

OrgBouncycastleCryptoDigestsSHA1Digest *new_OrgBouncycastleCryptoDigestsSHA1Digest_initWithByteArray_(IOSByteArray *encodedState) {
  OrgBouncycastleCryptoDigestsSHA1Digest *self = [OrgBouncycastleCryptoDigestsSHA1Digest alloc];
  OrgBouncycastleCryptoDigestsSHA1Digest_initWithByteArray_(self, encodedState);
  return self;
}

void OrgBouncycastleCryptoDigestsSHA1Digest_copyInWithOrgBouncycastleCryptoDigestsSHA1Digest_(OrgBouncycastleCryptoDigestsSHA1Digest *self, OrgBouncycastleCryptoDigestsSHA1Digest *t) {
  self->H1_ = ((OrgBouncycastleCryptoDigestsSHA1Digest *) nil_chk(t))->H1_;
  self->H2_ = t->H2_;
  self->H3_ = t->H3_;
  self->H4_ = t->H4_;
  self->H5_ = t->H5_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(t->X_, 0, self->X_, 0, ((IOSIntArray *) nil_chk(t->X_))->size_);
  self->xOff_ = t->xOff_;
}

jint OrgBouncycastleCryptoDigestsSHA1Digest_fWithInt_withInt_withInt_(OrgBouncycastleCryptoDigestsSHA1Digest *self, jint u, jint v, jint w) {
  return ((u & v) | ((~u) & w));
}

jint OrgBouncycastleCryptoDigestsSHA1Digest_hWithInt_withInt_withInt_(OrgBouncycastleCryptoDigestsSHA1Digest *self, jint u, jint v, jint w) {
  return (u ^ v ^ w);
}

jint OrgBouncycastleCryptoDigestsSHA1Digest_gWithInt_withInt_withInt_(OrgBouncycastleCryptoDigestsSHA1Digest *self, jint u, jint v, jint w) {
  return ((u & v) | (u & w) | (v & w));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoDigestsSHA1Digest)
