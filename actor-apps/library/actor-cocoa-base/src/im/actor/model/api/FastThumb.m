//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/im/actor/model/api/FastThumb.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/api/FastThumb.h"
#include "im/actor/model/droidkit/bser/BserObject.h"
#include "im/actor/model/droidkit/bser/BserValues.h"
#include "im/actor/model/droidkit/bser/BserWriter.h"
#include "im/actor/model/droidkit/bser/Utils.h"
#include "im/actor/model/droidkit/bser/util/SparseArray.h"
#include "java/io/IOException.h"

@interface APFastThumb () {
 @public
  jint w_;
  jint h_;
  IOSByteArray *thumb_;
}

@end

J2OBJC_FIELD_SETTER(APFastThumb, thumb_, IOSByteArray *)

@implementation APFastThumb

- (instancetype)initWithInt:(jint)w
                    withInt:(jint)h
              withByteArray:(IOSByteArray *)thumb {
  APFastThumb_initWithInt_withInt_withByteArray_(self, w, h, thumb);
  return self;
}

- (instancetype)init {
  APFastThumb_init(self);
  return self;
}

- (jint)getW {
  return self->w_;
}

- (jint)getH {
  return self->h_;
}

- (IOSByteArray *)getThumb {
  return self->thumb_;
}

- (void)parseWithBSBserValues:(BSBserValues *)values {
  self->w_ = [((BSBserValues *) nil_chk(values)) getIntWithInt:1];
  self->h_ = [values getIntWithInt:2];
  self->thumb_ = [values getBytesWithInt:3];
  if ([values hasRemaining]) {
    [self setUnmappedObjectsWithImActorModelDroidkitBserUtilSparseArray:[values buildRemaining]];
  }
}

- (void)serializeWithBSBserWriter:(BSBserWriter *)writer {
  [((BSBserWriter *) nil_chk(writer)) writeIntWithInt:1 withInt:self->w_];
  [writer writeIntWithInt:2 withInt:self->h_];
  if (self->thumb_ == nil) {
    @throw new_JavaIoIOException_init();
  }
  [writer writeBytesWithInt:3 withByteArray:self->thumb_];
  if ([self getUnmappedObjects] != nil) {
    ImActorModelDroidkitBserUtilSparseArray *unmapped = [self getUnmappedObjects];
    for (jint i = 0; i < [((ImActorModelDroidkitBserUtilSparseArray *) nil_chk(unmapped)) size]; i++) {
      jint key = [unmapped keyAtWithInt:i];
      [writer writeUnmappedWithInt:key withId:[unmapped getWithInt:key]];
    }
  }
}

- (NSString *)description {
  NSString *res = @"struct FastThumb{";
  res = JreStrcat("$$", res, JreStrcat("$I", @"w=", self->w_));
  res = JreStrcat("$$", res, JreStrcat("$I", @", h=", self->h_));
  res = JreStrcat("$$", res, JreStrcat("$$", @", thumb=", BSUtils_byteArrayToStringCompactWithByteArray_(self->thumb_)));
  res = JreStrcat("$C", res, '}');
  return res;
}

@end

void APFastThumb_initWithInt_withInt_withByteArray_(APFastThumb *self, jint w, jint h, IOSByteArray *thumb) {
  (void) BSBserObject_init(self);
  self->w_ = w;
  self->h_ = h;
  self->thumb_ = thumb;
}

APFastThumb *new_APFastThumb_initWithInt_withInt_withByteArray_(jint w, jint h, IOSByteArray *thumb) {
  APFastThumb *self = [APFastThumb alloc];
  APFastThumb_initWithInt_withInt_withByteArray_(self, w, h, thumb);
  return self;
}

void APFastThumb_init(APFastThumb *self) {
  (void) BSBserObject_init(self);
}

APFastThumb *new_APFastThumb_init() {
  APFastThumb *self = [APFastThumb alloc];
  APFastThumb_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(APFastThumb)
