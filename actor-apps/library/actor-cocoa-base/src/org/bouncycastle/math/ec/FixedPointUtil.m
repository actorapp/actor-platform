//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-model/library/actor-cocoa-base/build/java/org/bouncycastle/math/ec/FixedPointUtil.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/FixedPointPreCompInfo.h"
#include "org/bouncycastle/math/ec/FixedPointUtil.h"
#include "org/bouncycastle/math/ec/PreCompInfo.h"

NSString *OrgBouncycastleMathEcFixedPointUtil_PRECOMP_NAME_ = @"bc_fixed_point";

@implementation OrgBouncycastleMathEcFixedPointUtil

+ (jint)getCombSizeWithOrgBouncycastleMathEcECCurve:(OrgBouncycastleMathEcECCurve *)c {
  return OrgBouncycastleMathEcFixedPointUtil_getCombSizeWithOrgBouncycastleMathEcECCurve_(c);
}

+ (OrgBouncycastleMathEcFixedPointPreCompInfo *)getFixedPointPreCompInfoWithOrgBouncycastleMathEcPreCompInfo:(id<OrgBouncycastleMathEcPreCompInfo>)preCompInfo {
  return OrgBouncycastleMathEcFixedPointUtil_getFixedPointPreCompInfoWithOrgBouncycastleMathEcPreCompInfo_(preCompInfo);
}

+ (OrgBouncycastleMathEcFixedPointPreCompInfo *)precomputeWithOrgBouncycastleMathEcECPoint:(OrgBouncycastleMathEcECPoint *)p
                                                                                   withInt:(jint)minWidth {
  return OrgBouncycastleMathEcFixedPointUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_(p, minWidth);
}

- (instancetype)init {
  OrgBouncycastleMathEcFixedPointUtil_init(self);
  return self;
}

@end

jint OrgBouncycastleMathEcFixedPointUtil_getCombSizeWithOrgBouncycastleMathEcECCurve_(OrgBouncycastleMathEcECCurve *c) {
  OrgBouncycastleMathEcFixedPointUtil_initialize();
  JavaMathBigInteger *order = [((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getOrder];
  return order == nil ? [c getFieldSize] + 1 : [order bitLength];
}

OrgBouncycastleMathEcFixedPointPreCompInfo *OrgBouncycastleMathEcFixedPointUtil_getFixedPointPreCompInfoWithOrgBouncycastleMathEcPreCompInfo_(id<OrgBouncycastleMathEcPreCompInfo> preCompInfo) {
  OrgBouncycastleMathEcFixedPointUtil_initialize();
  if ((preCompInfo != nil) && ([preCompInfo isKindOfClass:[OrgBouncycastleMathEcFixedPointPreCompInfo class]])) {
    return (OrgBouncycastleMathEcFixedPointPreCompInfo *) check_class_cast(preCompInfo, [OrgBouncycastleMathEcFixedPointPreCompInfo class]);
  }
  return new_OrgBouncycastleMathEcFixedPointPreCompInfo_init();
}

OrgBouncycastleMathEcFixedPointPreCompInfo *OrgBouncycastleMathEcFixedPointUtil_precomputeWithOrgBouncycastleMathEcECPoint_withInt_(OrgBouncycastleMathEcECPoint *p, jint minWidth) {
  OrgBouncycastleMathEcFixedPointUtil_initialize();
  OrgBouncycastleMathEcECCurve *c = [((OrgBouncycastleMathEcECPoint *) nil_chk(p)) getCurve];
  jint n = LShift32(1, minWidth);
  OrgBouncycastleMathEcFixedPointPreCompInfo *info = OrgBouncycastleMathEcFixedPointUtil_getFixedPointPreCompInfoWithOrgBouncycastleMathEcPreCompInfo_([((OrgBouncycastleMathEcECCurve *) nil_chk(c)) getPreCompInfoWithOrgBouncycastleMathEcECPoint:p withNSString:OrgBouncycastleMathEcFixedPointUtil_PRECOMP_NAME_]);
  IOSObjectArray *lookupTable = [((OrgBouncycastleMathEcFixedPointPreCompInfo *) nil_chk(info)) getPreComp];
  if (lookupTable == nil || lookupTable->size_ < n) {
    jint bits = OrgBouncycastleMathEcFixedPointUtil_getCombSizeWithOrgBouncycastleMathEcECCurve_(c);
    jint d = (bits + minWidth - 1) / minWidth;
    IOSObjectArray *pow2Table = [IOSObjectArray newArrayWithLength:minWidth type:OrgBouncycastleMathEcECPoint_class_()];
    (void) IOSObjectArray_Set(pow2Table, 0, p);
    for (jint i = 1; i < minWidth; ++i) {
      (void) IOSObjectArray_Set(pow2Table, i, [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(pow2Table, i - 1))) timesPow2WithInt:d]);
    }
    [c normalizeAllWithOrgBouncycastleMathEcECPointArray:pow2Table];
    lookupTable = [IOSObjectArray newArrayWithLength:n type:OrgBouncycastleMathEcECPoint_class_()];
    (void) IOSObjectArray_Set(lookupTable, 0, [c getInfinity]);
    for (jint bit = minWidth - 1; bit >= 0; --bit) {
      OrgBouncycastleMathEcECPoint *pow2 = IOSObjectArray_Get(pow2Table, bit);
      jint step = LShift32(1, bit);
      for (jint i = step; i < n; i += (LShift32(step, 1))) {
        (void) IOSObjectArray_Set(lookupTable, i, [((OrgBouncycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(lookupTable, i - step))) addWithOrgBouncycastleMathEcECPoint:pow2]);
      }
    }
    [c normalizeAllWithOrgBouncycastleMathEcECPointArray:lookupTable];
    [info setPreCompWithOrgBouncycastleMathEcECPointArray:lookupTable];
    [info setWidthWithInt:minWidth];
    [c setPreCompInfoWithOrgBouncycastleMathEcECPoint:p withNSString:OrgBouncycastleMathEcFixedPointUtil_PRECOMP_NAME_ withOrgBouncycastleMathEcPreCompInfo:info];
  }
  return info;
}

void OrgBouncycastleMathEcFixedPointUtil_init(OrgBouncycastleMathEcFixedPointUtil *self) {
  (void) NSObject_init(self);
}

OrgBouncycastleMathEcFixedPointUtil *new_OrgBouncycastleMathEcFixedPointUtil_init() {
  OrgBouncycastleMathEcFixedPointUtil *self = [OrgBouncycastleMathEcFixedPointUtil alloc];
  OrgBouncycastleMathEcFixedPointUtil_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcFixedPointUtil)
