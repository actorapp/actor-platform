task cleanBuildSources(type: Delete) {
    delete "${buildDir}/web/"
}

task copySources(type: Copy) {
    from fileTree("${projectDir}/../actor-web/")

    into "${buildDir}/web/"
}

task npmInstall(type: Exec, dependsOn: ['copySources']) {
    workingDir "${buildDir}/web/"
    commandLine 'npm', 'install'
}

task bowerInstall(type: Exec, dependsOn: ['npmInstall']) {
    workingDir "${buildDir}/web/"
    commandLine 'bower', 'install'
}

task gulpBuild(type: Exec, dependsOn: ['bowerInstall']) {
    workingDir "${buildDir}/web/"
    commandLine 'gulp', 'build'
}

task buildWeb (dependsOn: ['gulpBuild']) {

}

task copyAppBootstrap {
    doLast {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        delete {
            "${buildDir}/electron"
        }

        exec {
            commandLine 'mkdir', "${buildDir}/electron"
        }

        exec {
            commandLine 'cp', '-R', "${properties.get("electronDir")}/0.25.2/Electron.app", "${buildDir}/electron/Actor.app"
        }

        exec {
            commandLine 'cp', '-R', "${properties.get("electronDir")}/0.25.2/Electron-linux-x64", "${buildDir}/electron/Actor-linux-x64"
        }

        exec {
            commandLine 'cp', '-R', "${properties.get("electronDir")}/0.25.2/Electron-linux-ia32", "${buildDir}/electron/Actor-linux-ia32"
        }

        exec {
            commandLine 'cp', '-R', "${properties.get("electronDir")}/0.25.2/Electron-windows-x64", "${buildDir}/electron/Actor-windows-x64"
        }

        exec {
            commandLine 'cp', '-R', "${properties.get("electronDir")}/0.25.2/Electron-windows-ia32", "${buildDir}/electron/Actor-windows-ia32"
        }
    }
}

task buildAsar (type: Exec, dependsOn: ['buildWeb', 'copyAppBootstrap']) {
    commandLine 'asar', 'pack', "${buildDir}/web/dist", "${buildDir}/electron/app.asar"
}

task prepareBuild (dependsOn: ['buildAsar']) {
    doLast {
        exec {
            commandLine 'rm', '-fr', "${buildDir}/dist"
        }
        exec {
            commandLine 'mkdir', "${buildDir}/dist"
        }
    }
}

task buildOSXApp (dependsOn: ['prepareBuild']) {
    doLast {
        copy {
            from "${buildDir}/electron/app.asar"
            into "${buildDir}/electron/Actor.app/Contents/Resources/"
        }

        exec {
            workingDir "${buildDir}/electron/"
            commandLine 'zip', '--symlinks', '-r', '../dist/Actor-Mac.zip', "Actor.app"
        }
    }
}

task buildLinuxApp (dependsOn: ['prepareBuild']) {
    doLast {
        copy {
            from "${buildDir}/electron/app.asar"
            into "${buildDir}/electron/Actor-linux-x64/resources/"
        }
        copy {
            from "${buildDir}/electron/app.asar"
            into "${buildDir}/electron/Actor-linux-ia32/resources/"
        }

        exec {
            workingDir "${buildDir}/electron/"
            commandLine 'zip', '--symlinks', '-r', '../dist/Actor-Linux-ia32.zip', "Actor-linux-ia32"
        }

        exec {
            workingDir "${buildDir}/electron/"
            commandLine 'zip', '--symlinks', '-r', '../dist/Actor-Linux-x64.zip', "Actor-linux-x64"
        }
    }
}

task buildWindowsApp (dependsOn: ['prepareBuild']) {
    doLast {
        copy {
            from "${buildDir}/electron/app.asar"
            into "${buildDir}/electron/Actor-windows-x64/resources/"
        }
        copy {
            from "${buildDir}/electron/app.asar"
            into "${buildDir}/electron/Actor-windows-ia32/resources/"
        }

        exec {
            workingDir "${buildDir}/electron/"
            commandLine 'zip', '--symlinks', '-r', '../dist/Actor-Windows-ia32.zip', "Actor-windows-ia32"
        }

        exec {
            workingDir "${buildDir}/electron/"
            commandLine 'zip', '--symlinks', '-r', '../dist/Actor-Windows-x64.zip', "Actor-windows-x64"
        }
    }
}

task buildApps (dependsOn: ['buildOSXApp', 'buildLinuxApp', 'buildWindowsApp']) {

}

task build(dependsOn: ['buildApps']) {

}