//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-platform/actor-apps/core-crypto/src/main/java/org/bouncycastle/crypto/modes/CBCBlockCipher.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/bouncycastle/crypto/BlockCipher.h"
#include "org/bouncycastle/crypto/CipherParameters.h"
#include "org/bouncycastle/crypto/DataLengthException.h"
#include "org/bouncycastle/crypto/modes/CBCBlockCipher.h"
#include "org/bouncycastle/crypto/params/ParametersWithIV.h"
#include "org/bouncycastle/util/Arrays.h"

@interface OrgBouncycastleCryptoModesCBCBlockCipher () {
 @public
  IOSByteArray *IV_;
  IOSByteArray *cbcV_;
  IOSByteArray *cbcNextV_;
  jint blockSize_;
  id<OrgBouncycastleCryptoBlockCipher> cipher_;
  jboolean encrypting_;
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoModesCBCBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoModesCBCBlockCipher, cbcV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoModesCBCBlockCipher, cbcNextV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgBouncycastleCryptoModesCBCBlockCipher, cipher_, id<OrgBouncycastleCryptoBlockCipher>)

__attribute__((unused)) static jint OrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

@implementation OrgBouncycastleCryptoModesCBCBlockCipher

- (instancetype)initWithOrgBouncycastleCryptoBlockCipher:(id<OrgBouncycastleCryptoBlockCipher>)cipher {
  OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (id<OrgBouncycastleCryptoBlockCipher>)getUnderlyingCipher {
  return cipher_;
}

- (void)init__WithBoolean:(jboolean)encrypting
withOrgBouncycastleCryptoCipherParameters:(id<OrgBouncycastleCryptoCipherParameters>)params {
  jboolean oldEncrypting = self->encrypting_;
  self->encrypting_ = encrypting;
  if ([params isKindOfClass:[OrgBouncycastleCryptoParamsParametersWithIV class]]) {
    OrgBouncycastleCryptoParamsParametersWithIV *ivParam = (OrgBouncycastleCryptoParamsParametersWithIV *) check_class_cast(params, [OrgBouncycastleCryptoParamsParametersWithIV class]);
    IOSByteArray *iv = [((OrgBouncycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV];
    if (((IOSByteArray *) nil_chk(iv))->size_ != blockSize_) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"initialisation vector must be the same length as block size");
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, 0, iv->size_);
    [self reset];
    if ([ivParam getParameters] != nil) {
      [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:encrypting withOrgBouncycastleCryptoCipherParameters:[ivParam getParameters]];
    }
    else if (oldEncrypting != encrypting) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot change encrypting state without providing key.");
    }
  }
  else {
    [self reset];
    if (params != nil) {
      [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:encrypting withOrgBouncycastleCryptoCipherParameters:params];
    }
    else if (oldEncrypting != encrypting) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cannot change encrypting state without providing key.");
    }
  }
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getAlgorithmName], @"/CBC");
}

- (jint)getBlockSize {
  return [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return (encrypting_) ? OrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff) : OrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)reset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, cbcV_, 0, ((IOSByteArray *) nil_chk(IV_))->size_);
  OrgBouncycastleUtilArrays_fillWithByteArray_withByte_(cbcNextV_, (jbyte) 0);
  [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

@end

void OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(OrgBouncycastleCryptoModesCBCBlockCipher *self, id<OrgBouncycastleCryptoBlockCipher> cipher) {
  (void) NSObject_init(self);
  self->cipher_ = nil;
  self->cipher_ = cipher;
  self->blockSize_ = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  self->IV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->cbcV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->cbcNextV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
}

OrgBouncycastleCryptoModesCBCBlockCipher *new_OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(id<OrgBouncycastleCryptoBlockCipher> cipher) {
  OrgBouncycastleCryptoModesCBCBlockCipher *self = [OrgBouncycastleCryptoModesCBCBlockCipher alloc];
  OrgBouncycastleCryptoModesCBCBlockCipher_initWithOrgBouncycastleCryptoBlockCipher_(self, cipher);
  return self;
}

jint OrgBouncycastleCryptoModesCBCBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  if ((inOff + self->blockSize_) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  for (jint i = 0; i < self->blockSize_; i++) {
    *IOSByteArray_GetRef(nil_chk(self->cbcV_), i) ^= IOSByteArray_Get(inArg, inOff + i);
  }
  jint length = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->cbcV_ withInt:0 withByteArray:outArg withInt:outOff];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outArg, outOff, self->cbcV_, 0, ((IOSByteArray *) nil_chk(self->cbcV_))->size_);
  return length;
}

jint OrgBouncycastleCryptoModesCBCBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgBouncycastleCryptoModesCBCBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  if ((inOff + self->blockSize_) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgBouncycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, self->cbcNextV_, 0, self->blockSize_);
  jint length = [((id<OrgBouncycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff];
  for (jint i = 0; i < self->blockSize_; i++) {
    *IOSByteArray_GetRef(nil_chk(outArg), outOff + i) ^= IOSByteArray_Get(nil_chk(self->cbcV_), i);
  }
  IOSByteArray *tmp;
  tmp = self->cbcV_;
  self->cbcV_ = self->cbcNextV_;
  self->cbcNextV_ = tmp;
  return length;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleCryptoModesCBCBlockCipher)
