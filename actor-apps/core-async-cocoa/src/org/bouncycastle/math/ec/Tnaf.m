//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-apps/core-crypto/src/main/java/org/bouncycastle/math/ec/Tnaf.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/math/ec/ECConstants.h"
#include "org/bouncycastle/math/ec/ECCurve.h"
#include "org/bouncycastle/math/ec/ECFieldElement.h"
#include "org/bouncycastle/math/ec/ECPoint.h"
#include "org/bouncycastle/math/ec/SimpleBigDecimal.h"
#include "org/bouncycastle/math/ec/Tnaf.h"
#include "org/bouncycastle/math/ec/ZTauElement.h"

static JavaMathBigInteger *OrgBouncycastleMathEcTnaf_MINUS_ONE_;
J2OBJC_STATIC_FIELD_GETTER(OrgBouncycastleMathEcTnaf, MINUS_ONE_, JavaMathBigInteger *)

static JavaMathBigInteger *OrgBouncycastleMathEcTnaf_MINUS_TWO_;
J2OBJC_STATIC_FIELD_GETTER(OrgBouncycastleMathEcTnaf, MINUS_TWO_, JavaMathBigInteger *)

static JavaMathBigInteger *OrgBouncycastleMathEcTnaf_MINUS_THREE_;
J2OBJC_STATIC_FIELD_GETTER(OrgBouncycastleMathEcTnaf, MINUS_THREE_, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(OrgBouncycastleMathEcTnaf)

IOSObjectArray *OrgBouncycastleMathEcTnaf_alpha0_;
IOSObjectArray *OrgBouncycastleMathEcTnaf_alpha0Tnaf_;
IOSObjectArray *OrgBouncycastleMathEcTnaf_alpha1_;
IOSObjectArray *OrgBouncycastleMathEcTnaf_alpha1Tnaf_;

@implementation OrgBouncycastleMathEcTnaf

+ (JavaMathBigInteger *)normWithByte:(jbyte)mu
withOrgBouncycastleMathEcZTauElement:(OrgBouncycastleMathEcZTauElement *)lambda {
  return OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcZTauElement_(mu, lambda);
}

+ (OrgBouncycastleMathEcSimpleBigDecimal *)normWithByte:(jbyte)mu
              withOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)u
              withOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)v {
  return OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcSimpleBigDecimal_withOrgBouncycastleMathEcSimpleBigDecimal_(mu, u, v);
}

+ (OrgBouncycastleMathEcZTauElement *)roundWithOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)lambda0
                                           withOrgBouncycastleMathEcSimpleBigDecimal:(OrgBouncycastleMathEcSimpleBigDecimal *)lambda1
                                                                            withByte:(jbyte)mu {
  return OrgBouncycastleMathEcTnaf_roundWithOrgBouncycastleMathEcSimpleBigDecimal_withOrgBouncycastleMathEcSimpleBigDecimal_withByte_(lambda0, lambda1, mu);
}

+ (OrgBouncycastleMathEcSimpleBigDecimal *)approximateDivisionByNWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)s
                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)vm
                                                                               withByte:(jbyte)a
                                                                                withInt:(jint)m
                                                                                withInt:(jint)c {
  return OrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(k, s, vm, a, m, c);
}

+ (IOSByteArray *)tauAdicNafWithByte:(jbyte)mu
withOrgBouncycastleMathEcZTauElement:(OrgBouncycastleMathEcZTauElement *)lambda {
  return OrgBouncycastleMathEcTnaf_tauAdicNafWithByte_withOrgBouncycastleMathEcZTauElement_(mu, lambda);
}

+ (OrgBouncycastleMathEcECPoint_F2m *)tauWithOrgBouncycastleMathEcECPoint_F2m:(OrgBouncycastleMathEcECPoint_F2m *)p {
  return OrgBouncycastleMathEcTnaf_tauWithOrgBouncycastleMathEcECPoint_F2m_(p);
}

+ (jbyte)getMuWithOrgBouncycastleMathEcECCurve_F2m:(OrgBouncycastleMathEcECCurve_F2m *)curve {
  return OrgBouncycastleMathEcTnaf_getMuWithOrgBouncycastleMathEcECCurve_F2m_(curve);
}

+ (IOSObjectArray *)getLucasWithByte:(jbyte)mu
                             withInt:(jint)k
                         withBoolean:(jboolean)doV {
  return OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, k, doV);
}

+ (JavaMathBigInteger *)getTwWithByte:(jbyte)mu
                              withInt:(jint)w {
  return OrgBouncycastleMathEcTnaf_getTwWithByte_withInt_(mu, w);
}

+ (IOSObjectArray *)getSiWithOrgBouncycastleMathEcECCurve_F2m:(OrgBouncycastleMathEcECCurve_F2m *)curve {
  return OrgBouncycastleMathEcTnaf_getSiWithOrgBouncycastleMathEcECCurve_F2m_(curve);
}

+ (jint)getShiftsForCofactorWithJavaMathBigInteger:(JavaMathBigInteger *)h {
  return OrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(h);
}

+ (OrgBouncycastleMathEcZTauElement *)partModReductionWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                                                     withInt:(jint)m
                                                                    withByte:(jbyte)a
                                                 withJavaMathBigIntegerArray:(IOSObjectArray *)s
                                                                    withByte:(jbyte)mu
                                                                    withByte:(jbyte)c {
  return OrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(k, m, a, s, mu, c);
}

+ (OrgBouncycastleMathEcECPoint_F2m *)multiplyRTnafWithOrgBouncycastleMathEcECPoint_F2m:(OrgBouncycastleMathEcECPoint_F2m *)p
                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)k {
  return OrgBouncycastleMathEcTnaf_multiplyRTnafWithOrgBouncycastleMathEcECPoint_F2m_withJavaMathBigInteger_(p, k);
}

+ (OrgBouncycastleMathEcECPoint_F2m *)multiplyTnafWithOrgBouncycastleMathEcECPoint_F2m:(OrgBouncycastleMathEcECPoint_F2m *)p
                                                  withOrgBouncycastleMathEcZTauElement:(OrgBouncycastleMathEcZTauElement *)lambda {
  return OrgBouncycastleMathEcTnaf_multiplyTnafWithOrgBouncycastleMathEcECPoint_F2m_withOrgBouncycastleMathEcZTauElement_(p, lambda);
}

+ (OrgBouncycastleMathEcECPoint_F2m *)multiplyFromTnafWithOrgBouncycastleMathEcECPoint_F2m:(OrgBouncycastleMathEcECPoint_F2m *)p
                                                                             withByteArray:(IOSByteArray *)u {
  return OrgBouncycastleMathEcTnaf_multiplyFromTnafWithOrgBouncycastleMathEcECPoint_F2m_withByteArray_(p, u);
}

+ (IOSByteArray *)tauAdicWNafWithByte:(jbyte)mu
 withOrgBouncycastleMathEcZTauElement:(OrgBouncycastleMathEcZTauElement *)lambda
                             withByte:(jbyte)width
               withJavaMathBigInteger:(JavaMathBigInteger *)pow2w
               withJavaMathBigInteger:(JavaMathBigInteger *)tw
withOrgBouncycastleMathEcZTauElementArray:(IOSObjectArray *)alpha {
  return OrgBouncycastleMathEcTnaf_tauAdicWNafWithByte_withOrgBouncycastleMathEcZTauElement_withByte_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcZTauElementArray_(mu, lambda, width, pow2w, tw, alpha);
}

+ (IOSObjectArray *)getPreCompWithOrgBouncycastleMathEcECPoint_F2m:(OrgBouncycastleMathEcECPoint_F2m *)p
                                                          withByte:(jbyte)a {
  return OrgBouncycastleMathEcTnaf_getPreCompWithOrgBouncycastleMathEcECPoint_F2m_withByte_(p, a);
}

- (instancetype)init {
  OrgBouncycastleMathEcTnaf_init(self);
  return self;
}

+ (void)initialize {
  if (self == [OrgBouncycastleMathEcTnaf class]) {
    OrgBouncycastleMathEcTnaf_MINUS_ONE_ = [((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathEcECConstants_get_ONE_())) negate];
    OrgBouncycastleMathEcTnaf_MINUS_TWO_ = [((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathEcECConstants_get_TWO_())) negate];
    OrgBouncycastleMathEcTnaf_MINUS_THREE_ = [((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathEcECConstants_get_THREE_())) negate];
    OrgBouncycastleMathEcTnaf_alpha0_ = [IOSObjectArray newArrayWithObjects:(id[]){ nil, new_OrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECConstants_get_ONE_(), OrgBouncycastleMathEcECConstants_get_ZERO_()), nil, new_OrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcTnaf_MINUS_THREE_, OrgBouncycastleMathEcTnaf_MINUS_ONE_), nil, new_OrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcTnaf_MINUS_ONE_, OrgBouncycastleMathEcTnaf_MINUS_ONE_), nil, new_OrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECConstants_get_ONE_(), OrgBouncycastleMathEcTnaf_MINUS_ONE_), nil } count:9 type:OrgBouncycastleMathEcZTauElement_class_()];
    OrgBouncycastleMathEcTnaf_alpha0Tnaf_ = [IOSObjectArray newArrayWithObjects:(id[]){ nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 0, 1 } count:4] } count:8 type:IOSClass_byteArray(1)];
    OrgBouncycastleMathEcTnaf_alpha1_ = [IOSObjectArray newArrayWithObjects:(id[]){ nil, new_OrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECConstants_get_ONE_(), OrgBouncycastleMathEcECConstants_get_ZERO_()), nil, new_OrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcTnaf_MINUS_THREE_, OrgBouncycastleMathEcECConstants_get_ONE_()), nil, new_OrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcTnaf_MINUS_ONE_, OrgBouncycastleMathEcECConstants_get_ONE_()), nil, new_OrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(OrgBouncycastleMathEcECConstants_get_ONE_(), OrgBouncycastleMathEcECConstants_get_ONE_()), nil } count:9 type:OrgBouncycastleMathEcZTauElement_class_()];
    OrgBouncycastleMathEcTnaf_alpha1Tnaf_ = [IOSObjectArray newArrayWithObjects:(id[]){ nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ 1, 0, 1 } count:3], nil, [IOSByteArray newArrayWithBytes:(jbyte[]){ -1, 0, 0, -1 } count:4] } count:8 type:IOSClass_byteArray(1)];
    J2OBJC_SET_INITIALIZED(OrgBouncycastleMathEcTnaf)
  }
}

@end

JavaMathBigInteger *OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcZTauElement_(jbyte mu, OrgBouncycastleMathEcZTauElement *lambda) {
  OrgBouncycastleMathEcTnaf_initialize();
  JavaMathBigInteger *norm;
  JavaMathBigInteger *s1 = [((JavaMathBigInteger *) nil_chk(((OrgBouncycastleMathEcZTauElement *) nil_chk(lambda))->u_)) multiplyWithJavaMathBigInteger:lambda->u_];
  JavaMathBigInteger *s2 = [lambda->u_ multiplyWithJavaMathBigInteger:lambda->v_];
  JavaMathBigInteger *s3 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(lambda->v_)) multiplyWithJavaMathBigInteger:lambda->v_])) shiftLeftWithInt:1];
  if (mu == 1) {
    norm = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(s1)) addWithJavaMathBigInteger:s2])) addWithJavaMathBigInteger:s3];
  }
  else if (mu == -1) {
    norm = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(s1)) subtractWithJavaMathBigInteger:s2])) addWithJavaMathBigInteger:s3];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  return norm;
}

OrgBouncycastleMathEcSimpleBigDecimal *OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcSimpleBigDecimal_withOrgBouncycastleMathEcSimpleBigDecimal_(jbyte mu, OrgBouncycastleMathEcSimpleBigDecimal *u, OrgBouncycastleMathEcSimpleBigDecimal *v) {
  OrgBouncycastleMathEcTnaf_initialize();
  OrgBouncycastleMathEcSimpleBigDecimal *norm;
  OrgBouncycastleMathEcSimpleBigDecimal *s1 = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(u)) multiplyWithOrgBouncycastleMathEcSimpleBigDecimal:u];
  OrgBouncycastleMathEcSimpleBigDecimal *s2 = [u multiplyWithOrgBouncycastleMathEcSimpleBigDecimal:v];
  OrgBouncycastleMathEcSimpleBigDecimal *s3 = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(v)) multiplyWithOrgBouncycastleMathEcSimpleBigDecimal:v])) shiftLeftWithInt:1];
  if (mu == 1) {
    norm = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(s1)) addWithOrgBouncycastleMathEcSimpleBigDecimal:s2])) addWithOrgBouncycastleMathEcSimpleBigDecimal:s3];
  }
  else if (mu == -1) {
    norm = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(s1)) subtractWithOrgBouncycastleMathEcSimpleBigDecimal:s2])) addWithOrgBouncycastleMathEcSimpleBigDecimal:s3];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  return norm;
}

OrgBouncycastleMathEcZTauElement *OrgBouncycastleMathEcTnaf_roundWithOrgBouncycastleMathEcSimpleBigDecimal_withOrgBouncycastleMathEcSimpleBigDecimal_withByte_(OrgBouncycastleMathEcSimpleBigDecimal *lambda0, OrgBouncycastleMathEcSimpleBigDecimal *lambda1, jbyte mu) {
  OrgBouncycastleMathEcTnaf_initialize();
  jint scale_ = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(lambda0)) getScale];
  if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(lambda1)) getScale] != scale_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"lambda0 and lambda1 do not have same scale");
  }
  if (!((mu == 1) || (mu == -1))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  JavaMathBigInteger *f0 = [lambda0 round];
  JavaMathBigInteger *f1 = [lambda1 round];
  OrgBouncycastleMathEcSimpleBigDecimal *eta0 = [lambda0 subtractWithJavaMathBigInteger:f0];
  OrgBouncycastleMathEcSimpleBigDecimal *eta1 = [lambda1 subtractWithJavaMathBigInteger:f1];
  OrgBouncycastleMathEcSimpleBigDecimal *eta = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta0)) addWithOrgBouncycastleMathEcSimpleBigDecimal:eta0];
  if (mu == 1) {
    eta = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta)) addWithOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  }
  else {
    eta = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta)) subtractWithOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  }
  OrgBouncycastleMathEcSimpleBigDecimal *threeEta1 = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta1)) addWithOrgBouncycastleMathEcSimpleBigDecimal:eta1])) addWithOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  OrgBouncycastleMathEcSimpleBigDecimal *fourEta1 = [((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(threeEta1)) addWithOrgBouncycastleMathEcSimpleBigDecimal:eta1];
  OrgBouncycastleMathEcSimpleBigDecimal *check1;
  OrgBouncycastleMathEcSimpleBigDecimal *check2;
  if (mu == 1) {
    check1 = [eta0 subtractWithOrgBouncycastleMathEcSimpleBigDecimal:threeEta1];
    check2 = [eta0 addWithOrgBouncycastleMathEcSimpleBigDecimal:fourEta1];
  }
  else {
    check1 = [eta0 addWithOrgBouncycastleMathEcSimpleBigDecimal:threeEta1];
    check2 = [eta0 subtractWithOrgBouncycastleMathEcSimpleBigDecimal:fourEta1];
  }
  jbyte h0 = 0;
  jbyte h1 = 0;
  if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(eta)) compareToWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_ONE_()] >= 0) {
    if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check1)) compareToWithJavaMathBigInteger:OrgBouncycastleMathEcTnaf_MINUS_ONE_] < 0) {
      h1 = mu;
    }
    else {
      h0 = 1;
    }
  }
  else {
    if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check2)) compareToWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_TWO_()] >= 0) {
      h1 = mu;
    }
  }
  if ([eta compareToWithJavaMathBigInteger:OrgBouncycastleMathEcTnaf_MINUS_ONE_] < 0) {
    if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check1)) compareToWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_ONE_()] >= 0) {
      h1 = (jbyte) -mu;
    }
    else {
      h0 = -1;
    }
  }
  else {
    if ([((OrgBouncycastleMathEcSimpleBigDecimal *) nil_chk(check2)) compareToWithJavaMathBigInteger:OrgBouncycastleMathEcTnaf_MINUS_TWO_] < 0) {
      h1 = (jbyte) -mu;
    }
  }
  JavaMathBigInteger *q0 = [((JavaMathBigInteger *) nil_chk(f0)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(h0)];
  JavaMathBigInteger *q1 = [((JavaMathBigInteger *) nil_chk(f1)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(h1)];
  return new_OrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(q0, q1);
}

OrgBouncycastleMathEcSimpleBigDecimal *OrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(JavaMathBigInteger *k, JavaMathBigInteger *s, JavaMathBigInteger *vm, jbyte a, jint m, jint c) {
  OrgBouncycastleMathEcTnaf_initialize();
  jint _k = (m + 5) / 2 + c;
  JavaMathBigInteger *ns = [((JavaMathBigInteger *) nil_chk(k)) shiftRightWithInt:m - _k - 2 + a];
  JavaMathBigInteger *gs = [((JavaMathBigInteger *) nil_chk(s)) multiplyWithJavaMathBigInteger:ns];
  JavaMathBigInteger *hs = [((JavaMathBigInteger *) nil_chk(gs)) shiftRightWithInt:m];
  JavaMathBigInteger *js = [((JavaMathBigInteger *) nil_chk(vm)) multiplyWithJavaMathBigInteger:hs];
  JavaMathBigInteger *gsPlusJs = [gs addWithJavaMathBigInteger:js];
  JavaMathBigInteger *ls = [((JavaMathBigInteger *) nil_chk(gsPlusJs)) shiftRightWithInt:_k - c];
  if ([gsPlusJs testBitWithInt:_k - c - 1]) {
    ls = [((JavaMathBigInteger *) nil_chk(ls)) addWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_ONE_()];
  }
  return new_OrgBouncycastleMathEcSimpleBigDecimal_initWithJavaMathBigInteger_withInt_(ls, c);
}

IOSByteArray *OrgBouncycastleMathEcTnaf_tauAdicNafWithByte_withOrgBouncycastleMathEcZTauElement_(jbyte mu, OrgBouncycastleMathEcZTauElement *lambda) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (!((mu == 1) || (mu == -1))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  JavaMathBigInteger *norm = OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcZTauElement_(mu, lambda);
  jint log2Norm = [((JavaMathBigInteger *) nil_chk(norm)) bitLength];
  jint maxLength = log2Norm > 30 ? log2Norm + 4 : 34;
  IOSByteArray *u = [IOSByteArray newArrayWithLength:maxLength];
  jint i = 0;
  jint length = 0;
  JavaMathBigInteger *r0 = ((OrgBouncycastleMathEcZTauElement *) nil_chk(lambda))->u_;
  JavaMathBigInteger *r1 = lambda->v_;
  while (!(([((JavaMathBigInteger *) nil_chk(r0)) isEqual:OrgBouncycastleMathEcECConstants_get_ZERO_()]) && ([((JavaMathBigInteger *) nil_chk(r1)) isEqual:OrgBouncycastleMathEcECConstants_get_ZERO_()]))) {
    if ([r0 testBitWithInt:0]) {
      *IOSByteArray_GetRef(u, i) = (jbyte) [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathEcECConstants_get_TWO_())) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(([r0 subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r1)) shiftLeftWithInt:1]]))) modWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_FOUR_()]])) intValue];
      if (IOSByteArray_Get(u, i) == 1) {
        r0 = [r0 clearBitWithInt:0];
      }
      else {
        r0 = [r0 addWithJavaMathBigInteger:OrgBouncycastleMathEcECConstants_get_ONE_()];
      }
      length = i;
    }
    else {
      *IOSByteArray_GetRef(u, i) = 0;
    }
    JavaMathBigInteger *t = r0;
    JavaMathBigInteger *s = [((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1];
    if (mu == 1) {
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) addWithJavaMathBigInteger:s];
    }
    else {
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) subtractWithJavaMathBigInteger:s];
    }
    r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(t)) shiftRightWithInt:1])) negate];
    i++;
  }
  length++;
  IOSByteArray *tnaf = [IOSByteArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(u, 0, tnaf, 0, length);
  return tnaf;
}

OrgBouncycastleMathEcECPoint_F2m *OrgBouncycastleMathEcTnaf_tauWithOrgBouncycastleMathEcECPoint_F2m_(OrgBouncycastleMathEcECPoint_F2m *p) {
  OrgBouncycastleMathEcTnaf_initialize();
  return [((OrgBouncycastleMathEcECPoint_F2m *) nil_chk(p)) tau];
}

jbyte OrgBouncycastleMathEcTnaf_getMuWithOrgBouncycastleMathEcECCurve_F2m_(OrgBouncycastleMathEcECCurve_F2m *curve) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (![((OrgBouncycastleMathEcECCurve_F2m *) nil_chk(curve)) isKoblitz]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No Koblitz curve (ABC), TNAF multiplication not possible");
  }
  if ([((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) isZero]) {
    return -1;
  }
  return 1;
}

IOSObjectArray *OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(jbyte mu, jint k, jboolean doV) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (!((mu == 1) || (mu == -1))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  JavaMathBigInteger *u0;
  JavaMathBigInteger *u1;
  JavaMathBigInteger *u2;
  if (doV) {
    u0 = OrgBouncycastleMathEcECConstants_get_TWO_();
    u1 = JavaMathBigInteger_valueOfWithLong_(mu);
  }
  else {
    u0 = OrgBouncycastleMathEcECConstants_get_ZERO_();
    u1 = OrgBouncycastleMathEcECConstants_get_ONE_();
  }
  for (jint i = 1; i < k; i++) {
    JavaMathBigInteger *s = nil;
    if (mu == 1) {
      s = u1;
    }
    else {
      s = [((JavaMathBigInteger *) nil_chk(u1)) negate];
    }
    u2 = [((JavaMathBigInteger *) nil_chk(s)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(u0)) shiftLeftWithInt:1]];
    u0 = u1;
    u1 = u2;
  }
  IOSObjectArray *retVal = [IOSObjectArray newArrayWithObjects:(id[]){ u0, u1 } count:2 type:JavaMathBigInteger_class_()];
  return retVal;
}

JavaMathBigInteger *OrgBouncycastleMathEcTnaf_getTwWithByte_withInt_(jbyte mu, jint w) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (w == 4) {
    if (mu == 1) {
      return JavaMathBigInteger_valueOfWithLong_(6);
    }
    else {
      return JavaMathBigInteger_valueOfWithLong_(10);
    }
  }
  else {
    IOSObjectArray *us = OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, w, NO);
    JavaMathBigInteger *twoToW = [((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathEcECConstants_get_ZERO_())) setBitWithInt:w];
    JavaMathBigInteger *u1invert = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(us), 1))) modInverseWithJavaMathBigInteger:twoToW];
    JavaMathBigInteger *tw;
    tw = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathEcECConstants_get_TWO_())) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(us, 0)])) multiplyWithJavaMathBigInteger:u1invert])) modWithJavaMathBigInteger:twoToW];
    return tw;
  }
}

IOSObjectArray *OrgBouncycastleMathEcTnaf_getSiWithOrgBouncycastleMathEcECCurve_F2m_(OrgBouncycastleMathEcECCurve_F2m *curve) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (![((OrgBouncycastleMathEcECCurve_F2m *) nil_chk(curve)) isKoblitz]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"si is defined for Koblitz curves only");
  }
  jint m = [curve getM];
  jint a = [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) toBigInteger])) intValue];
  jbyte mu = [curve getMu];
  jint shifts = OrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_([curve getCofactor]);
  jint index = m + 3 - a;
  IOSObjectArray *ui = OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, index, NO);
  if (mu == 1) {
    (void) IOSObjectArray_Set(nil_chk(ui), 0, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 0))) negate]);
    (void) IOSObjectArray_Set(ui, 1, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(ui, 1))) negate]);
  }
  JavaMathBigInteger *dividend0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(OrgBouncycastleMathEcECConstants_get_ONE_())) addWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(ui), 1)])) shiftRightWithInt:shifts];
  JavaMathBigInteger *dividend1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([OrgBouncycastleMathEcECConstants_get_ONE_() addWithJavaMathBigInteger:IOSObjectArray_Get(ui, 0)])) shiftRightWithInt:shifts])) negate];
  return [IOSObjectArray newArrayWithObjects:(id[]){ dividend0, dividend1 } count:2 type:JavaMathBigInteger_class_()];
}

jint OrgBouncycastleMathEcTnaf_getShiftsForCofactorWithJavaMathBigInteger_(JavaMathBigInteger *h) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (h != nil) {
    if ([h isEqual:OrgBouncycastleMathEcECConstants_get_TWO_()]) {
      return 1;
    }
    if ([h isEqual:OrgBouncycastleMathEcECConstants_get_FOUR_()]) {
      return 2;
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"h (Cofactor) must be 2 or 4");
}

OrgBouncycastleMathEcZTauElement *OrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(JavaMathBigInteger *k, jint m, jbyte a, IOSObjectArray *s, jbyte mu, jbyte c) {
  OrgBouncycastleMathEcTnaf_initialize();
  JavaMathBigInteger *d0;
  if (mu == 1) {
    d0 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(s), 0))) addWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)];
  }
  else {
    d0 = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(s), 0))) subtractWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)];
  }
  IOSObjectArray *v = OrgBouncycastleMathEcTnaf_getLucasWithByte_withInt_withBoolean_(mu, m, YES);
  JavaMathBigInteger *vm = IOSObjectArray_Get(nil_chk(v), 1);
  OrgBouncycastleMathEcSimpleBigDecimal *lambda0 = OrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(k, IOSObjectArray_Get(nil_chk(s), 0), vm, a, m, c);
  OrgBouncycastleMathEcSimpleBigDecimal *lambda1 = OrgBouncycastleMathEcTnaf_approximateDivisionByNWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withByte_withInt_withInt_(k, IOSObjectArray_Get(s, 1), vm, a, m, c);
  OrgBouncycastleMathEcZTauElement *q = OrgBouncycastleMathEcTnaf_roundWithOrgBouncycastleMathEcSimpleBigDecimal_withOrgBouncycastleMathEcSimpleBigDecimal_withByte_(lambda0, lambda1, mu);
  JavaMathBigInteger *r0 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(k)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(d0)) multiplyWithJavaMathBigInteger:((OrgBouncycastleMathEcZTauElement *) nil_chk(q))->u_]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(s, 1)])) multiplyWithJavaMathBigInteger:q->v_]];
  JavaMathBigInteger *r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(s, 1))) multiplyWithJavaMathBigInteger:q->u_])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(s, 0))) multiplyWithJavaMathBigInteger:q->v_]];
  return new_OrgBouncycastleMathEcZTauElement_initWithJavaMathBigInteger_withJavaMathBigInteger_(r0, r1);
}

OrgBouncycastleMathEcECPoint_F2m *OrgBouncycastleMathEcTnaf_multiplyRTnafWithOrgBouncycastleMathEcECPoint_F2m_withJavaMathBigInteger_(OrgBouncycastleMathEcECPoint_F2m *p, JavaMathBigInteger *k) {
  OrgBouncycastleMathEcTnaf_initialize();
  OrgBouncycastleMathEcECCurve_F2m *curve = (OrgBouncycastleMathEcECCurve_F2m *) check_class_cast([((OrgBouncycastleMathEcECPoint_F2m *) nil_chk(p)) getCurve], [OrgBouncycastleMathEcECCurve_F2m class]);
  jint m = [((OrgBouncycastleMathEcECCurve_F2m *) nil_chk(curve)) getM];
  jbyte a = (jbyte) [((JavaMathBigInteger *) nil_chk([((OrgBouncycastleMathEcECFieldElement *) nil_chk([curve getA])) toBigInteger])) intValue];
  jbyte mu = [curve getMu];
  IOSObjectArray *s = [curve getSi];
  OrgBouncycastleMathEcZTauElement *rho = OrgBouncycastleMathEcTnaf_partModReductionWithJavaMathBigInteger_withInt_withByte_withJavaMathBigIntegerArray_withByte_withByte_(k, m, a, s, mu, (jbyte) 10);
  return OrgBouncycastleMathEcTnaf_multiplyTnafWithOrgBouncycastleMathEcECPoint_F2m_withOrgBouncycastleMathEcZTauElement_(p, rho);
}

OrgBouncycastleMathEcECPoint_F2m *OrgBouncycastleMathEcTnaf_multiplyTnafWithOrgBouncycastleMathEcECPoint_F2m_withOrgBouncycastleMathEcZTauElement_(OrgBouncycastleMathEcECPoint_F2m *p, OrgBouncycastleMathEcZTauElement *lambda) {
  OrgBouncycastleMathEcTnaf_initialize();
  OrgBouncycastleMathEcECCurve_F2m *curve = (OrgBouncycastleMathEcECCurve_F2m *) check_class_cast([((OrgBouncycastleMathEcECPoint_F2m *) nil_chk(p)) getCurve], [OrgBouncycastleMathEcECCurve_F2m class]);
  jbyte mu = [((OrgBouncycastleMathEcECCurve_F2m *) nil_chk(curve)) getMu];
  IOSByteArray *u = OrgBouncycastleMathEcTnaf_tauAdicNafWithByte_withOrgBouncycastleMathEcZTauElement_(mu, lambda);
  OrgBouncycastleMathEcECPoint_F2m *q = OrgBouncycastleMathEcTnaf_multiplyFromTnafWithOrgBouncycastleMathEcECPoint_F2m_withByteArray_(p, u);
  return q;
}

OrgBouncycastleMathEcECPoint_F2m *OrgBouncycastleMathEcTnaf_multiplyFromTnafWithOrgBouncycastleMathEcECPoint_F2m_withByteArray_(OrgBouncycastleMathEcECPoint_F2m *p, IOSByteArray *u) {
  OrgBouncycastleMathEcTnaf_initialize();
  OrgBouncycastleMathEcECCurve_F2m *curve = (OrgBouncycastleMathEcECCurve_F2m *) check_class_cast([((OrgBouncycastleMathEcECPoint_F2m *) nil_chk(p)) getCurve], [OrgBouncycastleMathEcECCurve_F2m class]);
  OrgBouncycastleMathEcECPoint_F2m *q = (OrgBouncycastleMathEcECPoint_F2m *) check_class_cast([((OrgBouncycastleMathEcECCurve_F2m *) nil_chk(curve)) getInfinity], [OrgBouncycastleMathEcECPoint_F2m class]);
  for (jint i = ((IOSByteArray *) nil_chk(u))->size_ - 1; i >= 0; i--) {
    q = OrgBouncycastleMathEcTnaf_tauWithOrgBouncycastleMathEcECPoint_F2m_(q);
    if (IOSByteArray_Get(u, i) == 1) {
      q = [((OrgBouncycastleMathEcECPoint_F2m *) nil_chk(q)) addSimpleWithOrgBouncycastleMathEcECPoint_F2m:p];
    }
    else if (IOSByteArray_Get(u, i) == -1) {
      q = [((OrgBouncycastleMathEcECPoint_F2m *) nil_chk(q)) subtractSimpleWithOrgBouncycastleMathEcECPoint_F2m:p];
    }
  }
  return q;
}

IOSByteArray *OrgBouncycastleMathEcTnaf_tauAdicWNafWithByte_withOrgBouncycastleMathEcZTauElement_withByte_withJavaMathBigInteger_withJavaMathBigInteger_withOrgBouncycastleMathEcZTauElementArray_(jbyte mu, OrgBouncycastleMathEcZTauElement *lambda, jbyte width, JavaMathBigInteger *pow2w, JavaMathBigInteger *tw, IOSObjectArray *alpha) {
  OrgBouncycastleMathEcTnaf_initialize();
  if (!((mu == 1) || (mu == -1))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mu must be 1 or -1");
  }
  JavaMathBigInteger *norm = OrgBouncycastleMathEcTnaf_normWithByte_withOrgBouncycastleMathEcZTauElement_(mu, lambda);
  jint log2Norm = [((JavaMathBigInteger *) nil_chk(norm)) bitLength];
  jint maxLength = log2Norm > 30 ? log2Norm + 4 + width : 34 + width;
  IOSByteArray *u = [IOSByteArray newArrayWithLength:maxLength];
  JavaMathBigInteger *pow2wMin1 = [((JavaMathBigInteger *) nil_chk(pow2w)) shiftRightWithInt:1];
  JavaMathBigInteger *r0 = ((OrgBouncycastleMathEcZTauElement *) nil_chk(lambda))->u_;
  JavaMathBigInteger *r1 = lambda->v_;
  jint i = 0;
  while (!(([((JavaMathBigInteger *) nil_chk(r0)) isEqual:OrgBouncycastleMathEcECConstants_get_ZERO_()]) && ([((JavaMathBigInteger *) nil_chk(r1)) isEqual:OrgBouncycastleMathEcECConstants_get_ZERO_()]))) {
    if ([r0 testBitWithInt:0]) {
      JavaMathBigInteger *uUnMod = [((JavaMathBigInteger *) nil_chk([r0 addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r1)) multiplyWithJavaMathBigInteger:tw]])) modWithJavaMathBigInteger:pow2w];
      jbyte uLocal;
      if ([((JavaMathBigInteger *) nil_chk(uUnMod)) compareToWithId:pow2wMin1] >= 0) {
        uLocal = (jbyte) [((JavaMathBigInteger *) nil_chk([uUnMod subtractWithJavaMathBigInteger:pow2w])) intValue];
      }
      else {
        uLocal = (jbyte) [uUnMod intValue];
      }
      *IOSByteArray_GetRef(u, i) = uLocal;
      jboolean s = YES;
      if (uLocal < 0) {
        s = NO;
        uLocal = (jbyte) -uLocal;
      }
      if (s) {
        r0 = [r0 subtractWithJavaMathBigInteger:((OrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(nil_chk(alpha), uLocal)))->u_];
        r1 = [r1 subtractWithJavaMathBigInteger:((OrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(alpha, uLocal)))->v_];
      }
      else {
        r0 = [r0 addWithJavaMathBigInteger:((OrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(nil_chk(alpha), uLocal)))->u_];
        r1 = [r1 addWithJavaMathBigInteger:((OrgBouncycastleMathEcZTauElement *) nil_chk(IOSObjectArray_Get(alpha, uLocal)))->v_];
      }
    }
    else {
      *IOSByteArray_GetRef(u, i) = 0;
    }
    JavaMathBigInteger *t = r0;
    if (mu == 1) {
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1]];
    }
    else {
      r0 = [((JavaMathBigInteger *) nil_chk(r1)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r0)) shiftRightWithInt:1]];
    }
    r1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(t)) shiftRightWithInt:1])) negate];
    i++;
  }
  return u;
}

IOSObjectArray *OrgBouncycastleMathEcTnaf_getPreCompWithOrgBouncycastleMathEcECPoint_F2m_withByte_(OrgBouncycastleMathEcECPoint_F2m *p, jbyte a) {
  OrgBouncycastleMathEcTnaf_initialize();
  IOSObjectArray *pu;
  pu = [IOSObjectArray newArrayWithLength:16 type:OrgBouncycastleMathEcECPoint_F2m_class_()];
  (void) IOSObjectArray_Set(pu, 1, p);
  IOSObjectArray *alphaTnaf;
  if (a == 0) {
    alphaTnaf = OrgBouncycastleMathEcTnaf_alpha0Tnaf_;
  }
  else {
    alphaTnaf = OrgBouncycastleMathEcTnaf_alpha1Tnaf_;
  }
  jint precompLen = ((IOSObjectArray *) nil_chk(alphaTnaf))->size_;
  for (jint i = 3; i < precompLen; i = i + 2) {
    (void) IOSObjectArray_Set(pu, i, OrgBouncycastleMathEcTnaf_multiplyFromTnafWithOrgBouncycastleMathEcECPoint_F2m_withByteArray_(p, IOSObjectArray_Get(alphaTnaf, i)));
  }
  [((OrgBouncycastleMathEcECCurve *) nil_chk([((OrgBouncycastleMathEcECPoint_F2m *) nil_chk(p)) getCurve])) normalizeAllWithOrgBouncycastleMathEcECPointArray:pu];
  return pu;
}

void OrgBouncycastleMathEcTnaf_init(OrgBouncycastleMathEcTnaf *self) {
  (void) NSObject_init(self);
}

OrgBouncycastleMathEcTnaf *new_OrgBouncycastleMathEcTnaf_init() {
  OrgBouncycastleMathEcTnaf *self = [OrgBouncycastleMathEcTnaf alloc];
  OrgBouncycastleMathEcTnaf_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgBouncycastleMathEcTnaf)
