//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-platform/actor-apps/core/src/main/java/im/actor/model/modules/file/UploadTask.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/FileSystemProvider.h"
#include "im/actor/model/HttpProvider.h"
#include "im/actor/model/api/FileLocation.h"
#include "im/actor/model/api/rpc/RequestCommitFileUpload.h"
#include "im/actor/model/api/rpc/RequestGetFileUploadPartUrl.h"
#include "im/actor/model/api/rpc/RequestGetFileUploadUrl.h"
#include "im/actor/model/api/rpc/ResponseCommitFileUpload.h"
#include "im/actor/model/api/rpc/ResponseGetFileUploadPartUrl.h"
#include "im/actor/model/api/rpc/ResponseGetFileUploadUrl.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/actors/Environment.h"
#include "im/actor/model/entity/FileReference.h"
#include "im/actor/model/files/FileReadCallback.h"
#include "im/actor/model/files/FileSystemReference.h"
#include "im/actor/model/files/InputFile.h"
#include "im/actor/model/files/OutputFile.h"
#include "im/actor/model/http/FileUploadCallback.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/file/UploadManager.h"
#include "im/actor/model/modules/file/UploadTask.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/network/RpcCallback.h"
#include "im/actor/model/network/RpcException.h"
#include "im/actor/model/util/CRC32.h"
#include "java/lang/Runnable.h"

#define ImActorModelModulesFileUploadTask_SIM_BLOCKS_COUNT 4
#define ImActorModelModulesFileUploadTask_NOTIFY_THROTTLE 1000

@interface ImActorModelModulesFileUploadTask () {
 @public
  NSString *TAG_;
  jboolean LOG_;
  jlong rid_;
  NSString *fileName_;
  NSString *descriptor_;
  jboolean isWriteToDestProvider_;
  id<AMFileSystemProvider> fileSystemProvider_;
  id<AMHttpProvider> downloaderProvider_;
  id<AMFileSystemReference> srcReference_;
  id<AMInputFile> inputFile_;
  id<AMFileSystemReference> destReference_;
  id<AMOutputFile> outputFile_;
  DKActorRef *manager_;
  jboolean isCompleted_;
  jint blockSize_;
  jint blocksCount_;
  jint nextBlock_;
  jint uploaded_;
  jint uploadCount_;
  jlong lastNotifyDate_;
  IOSByteArray *uploadConfig_;
  AMCRC32 *crc32_;
  jfloat currentProgress_;
}

- (void)startUpload;

- (void)checkQueue;

- (void)loadPartWithInt:(jint)blockIndex;

- (void)uploadPartWithInt:(jint)blockIndex
                  withInt:(jint)offset
            withByteArray:(IOSByteArray *)data;

- (void)reportError;

- (void)reportProgressWithFloat:(jfloat)progress;

- (void)performReportProgress;

- (void)reportCompleteWithAMFileReference:(AMFileReference *)location
                withAMFileSystemReference:(id<AMFileSystemReference>)reference;

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, TAG_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, descriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, fileSystemProvider_, id<AMFileSystemProvider>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, downloaderProvider_, id<AMHttpProvider>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, srcReference_, id<AMFileSystemReference>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, inputFile_, id<AMInputFile>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, destReference_, id<AMFileSystemReference>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, outputFile_, id<AMOutputFile>)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, manager_, DKActorRef *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, uploadConfig_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask, crc32_, AMCRC32 *)

J2OBJC_STATIC_FIELD_GETTER(ImActorModelModulesFileUploadTask, SIM_BLOCKS_COUNT, jint)

J2OBJC_STATIC_FIELD_GETTER(ImActorModelModulesFileUploadTask, NOTIFY_THROTTLE, jint)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_startUpload(ImActorModelModulesFileUploadTask *self);

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_checkQueue(ImActorModelModulesFileUploadTask *self);

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_loadPartWithInt_(ImActorModelModulesFileUploadTask *self, jint blockIndex);

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(ImActorModelModulesFileUploadTask *self, jint blockIndex, jint offset, IOSByteArray *data);

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_reportError(ImActorModelModulesFileUploadTask *self);

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_reportProgressWithFloat_(ImActorModelModulesFileUploadTask *self, jfloat progress);

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_performReportProgress(ImActorModelModulesFileUploadTask *self);

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_reportCompleteWithAMFileReference_withAMFileSystemReference_(ImActorModelModulesFileUploadTask *self, AMFileReference *location, id<AMFileSystemReference> reference);

@interface ImActorModelModulesFileUploadTask_NotifyProgress : NSObject

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadTask_NotifyProgress)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_NotifyProgress_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask_NotifyProgress *self, ImActorModelModulesFileUploadTask *outer$);

__attribute__((unused)) static ImActorModelModulesFileUploadTask_NotifyProgress *new_ImActorModelModulesFileUploadTask_NotifyProgress_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadTask_NotifyProgress)

@interface ImActorModelModulesFileUploadTask_$1 : NSObject < AMRpcCallback > {
 @public
  ImActorModelModulesFileUploadTask *this$0_;
}

- (void)onResult:(APResponseGetFileUploadUrl *)response;

- (void)onError:(AMRpcException *)e;

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadTask_$1)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$1, this$0_, ImActorModelModulesFileUploadTask *)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_$1_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask_$1 *self, ImActorModelModulesFileUploadTask *outer$);

__attribute__((unused)) static ImActorModelModulesFileUploadTask_$1 *new_ImActorModelModulesFileUploadTask_$1_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadTask_$1)

@interface ImActorModelModulesFileUploadTask_$2 : NSObject < AMRpcCallback > {
 @public
  ImActorModelModulesFileUploadTask *this$0_;
}

- (void)onResult:(APResponseCommitFileUpload *)response;

- (void)onError:(AMRpcException *)e;

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadTask_$2)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$2, this$0_, ImActorModelModulesFileUploadTask *)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_$2_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask_$2 *self, ImActorModelModulesFileUploadTask *outer$);

__attribute__((unused)) static ImActorModelModulesFileUploadTask_$2 *new_ImActorModelModulesFileUploadTask_$2_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadTask_$2)

@interface ImActorModelModulesFileUploadTask_$3 : NSObject < AMFileReadCallback > {
 @public
  ImActorModelModulesFileUploadTask *this$0_;
  jint val$blockIndex_;
  jint val$finalSize_;
}

- (void)onFileReadWithOffset:(jint)fileOffset
                    withData:(IOSByteArray *)data
              withDataOffset:(jint)offset
                  withLength:(jint)len;

- (void)onFileReadError;

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$
                                                  withInt:(jint)capture$0
                                                  withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadTask_$3)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$3, this$0_, ImActorModelModulesFileUploadTask *)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_$3_initWithImActorModelModulesFileUploadTask_withInt_withInt_(ImActorModelModulesFileUploadTask_$3 *self, ImActorModelModulesFileUploadTask *outer$, jint capture$0, jint capture$1);

__attribute__((unused)) static ImActorModelModulesFileUploadTask_$3 *new_ImActorModelModulesFileUploadTask_$3_initWithImActorModelModulesFileUploadTask_withInt_withInt_(ImActorModelModulesFileUploadTask *outer$, jint capture$0, jint capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadTask_$3)

@interface ImActorModelModulesFileUploadTask_$3_$1 : NSObject < JavaLangRunnable > {
 @public
  ImActorModelModulesFileUploadTask_$3 *this$0_;
  jint val$fileOffset_;
  IOSByteArray *val$data_;
}

- (void)run;

- (instancetype)initWithImActorModelModulesFileUploadTask_$3:(ImActorModelModulesFileUploadTask_$3 *)outer$
                                                     withInt:(jint)capture$0
                                               withByteArray:(IOSByteArray *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadTask_$3_$1)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$3_$1, this$0_, ImActorModelModulesFileUploadTask_$3 *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$3_$1, val$data_, IOSByteArray *)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_$3_$1_initWithImActorModelModulesFileUploadTask_$3_withInt_withByteArray_(ImActorModelModulesFileUploadTask_$3_$1 *self, ImActorModelModulesFileUploadTask_$3 *outer$, jint capture$0, IOSByteArray *capture$1);

__attribute__((unused)) static ImActorModelModulesFileUploadTask_$3_$1 *new_ImActorModelModulesFileUploadTask_$3_$1_initWithImActorModelModulesFileUploadTask_$3_withInt_withByteArray_(ImActorModelModulesFileUploadTask_$3 *outer$, jint capture$0, IOSByteArray *capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadTask_$3_$1)

@interface ImActorModelModulesFileUploadTask_$3_$2 : NSObject < JavaLangRunnable > {
 @public
  ImActorModelModulesFileUploadTask_$3 *this$0_;
}

- (void)run;

- (instancetype)initWithImActorModelModulesFileUploadTask_$3:(ImActorModelModulesFileUploadTask_$3 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadTask_$3_$2)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$3_$2, this$0_, ImActorModelModulesFileUploadTask_$3 *)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_$3_$2_initWithImActorModelModulesFileUploadTask_$3_(ImActorModelModulesFileUploadTask_$3_$2 *self, ImActorModelModulesFileUploadTask_$3 *outer$);

__attribute__((unused)) static ImActorModelModulesFileUploadTask_$3_$2 *new_ImActorModelModulesFileUploadTask_$3_$2_initWithImActorModelModulesFileUploadTask_$3_(ImActorModelModulesFileUploadTask_$3 *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadTask_$3_$2)

@interface ImActorModelModulesFileUploadTask_$4 : NSObject < AMRpcCallback > {
 @public
  ImActorModelModulesFileUploadTask *this$0_;
  IOSByteArray *val$data_;
  jint val$blockIndex_;
}

- (void)onResult:(APResponseGetFileUploadPartUrl *)response;

- (void)onError:(AMRpcException *)e;

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$
                                            withByteArray:(IOSByteArray *)capture$0
                                                  withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadTask_$4)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$4, this$0_, ImActorModelModulesFileUploadTask *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$4, val$data_, IOSByteArray *)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_$4_initWithImActorModelModulesFileUploadTask_withByteArray_withInt_(ImActorModelModulesFileUploadTask_$4 *self, ImActorModelModulesFileUploadTask *outer$, IOSByteArray *capture$0, jint capture$1);

__attribute__((unused)) static ImActorModelModulesFileUploadTask_$4 *new_ImActorModelModulesFileUploadTask_$4_initWithImActorModelModulesFileUploadTask_withByteArray_withInt_(ImActorModelModulesFileUploadTask *outer$, IOSByteArray *capture$0, jint capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadTask_$4)

@interface ImActorModelModulesFileUploadTask_$4_$1 : NSObject < ImActorModelHttpFileUploadCallback > {
 @public
  ImActorModelModulesFileUploadTask_$4 *this$0_;
}

- (void)onUploaded;

- (void)onUploadFailure;

- (instancetype)initWithImActorModelModulesFileUploadTask_$4:(ImActorModelModulesFileUploadTask_$4 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadTask_$4_$1)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$4_$1, this$0_, ImActorModelModulesFileUploadTask_$4 *)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_$4_$1_initWithImActorModelModulesFileUploadTask_$4_(ImActorModelModulesFileUploadTask_$4_$1 *self, ImActorModelModulesFileUploadTask_$4 *outer$);

__attribute__((unused)) static ImActorModelModulesFileUploadTask_$4_$1 *new_ImActorModelModulesFileUploadTask_$4_$1_initWithImActorModelModulesFileUploadTask_$4_(ImActorModelModulesFileUploadTask_$4 *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadTask_$4_$1)

@interface ImActorModelModulesFileUploadTask_$4_$1_$1 : NSObject < JavaLangRunnable > {
 @public
  ImActorModelModulesFileUploadTask_$4_$1 *this$0_;
}

- (void)run;

- (instancetype)initWithImActorModelModulesFileUploadTask_$4_$1:(ImActorModelModulesFileUploadTask_$4_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadTask_$4_$1_$1)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$4_$1_$1, this$0_, ImActorModelModulesFileUploadTask_$4_$1 *)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_$4_$1_$1_initWithImActorModelModulesFileUploadTask_$4_$1_(ImActorModelModulesFileUploadTask_$4_$1_$1 *self, ImActorModelModulesFileUploadTask_$4_$1 *outer$);

__attribute__((unused)) static ImActorModelModulesFileUploadTask_$4_$1_$1 *new_ImActorModelModulesFileUploadTask_$4_$1_$1_initWithImActorModelModulesFileUploadTask_$4_$1_(ImActorModelModulesFileUploadTask_$4_$1 *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadTask_$4_$1_$1)

@interface ImActorModelModulesFileUploadTask_$4_$1_$2 : NSObject < JavaLangRunnable > {
 @public
  ImActorModelModulesFileUploadTask_$4_$1 *this$0_;
}

- (void)run;

- (instancetype)initWithImActorModelModulesFileUploadTask_$4_$1:(ImActorModelModulesFileUploadTask_$4_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadTask_$4_$1_$2)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadTask_$4_$1_$2, this$0_, ImActorModelModulesFileUploadTask_$4_$1 *)

__attribute__((unused)) static void ImActorModelModulesFileUploadTask_$4_$1_$2_initWithImActorModelModulesFileUploadTask_$4_$1_(ImActorModelModulesFileUploadTask_$4_$1_$2 *self, ImActorModelModulesFileUploadTask_$4_$1 *outer$);

__attribute__((unused)) static ImActorModelModulesFileUploadTask_$4_$1_$2 *new_ImActorModelModulesFileUploadTask_$4_$1_$2_initWithImActorModelModulesFileUploadTask_$4_$1_(ImActorModelModulesFileUploadTask_$4_$1 *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadTask_$4_$1_$2)

@implementation ImActorModelModulesFileUploadTask

- (instancetype)initWithLong:(jlong)rid
                withNSString:(NSString *)descriptor
                withNSString:(NSString *)fileName
              withDKActorRef:(DKActorRef *)manager
withImActorModelModulesModules:(ImActorModelModulesModules *)modules {
  ImActorModelModulesFileUploadTask_initWithLong_withNSString_withNSString_withDKActorRef_withImActorModelModulesModules_(self, rid, descriptor, fileName, manager, modules);
  return self;
}

- (void)preStart {
  fileSystemProvider_ = [((AMConfiguration *) nil_chk([self config])) getFileSystemProvider];
  if (fileSystemProvider_ == nil) {
    if (LOG_) {
      AMLog_wWithNSString_withNSString_(TAG_, @"File system is not available");
    }
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  isWriteToDestProvider_ = [((id<AMFileSystemProvider>) nil_chk(fileSystemProvider_)) isFsPersistent];
  downloaderProvider_ = [((AMConfiguration *) nil_chk([self config])) getHttpProvider];
  if (downloaderProvider_ == nil) {
    if (LOG_) {
      AMLog_wWithNSString_withNSString_(TAG_, @"HTTP support is not available");
    }
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  srcReference_ = [fileSystemProvider_ fileFromDescriptor:descriptor_];
  if (srcReference_ == nil) {
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(TAG_, @"Error during file reference creating");
    }
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  if (isWriteToDestProvider_) {
    destReference_ = [fileSystemProvider_ createTempFile];
    if (destReference_ == nil) {
      if (LOG_) {
        AMLog_wWithNSString_withNSString_(TAG_, @"Error during file dest reference creating");
      }
      ImActorModelModulesFileUploadTask_reportError(self);
      return;
    }
  }
  inputFile_ = [((id<AMFileSystemReference>) nil_chk(srcReference_)) openRead];
  if (inputFile_ == nil) {
    if (LOG_) {
      AMLog_wWithNSString_withNSString_(TAG_, @"Error during file open");
    }
    ImActorModelModulesFileUploadTask_reportError(self);
    return;
  }
  if (isWriteToDestProvider_) {
    outputFile_ = [((id<AMFileSystemReference>) nil_chk(destReference_)) openWriteWithSize:[srcReference_ getSize]];
    if (outputFile_ == nil) {
      [((id<AMInputFile>) nil_chk(inputFile_)) close];
      if (LOG_) {
        AMLog_wWithNSString_withNSString_(TAG_, @"Error during dest file open");
      }
      ImActorModelModulesFileUploadTask_reportError(self);
      return;
    }
  }
  crc32_ = new_AMCRC32_init();
  ImActorModelModulesFileUploadTask_startUpload(self);
}

- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ImActorModelModulesFileUploadTask_NotifyProgress class]]) {
    ImActorModelModulesFileUploadTask_performReportProgress(self);
  }
  else {
    [super onReceiveWithId:message];
  }
}

- (void)startUpload {
  ImActorModelModulesFileUploadTask_startUpload(self);
}

- (void)checkQueue {
  ImActorModelModulesFileUploadTask_checkQueue(self);
}

- (void)loadPartWithInt:(jint)blockIndex {
  ImActorModelModulesFileUploadTask_loadPartWithInt_(self, blockIndex);
}

- (void)uploadPartWithInt:(jint)blockIndex
                  withInt:(jint)offset
            withByteArray:(IOSByteArray *)data {
  ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(self, blockIndex, offset, data);
}

- (void)reportError {
  ImActorModelModulesFileUploadTask_reportError(self);
}

- (void)reportProgressWithFloat:(jfloat)progress {
  ImActorModelModulesFileUploadTask_reportProgressWithFloat_(self, progress);
}

- (void)performReportProgress {
  ImActorModelModulesFileUploadTask_performReportProgress(self);
}

- (void)reportCompleteWithAMFileReference:(AMFileReference *)location
                withAMFileSystemReference:(id<AMFileSystemReference>)reference {
  ImActorModelModulesFileUploadTask_reportCompleteWithAMFileReference_withAMFileSystemReference_(self, location, reference);
}

@end

void ImActorModelModulesFileUploadTask_initWithLong_withNSString_withNSString_withDKActorRef_withImActorModelModulesModules_(ImActorModelModulesFileUploadTask *self, jlong rid, NSString *descriptor, NSString *fileName, DKActorRef *manager, ImActorModelModulesModules *modules) {
  (void) ImActorModelModulesUtilsModuleActor_initWithImActorModelModulesModules_(self, modules);
  self->isWriteToDestProvider_ = NO;
  self->isCompleted_ = NO;
  self->blockSize_ = 32 * 1024;
  self->nextBlock_ = 0;
  self->LOG_ = [((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk(modules)) getConfiguration])) isEnableFilesLogging];
  self->rid_ = rid;
  self->fileName_ = fileName;
  self->descriptor_ = descriptor;
  self->manager_ = manager;
  self->TAG_ = JreStrcat("$JC", @"UploadTask{", rid, '}');
}

ImActorModelModulesFileUploadTask *new_ImActorModelModulesFileUploadTask_initWithLong_withNSString_withNSString_withDKActorRef_withImActorModelModulesModules_(jlong rid, NSString *descriptor, NSString *fileName, DKActorRef *manager, ImActorModelModulesModules *modules) {
  ImActorModelModulesFileUploadTask *self = [ImActorModelModulesFileUploadTask alloc];
  ImActorModelModulesFileUploadTask_initWithLong_withNSString_withNSString_withDKActorRef_withImActorModelModulesModules_(self, rid, descriptor, fileName, manager, modules);
  return self;
}

void ImActorModelModulesFileUploadTask_startUpload(ImActorModelModulesFileUploadTask *self) {
  self->blocksCount_ = [((id<AMFileSystemReference>) nil_chk(self->srcReference_)) getSize] / self->blockSize_;
  if ([self->srcReference_ getSize] % self->blockSize_ != 0) {
    self->blocksCount_++;
  }
  if (self->LOG_) {
    AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$I$", @"Starting uploading ", self->blocksCount_, @" blocks"));
    AMLog_dWithNSString_withNSString_(self->TAG_, @"Requesting upload config...");
  }
  [self requestWithAPRequest:new_APRequestGetFileUploadUrl_initWithInt_([self->srcReference_ getSize]) withAMRpcCallback:new_ImActorModelModulesFileUploadTask_$1_initWithImActorModelModulesFileUploadTask_(self)];
}

void ImActorModelModulesFileUploadTask_checkQueue(ImActorModelModulesFileUploadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  if (self->nextBlock_ == self->blocksCount_ && self->uploadCount_ == 0) {
    if (self->LOG_) {
      AMLog_dWithNSString_withNSString_(self->TAG_, @"Completing...");
    }
    jlong crc = [((AMCRC32 *) nil_chk(self->crc32_)) getValue];
    if (self->LOG_) {
      AMLog_dWithNSString_withNSString_(self->TAG_, JreStrcat("$J", @"Src #", crc));
      AMLog_dWithNSString_withNSString_(self->TAG_, @"Closing files...");
    }
    [((id<AMInputFile>) nil_chk(self->inputFile_)) close];
    if (self->isWriteToDestProvider_) {
      [((id<AMOutputFile>) nil_chk(self->outputFile_)) close];
    }
    [self requestWithAPRequest:new_APRequestCommitFileUpload_initWithByteArray_withNSString_(self->uploadConfig_, self->fileName_) withAMRpcCallback:new_ImActorModelModulesFileUploadTask_$2_initWithImActorModelModulesFileUploadTask_(self)];
    return;
  }
  if (self->nextBlock_ < self->blocksCount_ && self->uploadCount_ < ImActorModelModulesFileUploadTask_SIM_BLOCKS_COUNT) {
    ImActorModelModulesFileUploadTask_loadPartWithInt_(self, self->nextBlock_++);
  }
}

void ImActorModelModulesFileUploadTask_loadPartWithInt_(ImActorModelModulesFileUploadTask *self, jint blockIndex) {
  jint size = self->blockSize_;
  jint fileOffset = blockIndex * self->blockSize_;
  if ((blockIndex + 1) * self->blockSize_ > [((id<AMFileSystemReference>) nil_chk(self->srcReference_)) getSize]) {
    size = [self->srcReference_ getSize] - blockIndex * self->blockSize_;
  }
  IOSByteArray *data = [IOSByteArray newArrayWithLength:size];
  jint finalSize = size;
  [((id<AMInputFile>) nil_chk(self->inputFile_)) readWithOffset:fileOffset withData:data withDataOffset:0 withLength:size withCallback:new_ImActorModelModulesFileUploadTask_$3_initWithImActorModelModulesFileUploadTask_withInt_withInt_(self, blockIndex, finalSize)];
}

void ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(ImActorModelModulesFileUploadTask *self, jint blockIndex, jint offset, IOSByteArray *data) {
  [self requestWithAPRequest:new_APRequestGetFileUploadPartUrl_initWithInt_withInt_withByteArray_(blockIndex, self->blockSize_, self->uploadConfig_) withAMRpcCallback:new_ImActorModelModulesFileUploadTask_$4_initWithImActorModelModulesFileUploadTask_withByteArray_withInt_(self, data, blockIndex)];
}

void ImActorModelModulesFileUploadTask_reportError(ImActorModelModulesFileUploadTask *self) {
  if (self->LOG_) {
    AMLog_dWithNSString_withNSString_(self->TAG_, @"Reporting error");
  }
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = YES;
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:new_ImActorModelModulesFileUploadManager_UploadTaskError_initWithLong_(self->rid_)];
}

void ImActorModelModulesFileUploadTask_reportProgressWithFloat_(ImActorModelModulesFileUploadTask *self, jfloat progress) {
  if (self->isCompleted_) {
    return;
  }
  if (progress > self->currentProgress_) {
    self->currentProgress_ = progress;
  }
  jlong delta = DKEnvironment_getActorTime() - self->lastNotifyDate_;
  if (delta > ImActorModelModulesFileUploadTask_NOTIFY_THROTTLE) {
    self->lastNotifyDate_ = DKEnvironment_getActorTime();
    [((DKActorRef *) nil_chk([self self__])) sendWithId:new_ImActorModelModulesFileUploadTask_NotifyProgress_initWithImActorModelModulesFileUploadTask_(self)];
  }
  else {
    [((DKActorRef *) nil_chk([self self__])) sendOnceWithId:new_ImActorModelModulesFileUploadTask_NotifyProgress_initWithImActorModelModulesFileUploadTask_(self) withLong:delta];
  }
}

void ImActorModelModulesFileUploadTask_performReportProgress(ImActorModelModulesFileUploadTask *self) {
  if (self->isCompleted_) {
    return;
  }
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:new_ImActorModelModulesFileUploadManager_UploadTaskProgress_initWithLong_withFloat_(self->rid_, self->currentProgress_)];
}

void ImActorModelModulesFileUploadTask_reportCompleteWithAMFileReference_withAMFileSystemReference_(ImActorModelModulesFileUploadTask *self, AMFileReference *location, id<AMFileSystemReference> reference) {
  if (self->isCompleted_) {
    return;
  }
  self->isCompleted_ = YES;
  [((DKActorRef *) nil_chk(self->manager_)) sendWithId:new_ImActorModelModulesFileUploadManager_UploadTaskComplete_initWithLong_withAMFileReference_withAMFileSystemReference_(self->rid_, location, reference)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask)

@implementation ImActorModelModulesFileUploadTask_NotifyProgress

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$ {
  ImActorModelModulesFileUploadTask_NotifyProgress_initWithImActorModelModulesFileUploadTask_(self, outer$);
  return self;
}

@end

void ImActorModelModulesFileUploadTask_NotifyProgress_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask_NotifyProgress *self, ImActorModelModulesFileUploadTask *outer$) {
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadTask_NotifyProgress *new_ImActorModelModulesFileUploadTask_NotifyProgress_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask *outer$) {
  ImActorModelModulesFileUploadTask_NotifyProgress *self = [ImActorModelModulesFileUploadTask_NotifyProgress alloc];
  ImActorModelModulesFileUploadTask_NotifyProgress_initWithImActorModelModulesFileUploadTask_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_NotifyProgress)

@implementation ImActorModelModulesFileUploadTask_$1

- (void)onResult:(APResponseGetFileUploadUrl *)response {
  if (this$0_->LOG_) {
    AMLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload config loaded");
  }
  this$0_->uploadConfig_ = [((APResponseGetFileUploadUrl *) nil_chk(response)) getUploadKey];
  ImActorModelModulesFileUploadTask_checkQueue(this$0_);
}

- (void)onError:(AMRpcException *)e {
  if (this$0_->LOG_) {
    AMLog_wWithNSString_withNSString_(this$0_->TAG_, @"Upload config load error");
  }
  ImActorModelModulesFileUploadTask_reportError(this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$ {
  ImActorModelModulesFileUploadTask_$1_initWithImActorModelModulesFileUploadTask_(self, outer$);
  return self;
}

@end

void ImActorModelModulesFileUploadTask_$1_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask_$1 *self, ImActorModelModulesFileUploadTask *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadTask_$1 *new_ImActorModelModulesFileUploadTask_$1_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask *outer$) {
  ImActorModelModulesFileUploadTask_$1 *self = [ImActorModelModulesFileUploadTask_$1 alloc];
  ImActorModelModulesFileUploadTask_$1_initWithImActorModelModulesFileUploadTask_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$1)

@implementation ImActorModelModulesFileUploadTask_$2

- (void)onResult:(APResponseCommitFileUpload *)response {
  if (this$0_->LOG_) {
    AMLog_dWithNSString_withNSString_(this$0_->TAG_, @"Upload completed...");
  }
  AMFileReference *location = new_AMFileReference_initWithAPFileLocation_withNSString_withInt_([((APResponseCommitFileUpload *) nil_chk(response)) getUploadedFileLocation], this$0_->fileName_, [((id<AMFileSystemReference>) nil_chk(this$0_->srcReference_)) getSize]);
  if (this$0_->isWriteToDestProvider_) {
    id<AMFileSystemReference> reference = [((id<AMFileSystemProvider>) nil_chk([((AMConfiguration *) nil_chk([this$0_ config])) getFileSystemProvider])) commitTempFile:this$0_->destReference_ withReference:location];
    ImActorModelModulesFileUploadTask_reportCompleteWithAMFileReference_withAMFileSystemReference_(this$0_, location, reference);
  }
  else {
    ImActorModelModulesFileUploadTask_reportCompleteWithAMFileReference_withAMFileSystemReference_(this$0_, location, this$0_->srcReference_);
  }
}

- (void)onError:(AMRpcException *)e {
  if (this$0_->LOG_) {
    AMLog_wWithNSString_withNSString_(this$0_->TAG_, @"Upload complete error");
  }
  ImActorModelModulesFileUploadTask_reportError(this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$ {
  ImActorModelModulesFileUploadTask_$2_initWithImActorModelModulesFileUploadTask_(self, outer$);
  return self;
}

@end

void ImActorModelModulesFileUploadTask_$2_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask_$2 *self, ImActorModelModulesFileUploadTask *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadTask_$2 *new_ImActorModelModulesFileUploadTask_$2_initWithImActorModelModulesFileUploadTask_(ImActorModelModulesFileUploadTask *outer$) {
  ImActorModelModulesFileUploadTask_$2 *self = [ImActorModelModulesFileUploadTask_$2 alloc];
  ImActorModelModulesFileUploadTask_$2_initWithImActorModelModulesFileUploadTask_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$2)

@implementation ImActorModelModulesFileUploadTask_$3

- (void)onFileReadWithOffset:(jint)fileOffset
                    withData:(IOSByteArray *)data
              withDataOffset:(jint)offset
                  withLength:(jint)len {
  [((DKActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ImActorModelModulesFileUploadTask_$3_$1_initWithImActorModelModulesFileUploadTask_$3_withInt_withByteArray_(self, fileOffset, data)];
}

- (void)onFileReadError {
  [((DKActorRef *) nil_chk([this$0_ self__])) sendWithId:new_ImActorModelModulesFileUploadTask_$3_$2_initWithImActorModelModulesFileUploadTask_$3_(self)];
}

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$
                                                  withInt:(jint)capture$0
                                                  withInt:(jint)capture$1 {
  ImActorModelModulesFileUploadTask_$3_initWithImActorModelModulesFileUploadTask_withInt_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

@end

void ImActorModelModulesFileUploadTask_$3_initWithImActorModelModulesFileUploadTask_withInt_withInt_(ImActorModelModulesFileUploadTask_$3 *self, ImActorModelModulesFileUploadTask *outer$, jint capture$0, jint capture$1) {
  self->this$0_ = outer$;
  self->val$blockIndex_ = capture$0;
  self->val$finalSize_ = capture$1;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadTask_$3 *new_ImActorModelModulesFileUploadTask_$3_initWithImActorModelModulesFileUploadTask_withInt_withInt_(ImActorModelModulesFileUploadTask *outer$, jint capture$0, jint capture$1) {
  ImActorModelModulesFileUploadTask_$3 *self = [ImActorModelModulesFileUploadTask_$3 alloc];
  ImActorModelModulesFileUploadTask_$3_initWithImActorModelModulesFileUploadTask_withInt_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$3)

@implementation ImActorModelModulesFileUploadTask_$3_$1

- (void)run {
  if (this$0_->this$0_->isCompleted_) {
    return;
  }
  if (this$0_->this$0_->LOG_) {
    AMLog_dWithNSString_withNSString_(this$0_->this$0_->TAG_, JreStrcat("$I$", @"Block #", this$0_->val$blockIndex_, @" read"));
  }
  if (this$0_->this$0_->isWriteToDestProvider_) {
    if (![((id<AMOutputFile>) nil_chk(this$0_->this$0_->outputFile_)) writeWithOffset:val$fileOffset_ withData:val$data_ withDataOffset:0 withLength:this$0_->val$finalSize_]) {
      if (this$0_->this$0_->LOG_) {
        AMLog_wWithNSString_withNSString_(this$0_->this$0_->TAG_, JreStrcat("$I$", @"write #", this$0_->val$blockIndex_, @" error"));
      }
      ImActorModelModulesFileUploadTask_reportError(this$0_->this$0_);
      return;
    }
  }
  [((AMCRC32 *) nil_chk(this$0_->this$0_->crc32_)) updateWithByteArray:val$data_ withInt:0 withInt:this$0_->val$finalSize_];
  if (this$0_->this$0_->LOG_) {
    AMLog_dWithNSString_withNSString_(this$0_->this$0_->TAG_, JreStrcat("$I", @"Starting block upload #", this$0_->val$blockIndex_));
  }
  this$0_->this$0_->uploadCount_++;
  ImActorModelModulesFileUploadTask_uploadPartWithInt_withInt_withByteArray_(this$0_->this$0_, this$0_->val$blockIndex_, val$fileOffset_, val$data_);
  ImActorModelModulesFileUploadTask_checkQueue(this$0_->this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask_$3:(ImActorModelModulesFileUploadTask_$3 *)outer$
                                                     withInt:(jint)capture$0
                                               withByteArray:(IOSByteArray *)capture$1 {
  ImActorModelModulesFileUploadTask_$3_$1_initWithImActorModelModulesFileUploadTask_$3_withInt_withByteArray_(self, outer$, capture$0, capture$1);
  return self;
}

@end

void ImActorModelModulesFileUploadTask_$3_$1_initWithImActorModelModulesFileUploadTask_$3_withInt_withByteArray_(ImActorModelModulesFileUploadTask_$3_$1 *self, ImActorModelModulesFileUploadTask_$3 *outer$, jint capture$0, IOSByteArray *capture$1) {
  self->this$0_ = outer$;
  self->val$fileOffset_ = capture$0;
  self->val$data_ = capture$1;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadTask_$3_$1 *new_ImActorModelModulesFileUploadTask_$3_$1_initWithImActorModelModulesFileUploadTask_$3_withInt_withByteArray_(ImActorModelModulesFileUploadTask_$3 *outer$, jint capture$0, IOSByteArray *capture$1) {
  ImActorModelModulesFileUploadTask_$3_$1 *self = [ImActorModelModulesFileUploadTask_$3_$1 alloc];
  ImActorModelModulesFileUploadTask_$3_$1_initWithImActorModelModulesFileUploadTask_$3_withInt_withByteArray_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$3_$1)

@implementation ImActorModelModulesFileUploadTask_$3_$2

- (void)run {
  if (this$0_->this$0_->isCompleted_) {
    return;
  }
  if (this$0_->this$0_->LOG_) {
    AMLog_wWithNSString_withNSString_(this$0_->this$0_->TAG_, JreStrcat("$I$", @"Block #", this$0_->val$blockIndex_, @" read failure"));
  }
  ImActorModelModulesFileUploadTask_reportError(this$0_->this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask_$3:(ImActorModelModulesFileUploadTask_$3 *)outer$ {
  ImActorModelModulesFileUploadTask_$3_$2_initWithImActorModelModulesFileUploadTask_$3_(self, outer$);
  return self;
}

@end

void ImActorModelModulesFileUploadTask_$3_$2_initWithImActorModelModulesFileUploadTask_$3_(ImActorModelModulesFileUploadTask_$3_$2 *self, ImActorModelModulesFileUploadTask_$3 *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadTask_$3_$2 *new_ImActorModelModulesFileUploadTask_$3_$2_initWithImActorModelModulesFileUploadTask_$3_(ImActorModelModulesFileUploadTask_$3 *outer$) {
  ImActorModelModulesFileUploadTask_$3_$2 *self = [ImActorModelModulesFileUploadTask_$3_$2 alloc];
  ImActorModelModulesFileUploadTask_$3_$2_initWithImActorModelModulesFileUploadTask_$3_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$3_$2)

@implementation ImActorModelModulesFileUploadTask_$4

- (void)onResult:(APResponseGetFileUploadPartUrl *)response {
  [((id<AMHttpProvider>) nil_chk(this$0_->downloaderProvider_)) putMethodWithUrl:[((APResponseGetFileUploadPartUrl *) nil_chk(response)) getUrl] withContents:val$data_ withCallback:new_ImActorModelModulesFileUploadTask_$4_$1_initWithImActorModelModulesFileUploadTask_$4_(self)];
}

- (void)onError:(AMRpcException *)e {
  if (this$0_->LOG_) {
    AMLog_wWithNSString_withNSString_(this$0_->TAG_, JreStrcat("$I$", @"Get Block #", val$blockIndex_, @" url failure"));
  }
  ImActorModelModulesFileUploadTask_reportError(this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask:(ImActorModelModulesFileUploadTask *)outer$
                                            withByteArray:(IOSByteArray *)capture$0
                                                  withInt:(jint)capture$1 {
  ImActorModelModulesFileUploadTask_$4_initWithImActorModelModulesFileUploadTask_withByteArray_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

@end

void ImActorModelModulesFileUploadTask_$4_initWithImActorModelModulesFileUploadTask_withByteArray_withInt_(ImActorModelModulesFileUploadTask_$4 *self, ImActorModelModulesFileUploadTask *outer$, IOSByteArray *capture$0, jint capture$1) {
  self->this$0_ = outer$;
  self->val$data_ = capture$0;
  self->val$blockIndex_ = capture$1;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadTask_$4 *new_ImActorModelModulesFileUploadTask_$4_initWithImActorModelModulesFileUploadTask_withByteArray_withInt_(ImActorModelModulesFileUploadTask *outer$, IOSByteArray *capture$0, jint capture$1) {
  ImActorModelModulesFileUploadTask_$4 *self = [ImActorModelModulesFileUploadTask_$4 alloc];
  ImActorModelModulesFileUploadTask_$4_initWithImActorModelModulesFileUploadTask_withByteArray_withInt_(self, outer$, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$4)

@implementation ImActorModelModulesFileUploadTask_$4_$1

- (void)onUploaded {
  [((DKActorRef *) nil_chk([this$0_->this$0_ self__])) sendWithId:new_ImActorModelModulesFileUploadTask_$4_$1_$1_initWithImActorModelModulesFileUploadTask_$4_$1_(self)];
}

- (void)onUploadFailure {
  [((DKActorRef *) nil_chk([this$0_->this$0_ self__])) sendWithId:new_ImActorModelModulesFileUploadTask_$4_$1_$2_initWithImActorModelModulesFileUploadTask_$4_$1_(self)];
}

- (instancetype)initWithImActorModelModulesFileUploadTask_$4:(ImActorModelModulesFileUploadTask_$4 *)outer$ {
  ImActorModelModulesFileUploadTask_$4_$1_initWithImActorModelModulesFileUploadTask_$4_(self, outer$);
  return self;
}

@end

void ImActorModelModulesFileUploadTask_$4_$1_initWithImActorModelModulesFileUploadTask_$4_(ImActorModelModulesFileUploadTask_$4_$1 *self, ImActorModelModulesFileUploadTask_$4 *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadTask_$4_$1 *new_ImActorModelModulesFileUploadTask_$4_$1_initWithImActorModelModulesFileUploadTask_$4_(ImActorModelModulesFileUploadTask_$4 *outer$) {
  ImActorModelModulesFileUploadTask_$4_$1 *self = [ImActorModelModulesFileUploadTask_$4_$1 alloc];
  ImActorModelModulesFileUploadTask_$4_$1_initWithImActorModelModulesFileUploadTask_$4_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$4_$1)

@implementation ImActorModelModulesFileUploadTask_$4_$1_$1

- (void)run {
  if (this$0_->this$0_->this$0_->LOG_) {
    AMLog_dWithNSString_withNSString_(this$0_->this$0_->this$0_->TAG_, JreStrcat("$I$", @"Block #", this$0_->this$0_->val$blockIndex_, @" uploaded"));
  }
  this$0_->this$0_->this$0_->uploadCount_--;
  this$0_->this$0_->this$0_->uploaded_++;
  ImActorModelModulesFileUploadTask_reportProgressWithFloat_(this$0_->this$0_->this$0_, this$0_->this$0_->this$0_->uploaded_ / (jfloat) this$0_->this$0_->this$0_->blocksCount_);
  ImActorModelModulesFileUploadTask_checkQueue(this$0_->this$0_->this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask_$4_$1:(ImActorModelModulesFileUploadTask_$4_$1 *)outer$ {
  ImActorModelModulesFileUploadTask_$4_$1_$1_initWithImActorModelModulesFileUploadTask_$4_$1_(self, outer$);
  return self;
}

@end

void ImActorModelModulesFileUploadTask_$4_$1_$1_initWithImActorModelModulesFileUploadTask_$4_$1_(ImActorModelModulesFileUploadTask_$4_$1_$1 *self, ImActorModelModulesFileUploadTask_$4_$1 *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadTask_$4_$1_$1 *new_ImActorModelModulesFileUploadTask_$4_$1_$1_initWithImActorModelModulesFileUploadTask_$4_$1_(ImActorModelModulesFileUploadTask_$4_$1 *outer$) {
  ImActorModelModulesFileUploadTask_$4_$1_$1 *self = [ImActorModelModulesFileUploadTask_$4_$1_$1 alloc];
  ImActorModelModulesFileUploadTask_$4_$1_$1_initWithImActorModelModulesFileUploadTask_$4_$1_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$4_$1_$1)

@implementation ImActorModelModulesFileUploadTask_$4_$1_$2

- (void)run {
  if (this$0_->this$0_->this$0_->LOG_) {
    AMLog_wWithNSString_withNSString_(this$0_->this$0_->this$0_->TAG_, JreStrcat("$I$", @"Block #", this$0_->this$0_->val$blockIndex_, @" upload failure"));
  }
  ImActorModelModulesFileUploadTask_reportError(this$0_->this$0_->this$0_);
}

- (instancetype)initWithImActorModelModulesFileUploadTask_$4_$1:(ImActorModelModulesFileUploadTask_$4_$1 *)outer$ {
  ImActorModelModulesFileUploadTask_$4_$1_$2_initWithImActorModelModulesFileUploadTask_$4_$1_(self, outer$);
  return self;
}

@end

void ImActorModelModulesFileUploadTask_$4_$1_$2_initWithImActorModelModulesFileUploadTask_$4_$1_(ImActorModelModulesFileUploadTask_$4_$1_$2 *self, ImActorModelModulesFileUploadTask_$4_$1 *outer$) {
  self->this$0_ = outer$;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadTask_$4_$1_$2 *new_ImActorModelModulesFileUploadTask_$4_$1_$2_initWithImActorModelModulesFileUploadTask_$4_$1_(ImActorModelModulesFileUploadTask_$4_$1 *outer$) {
  ImActorModelModulesFileUploadTask_$4_$1_$2 *self = [ImActorModelModulesFileUploadTask_$4_$1_$2 alloc];
  ImActorModelModulesFileUploadTask_$4_$1_$2_initWithImActorModelModulesFileUploadTask_$4_$1_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadTask_$4_$1_$2)
