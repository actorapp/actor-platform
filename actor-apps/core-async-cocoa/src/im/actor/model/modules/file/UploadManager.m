//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-apps/core/src/main/java/im/actor/model/modules/file/UploadManager.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "im/actor/model/Configuration.h"
#include "im/actor/model/droidkit/actors/Actor.h"
#include "im/actor/model/droidkit/actors/ActorCreator.h"
#include "im/actor/model/droidkit/actors/ActorRef.h"
#include "im/actor/model/droidkit/actors/ActorSystem.h"
#include "im/actor/model/droidkit/actors/Environment.h"
#include "im/actor/model/droidkit/actors/Props.h"
#include "im/actor/model/droidkit/actors/messages/PoisonPill.h"
#include "im/actor/model/droidkit/engine/KeyValueEngine.h"
#include "im/actor/model/entity/FileReference.h"
#include "im/actor/model/files/FileSystemReference.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/modules/Files.h"
#include "im/actor/model/modules/Modules.h"
#include "im/actor/model/modules/file/UploadManager.h"
#include "im/actor/model/modules/file/UploadTask.h"
#include "im/actor/model/modules/file/entity/Downloaded.h"
#include "im/actor/model/modules/utils/ModuleActor.h"
#include "im/actor/model/modules/utils/RandomUtils.h"
#include "im/actor/model/viewmodel/UploadFileCallback.h"
#include "java/lang/Runnable.h"
#include "java/util/ArrayList.h"

@class ImActorModelModulesFileUploadManager_QueueItem;

#define ImActorModelModulesFileUploadManager_SIM_MAX_UPLOADS 2

@interface ImActorModelModulesFileUploadManager () {
 @public
  jboolean LOG_;
  JavaUtilArrayList *queue_;
}

- (void)checkQueue;

- (ImActorModelModulesFileUploadManager_QueueItem *)findItemWithLong:(jlong)rid;

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager, queue_, JavaUtilArrayList *)

static NSString *ImActorModelModulesFileUploadManager_TAG_ = @"UploadManager";
J2OBJC_STATIC_FIELD_GETTER(ImActorModelModulesFileUploadManager, TAG_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(ImActorModelModulesFileUploadManager, SIM_MAX_UPLOADS, jint)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_checkQueue(ImActorModelModulesFileUploadManager *self);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_QueueItem *ImActorModelModulesFileUploadManager_findItemWithLong_(ImActorModelModulesFileUploadManager *self, jlong rid);

@interface ImActorModelModulesFileUploadManager_QueueItem : NSObject {
 @public
  jlong rid_;
  NSString *fileDescriptor_;
  jboolean isStopped_;
  jboolean isStarted_;
  jfloat progress_;
  DKActorRef *taskRef_;
  DKActorRef *requestActor_;
  NSString *fileName_;
  JavaUtilArrayList *callbacks_;
}

- (instancetype)initWithImActorModelModulesFileUploadManager:(ImActorModelModulesFileUploadManager *)outer$
                                                    withLong:(jlong)rid
                                                withNSString:(NSString *)fileDescriptor
                                                withNSString:(NSString *)fileName
                                              withDKActorRef:(DKActorRef *)requestActor;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_QueueItem)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_QueueItem, fileDescriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_QueueItem, taskRef_, DKActorRef *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_QueueItem, requestActor_, DKActorRef *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_QueueItem, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_QueueItem, callbacks_, JavaUtilArrayList *)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_QueueItem_initWithImActorModelModulesFileUploadManager_withLong_withNSString_withNSString_withDKActorRef_(ImActorModelModulesFileUploadManager_QueueItem *self, ImActorModelModulesFileUploadManager *outer$, jlong rid, NSString *fileDescriptor, NSString *fileName, DKActorRef *requestActor);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_QueueItem *new_ImActorModelModulesFileUploadManager_QueueItem_initWithImActorModelModulesFileUploadManager_withLong_withNSString_withNSString_withDKActorRef_(ImActorModelModulesFileUploadManager *outer$, jlong rid, NSString *fileDescriptor, NSString *fileName, DKActorRef *requestActor) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_QueueItem)

@interface ImActorModelModulesFileUploadManager_StartUpload () {
 @public
  jlong rid_;
  NSString *fileDescriptor_;
  NSString *fileName_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_StartUpload, fileDescriptor_, NSString *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_StartUpload, fileName_, NSString *)

@interface ImActorModelModulesFileUploadManager_BindUpload () {
 @public
  jlong rid_;
  id<AMUploadFileCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_BindUpload, callback_, id<AMUploadFileCallback>)

@interface ImActorModelModulesFileUploadManager_UnbindUpload () {
 @public
  jlong rid_;
  id<AMUploadFileCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_UnbindUpload, callback_, id<AMUploadFileCallback>)

@interface ImActorModelModulesFileUploadManager_StopUpload () {
 @public
  jlong rid_;
}

@end

@interface ImActorModelModulesFileUploadManager_UploadTaskError () {
 @public
  jlong rid_;
}

@end

@interface ImActorModelModulesFileUploadManager_UploadTaskProgress () {
 @public
  jlong rid_;
  jfloat progress_;
}

@end

@interface ImActorModelModulesFileUploadManager_UploadTaskComplete () {
 @public
  jlong rid_;
  AMFileReference *location_;
  id<AMFileSystemReference> reference_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_UploadTaskComplete, location_, AMFileReference *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_UploadTaskComplete, reference_, id<AMFileSystemReference>)

@interface ImActorModelModulesFileUploadManager_UploadCompleted () {
 @public
  jlong rid_;
  AMFileReference *fileReference_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_UploadCompleted, fileReference_, AMFileReference *)

@interface ImActorModelModulesFileUploadManager_UploadError () {
 @public
  jlong rid_;
}

@end

@interface ImActorModelModulesFileUploadManager_RequestState () {
 @public
  jlong rid_;
  id<AMUploadFileCallback> callback_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_RequestState, callback_, id<AMUploadFileCallback>)

@interface ImActorModelModulesFileUploadManager_PauseUpload () {
 @public
  jlong rid_;
}

@end

@interface ImActorModelModulesFileUploadManager_ResumeUpload () {
 @public
  jlong rid_;
}

@end

@interface ImActorModelModulesFileUploadManager_$1 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$1)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$1, val$callback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$1_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$1 *self, id<AMUploadFileCallback> capture$0);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$1 *new_ImActorModelModulesFileUploadManager_$1_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$1)

@interface ImActorModelModulesFileUploadManager_$2 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$2)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$2, val$callback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$2_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$2 *self, id<AMUploadFileCallback> capture$0);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$2 *new_ImActorModelModulesFileUploadManager_$2_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$2)

@interface ImActorModelModulesFileUploadManager_$3 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$3)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$3, val$callback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$3_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$3 *self, id<AMUploadFileCallback> capture$0);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$3 *new_ImActorModelModulesFileUploadManager_$3_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$3)

@interface ImActorModelModulesFileUploadManager_$4 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$callback_;
  jfloat val$progress_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$4)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$4, val$callback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$4_initWithAMUploadFileCallback_withFloat_(ImActorModelModulesFileUploadManager_$4 *self, id<AMUploadFileCallback> capture$0, jfloat capture$1);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$4 *new_ImActorModelModulesFileUploadManager_$4_initWithAMUploadFileCallback_withFloat_(id<AMUploadFileCallback> capture$0, jfloat capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$4)

@interface ImActorModelModulesFileUploadManager_$5 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$5)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$5, val$callback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$5_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$5 *self, id<AMUploadFileCallback> capture$0);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$5 *new_ImActorModelModulesFileUploadManager_$5_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$5)

@interface ImActorModelModulesFileUploadManager_$6 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$6)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$6, val$callback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$6_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$6 *self, id<AMUploadFileCallback> capture$0);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$6 *new_ImActorModelModulesFileUploadManager_$6_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$6)

@interface ImActorModelModulesFileUploadManager_$7 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$callback_;
  jfloat val$progress_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$7)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$7, val$callback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$7_initWithAMUploadFileCallback_withFloat_(ImActorModelModulesFileUploadManager_$7 *self, id<AMUploadFileCallback> capture$0, jfloat capture$1);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$7 *new_ImActorModelModulesFileUploadManager_$7_initWithAMUploadFileCallback_withFloat_(id<AMUploadFileCallback> capture$0, jfloat capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$7)

@interface ImActorModelModulesFileUploadManager_$8 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$8)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$8, val$callback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$8_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$8 *self, id<AMUploadFileCallback> capture$0);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$8 *new_ImActorModelModulesFileUploadManager_$8_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$8)

@interface ImActorModelModulesFileUploadManager_$9 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$9)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$9, val$callback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$9_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$9 *self, id<AMUploadFileCallback> capture$0);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$9 *new_ImActorModelModulesFileUploadManager_$9_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$9)

@interface ImActorModelModulesFileUploadManager_$10 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$callback_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$10)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$10, val$callback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$10_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$10 *self, id<AMUploadFileCallback> capture$0);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$10 *new_ImActorModelModulesFileUploadManager_$10_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$10)

@interface ImActorModelModulesFileUploadManager_$11 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$fileCallback_;
  jfloat val$progress_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$11)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$11, val$fileCallback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$11_initWithAMUploadFileCallback_withFloat_(ImActorModelModulesFileUploadManager_$11 *self, id<AMUploadFileCallback> capture$0, jfloat capture$1);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$11 *new_ImActorModelModulesFileUploadManager_$11_initWithAMUploadFileCallback_withFloat_(id<AMUploadFileCallback> capture$0, jfloat capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$11)

@interface ImActorModelModulesFileUploadManager_$12 : NSObject < JavaLangRunnable > {
 @public
  id<AMUploadFileCallback> val$fileCallback_;
}

- (void)run;

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$12)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$12, val$fileCallback_, id<AMUploadFileCallback>)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$12_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$12 *self, id<AMUploadFileCallback> capture$0);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$12 *new_ImActorModelModulesFileUploadManager_$12_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$12)

@interface ImActorModelModulesFileUploadManager_$13 : NSObject < DKActorCreator > {
 @public
  ImActorModelModulesFileUploadManager *this$0_;
  ImActorModelModulesFileUploadManager_QueueItem *val$finalPendingQueue_;
}

- (ImActorModelModulesFileUploadTask *)create;

- (instancetype)initWithImActorModelModulesFileUploadManager:(ImActorModelModulesFileUploadManager *)outer$
          withImActorModelModulesFileUploadManager_QueueItem:(ImActorModelModulesFileUploadManager_QueueItem *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(ImActorModelModulesFileUploadManager_$13)

J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$13, this$0_, ImActorModelModulesFileUploadManager *)
J2OBJC_FIELD_SETTER(ImActorModelModulesFileUploadManager_$13, val$finalPendingQueue_, ImActorModelModulesFileUploadManager_QueueItem *)

__attribute__((unused)) static void ImActorModelModulesFileUploadManager_$13_initWithImActorModelModulesFileUploadManager_withImActorModelModulesFileUploadManager_QueueItem_(ImActorModelModulesFileUploadManager_$13 *self, ImActorModelModulesFileUploadManager *outer$, ImActorModelModulesFileUploadManager_QueueItem *capture$0);

__attribute__((unused)) static ImActorModelModulesFileUploadManager_$13 *new_ImActorModelModulesFileUploadManager_$13_initWithImActorModelModulesFileUploadManager_withImActorModelModulesFileUploadManager_QueueItem_(ImActorModelModulesFileUploadManager *outer$, ImActorModelModulesFileUploadManager_QueueItem *capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ImActorModelModulesFileUploadManager_$13)

@implementation ImActorModelModulesFileUploadManager

- (instancetype)initWithImActorModelModulesModules:(ImActorModelModulesModules *)messenger {
  ImActorModelModulesFileUploadManager_initWithImActorModelModulesModules_(self, messenger);
  return self;
}

- (void)startUploadWithLong:(jlong)rid
               withNSString:(NSString *)descriptor
               withNSString:(NSString *)fileName
             withDKActorRef:(DKActorRef *)requestActor {
  if (LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$J$$", @"Starting upload #", rid, @" with descriptor ", descriptor));
  }
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = new_ImActorModelModulesFileUploadManager_QueueItem_initWithImActorModelModulesFileUploadManager_withLong_withNSString_withNSString_withDKActorRef_(self, rid, descriptor, fileName, requestActor);
  queueItem->isStopped_ = NO;
  [((JavaUtilArrayList *) nil_chk(queue_)) addWithId:queueItem];
  ImActorModelModulesFileUploadManager_checkQueue(self);
}

- (void)stopUploadWithLong:(jlong)rid {
  if (LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$J", @"Stopping download #", rid));
  }
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- Not present in queue");
    }
  }
  else {
    if (queueItem->isStarted_) {
      if (LOG_) {
        AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- Stopping actor");
      }
      [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
      queueItem->taskRef_ = nil;
      queueItem->isStarted_ = NO;
    }
    [((JavaUtilArrayList *) nil_chk(queue_)) removeWithId:queueItem];
    for (id<AMUploadFileCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$1_initWithAMUploadFileCallback_(callback));
    }
  }
  ImActorModelModulesFileUploadManager_checkQueue(self);
}

- (void)bindUploadWithLong:(jlong)rid
  withAMUploadFileCallback:(id<AMUploadFileCallback>)callback {
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$2_initWithAMUploadFileCallback_(callback));
  }
  else {
    if (queueItem->isStopped_) {
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$3_initWithAMUploadFileCallback_(callback));
    }
    else {
      jfloat progress = queueItem->progress_;
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$4_initWithAMUploadFileCallback_withFloat_(callback, progress));
    }
    [((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) addWithId:callback];
  }
}

- (void)unbindUploadWithLong:(jlong)rid
    withAMUploadFileCallback:(id<AMUploadFileCallback>)callback {
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem != nil) {
    [((JavaUtilArrayList *) nil_chk(queueItem->callbacks_)) removeWithId:callback];
  }
}

- (void)requestStateWithLong:(jlong)rid
    withAMUploadFileCallback:(id<AMUploadFileCallback>)callback {
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$5_initWithAMUploadFileCallback_(callback));
  }
  else {
    if (queueItem->isStopped_) {
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$6_initWithAMUploadFileCallback_(callback));
    }
    else {
      jfloat progress = queueItem->progress_;
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$7_initWithAMUploadFileCallback_withFloat_(callback, progress));
    }
  }
}

- (void)resumeUploadWithLong:(jlong)rid {
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem != nil) {
    if (queueItem->isStarted_) {
      return;
    }
    if (queueItem->isStopped_) {
      queueItem->isStopped_ = NO;
    }
    queueItem->progress_ = 0;
    for (id<AMUploadFileCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$8_initWithAMUploadFileCallback_(callback));
    }
    ImActorModelModulesFileUploadManager_checkQueue(self);
  }
}

- (void)pauseUploadWithLong:(jlong)rid {
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem != nil) {
    if (queueItem->isStarted_) {
      [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
      queueItem->taskRef_ = nil;
      queueItem->isStarted_ = NO;
    }
    queueItem->isStopped_ = YES;
    for (id<AMUploadFileCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
      DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$9_initWithAMUploadFileCallback_(callback));
    }
  }
}

- (void)onUploadTaskErrorWithLong:(jlong)rid {
  if (LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$J$", @"Upload #", rid, @" error"));
  }
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    if (LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- Nothing found");
    }
    return;
  }
  if (!((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
  queueItem->isStopped_ = YES;
  queueItem->isStarted_ = NO;
  for (id<AMUploadFileCallback> __strong callback in nil_chk(queueItem->callbacks_)) {
    DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$10_initWithAMUploadFileCallback_(callback));
  }
  [((DKActorRef *) nil_chk(queueItem->requestActor_)) sendWithId:new_ImActorModelModulesFileUploadManager_UploadError_initWithLong_(rid)];
  ImActorModelModulesFileUploadManager_checkQueue(self);
}

- (void)onUploadTaskProgressWithLong:(jlong)rid
                           withFloat:(jfloat)progress {
  if (LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$J$F", @"Upload #", rid, @" progress ", progress));
  }
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    return;
  }
  if (!((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  queueItem->progress_ = progress;
  for (id<AMUploadFileCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$11_initWithAMUploadFileCallback_withFloat_(fileCallback, progress));
  }
}

- (void)onUploadTaskCompleteWithLong:(jlong)rid
                 withAMFileReference:(AMFileReference *)fileReference
           withAMFileSystemReference:(id<AMFileSystemReference>)reference {
  if (LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$J$", @"Upload #", rid, @" complete"));
  }
  ImActorModelModulesFileUploadManager_QueueItem *queueItem = ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
  if (queueItem == nil) {
    return;
  }
  if (!((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
    return;
  }
  [((JavaUtilArrayList *) nil_chk(queue_)) removeWithId:queueItem];
  [((DKActorRef *) nil_chk(queueItem->taskRef_)) sendWithId:ImActorModelDroidkitActorsMessagesPoisonPill_get_INSTANCE_()];
  [((id<DKKeyValueEngine>) nil_chk([((ImActorModelModulesFiles *) nil_chk([((ImActorModelModulesModules *) nil_chk([self modules])) getFilesModule])) getDownloadedEngine])) addOrUpdateItem:new_ImActorModelModulesFileEntityDownloaded_initWithLong_withInt_withNSString_([((AMFileReference *) nil_chk(fileReference)) getFileId], [fileReference getFileSize], [((id<AMFileSystemReference>) nil_chk(reference)) getDescriptor])];
  for (id<AMUploadFileCallback> __strong fileCallback in nil_chk(queueItem->callbacks_)) {
    DKEnvironment_dispatchCallbackWithJavaLangRunnable_(new_ImActorModelModulesFileUploadManager_$12_initWithAMUploadFileCallback_(fileCallback));
  }
  [((DKActorRef *) nil_chk(queueItem->requestActor_)) sendWithId:new_ImActorModelModulesFileUploadManager_UploadCompleted_initWithLong_withAMFileReference_(rid, fileReference)];
  ImActorModelModulesFileUploadManager_checkQueue(self);
}

- (void)checkQueue {
  ImActorModelModulesFileUploadManager_checkQueue(self);
}

- (ImActorModelModulesFileUploadManager_QueueItem *)findItemWithLong:(jlong)rid {
  return ImActorModelModulesFileUploadManager_findItemWithLong_(self, rid);
}

- (void)onReceiveWithId:(id)message {
  if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_StartUpload class]]) {
    ImActorModelModulesFileUploadManager_StartUpload *startUpload = (ImActorModelModulesFileUploadManager_StartUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_StartUpload class]);
    [self startUploadWithLong:[((ImActorModelModulesFileUploadManager_StartUpload *) nil_chk(startUpload)) getRid] withNSString:[startUpload getFileDescriptor] withNSString:[startUpload getFileName] withDKActorRef:[self sender]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_StopUpload class]]) {
    ImActorModelModulesFileUploadManager_StopUpload *cancelUpload = (ImActorModelModulesFileUploadManager_StopUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_StopUpload class]);
    [self stopUploadWithLong:[((ImActorModelModulesFileUploadManager_StopUpload *) nil_chk(cancelUpload)) getRid]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UploadTaskError class]]) {
    ImActorModelModulesFileUploadManager_UploadTaskError *uploadTaskError = (ImActorModelModulesFileUploadManager_UploadTaskError *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UploadTaskError class]);
    [self onUploadTaskErrorWithLong:[((ImActorModelModulesFileUploadManager_UploadTaskError *) nil_chk(uploadTaskError)) getRid]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UploadTaskProgress class]]) {
    ImActorModelModulesFileUploadManager_UploadTaskProgress *taskProgress = (ImActorModelModulesFileUploadManager_UploadTaskProgress *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UploadTaskProgress class]);
    [self onUploadTaskProgressWithLong:[((ImActorModelModulesFileUploadManager_UploadTaskProgress *) nil_chk(taskProgress)) getRid] withFloat:[taskProgress getProgress]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UploadTaskComplete class]]) {
    ImActorModelModulesFileUploadManager_UploadTaskComplete *taskComplete = (ImActorModelModulesFileUploadManager_UploadTaskComplete *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UploadTaskComplete class]);
    [self onUploadTaskCompleteWithLong:[((ImActorModelModulesFileUploadManager_UploadTaskComplete *) nil_chk(taskComplete)) getRid] withAMFileReference:[taskComplete getLocation] withAMFileSystemReference:[taskComplete getReference]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_BindUpload class]]) {
    ImActorModelModulesFileUploadManager_BindUpload *bindUpload = (ImActorModelModulesFileUploadManager_BindUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_BindUpload class]);
    [self bindUploadWithLong:[((ImActorModelModulesFileUploadManager_BindUpload *) nil_chk(bindUpload)) getRid] withAMUploadFileCallback:[bindUpload getCallback]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_UnbindUpload class]]) {
    ImActorModelModulesFileUploadManager_UnbindUpload *unbindUpload = (ImActorModelModulesFileUploadManager_UnbindUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_UnbindUpload class]);
    [self unbindUploadWithLong:[((ImActorModelModulesFileUploadManager_UnbindUpload *) nil_chk(unbindUpload)) getRid] withAMUploadFileCallback:[unbindUpload getCallback]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_RequestState class]]) {
    ImActorModelModulesFileUploadManager_RequestState *requestState = (ImActorModelModulesFileUploadManager_RequestState *) check_class_cast(message, [ImActorModelModulesFileUploadManager_RequestState class]);
    [self requestStateWithLong:[((ImActorModelModulesFileUploadManager_RequestState *) nil_chk(requestState)) getRid] withAMUploadFileCallback:[requestState getCallback]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_PauseUpload class]]) {
    ImActorModelModulesFileUploadManager_PauseUpload *pauseUpload = (ImActorModelModulesFileUploadManager_PauseUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_PauseUpload class]);
    [self pauseUploadWithLong:[((ImActorModelModulesFileUploadManager_PauseUpload *) nil_chk(pauseUpload)) getRid]];
  }
  else if ([message isKindOfClass:[ImActorModelModulesFileUploadManager_ResumeUpload class]]) {
    ImActorModelModulesFileUploadManager_ResumeUpload *resumeUpload = (ImActorModelModulesFileUploadManager_ResumeUpload *) check_class_cast(message, [ImActorModelModulesFileUploadManager_ResumeUpload class]);
    [self resumeUploadWithLong:[((ImActorModelModulesFileUploadManager_ResumeUpload *) nil_chk(resumeUpload)) getRid]];
  }
  else {
    [self dropWithId:message];
  }
}

@end

void ImActorModelModulesFileUploadManager_initWithImActorModelModulesModules_(ImActorModelModulesFileUploadManager *self, ImActorModelModulesModules *messenger) {
  (void) ImActorModelModulesUtilsModuleActor_initWithImActorModelModulesModules_(self, messenger);
  self->queue_ = new_JavaUtilArrayList_init();
  self->LOG_ = [((AMConfiguration *) nil_chk([((ImActorModelModulesModules *) nil_chk(messenger)) getConfiguration])) isEnableFilesLogging];
}

ImActorModelModulesFileUploadManager *new_ImActorModelModulesFileUploadManager_initWithImActorModelModulesModules_(ImActorModelModulesModules *messenger) {
  ImActorModelModulesFileUploadManager *self = [ImActorModelModulesFileUploadManager alloc];
  ImActorModelModulesFileUploadManager_initWithImActorModelModulesModules_(self, messenger);
  return self;
}

void ImActorModelModulesFileUploadManager_checkQueue(ImActorModelModulesFileUploadManager *self) {
  if (self->LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- Checking queue");
  }
  jint activeUploads = 0;
  for (ImActorModelModulesFileUploadManager_QueueItem * __strong queueItem in nil_chk(self->queue_)) {
    if (((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_) {
      activeUploads++;
    }
  }
  if (activeUploads >= ImActorModelModulesFileUploadManager_SIM_MAX_UPLOADS) {
    if (self->LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- Already have max number of simultaneous uploads");
    }
    return;
  }
  ImActorModelModulesFileUploadManager_QueueItem *pendingQueue = nil;
  for (ImActorModelModulesFileUploadManager_QueueItem * __strong queueItem in self->queue_) {
    if (!((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(queueItem))->isStarted_ && !queueItem->isStopped_) {
      pendingQueue = queueItem;
      break;
    }
  }
  if (pendingQueue == nil) {
    if (self->LOG_) {
      AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, @"- No work for downloading");
    }
    return;
  }
  if (self->LOG_) {
    AMLog_dWithNSString_withNSString_(ImActorModelModulesFileUploadManager_TAG_, JreStrcat("$$", @"- Starting upload file #", ((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(pendingQueue))->fileDescriptor_));
  }
  ((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(pendingQueue))->isStarted_ = YES;
  ImActorModelModulesFileUploadManager_QueueItem *finalPendingQueue = pendingQueue;
  pendingQueue->taskRef_ = [((DKActorSystem *) nil_chk([self system])) actorOfWithDKProps:[((DKProps *) nil_chk(DKProps_createWithIOSClass_withDKActorCreator_(ImActorModelModulesFileUploadTask_class_(), new_ImActorModelModulesFileUploadManager_$13_initWithImActorModelModulesFileUploadManager_withImActorModelModulesFileUploadManager_QueueItem_(self, finalPendingQueue)))) changeDispatcherWithNSString:@"heavy"] withNSString:JreStrcat("$J", @"actor/upload/task_", ImActorModelModulesUtilsRandomUtils_nextRid())];
}

ImActorModelModulesFileUploadManager_QueueItem *ImActorModelModulesFileUploadManager_findItemWithLong_(ImActorModelModulesFileUploadManager *self, jlong rid) {
  for (ImActorModelModulesFileUploadManager_QueueItem * __strong q in nil_chk(self->queue_)) {
    if (((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(q))->rid_ == rid) {
      return q;
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager)

@implementation ImActorModelModulesFileUploadManager_QueueItem

- (instancetype)initWithImActorModelModulesFileUploadManager:(ImActorModelModulesFileUploadManager *)outer$
                                                    withLong:(jlong)rid
                                                withNSString:(NSString *)fileDescriptor
                                                withNSString:(NSString *)fileName
                                              withDKActorRef:(DKActorRef *)requestActor {
  ImActorModelModulesFileUploadManager_QueueItem_initWithImActorModelModulesFileUploadManager_withLong_withNSString_withNSString_withDKActorRef_(self, outer$, rid, fileDescriptor, fileName, requestActor);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_QueueItem_initWithImActorModelModulesFileUploadManager_withLong_withNSString_withNSString_withDKActorRef_(ImActorModelModulesFileUploadManager_QueueItem *self, ImActorModelModulesFileUploadManager *outer$, jlong rid, NSString *fileDescriptor, NSString *fileName, DKActorRef *requestActor) {
  (void) NSObject_init(self);
  self->callbacks_ = new_JavaUtilArrayList_init();
  self->rid_ = rid;
  self->fileDescriptor_ = fileDescriptor;
  self->requestActor_ = requestActor;
  self->fileName_ = fileName;
}

ImActorModelModulesFileUploadManager_QueueItem *new_ImActorModelModulesFileUploadManager_QueueItem_initWithImActorModelModulesFileUploadManager_withLong_withNSString_withNSString_withDKActorRef_(ImActorModelModulesFileUploadManager *outer$, jlong rid, NSString *fileDescriptor, NSString *fileName, DKActorRef *requestActor) {
  ImActorModelModulesFileUploadManager_QueueItem *self = [ImActorModelModulesFileUploadManager_QueueItem alloc];
  ImActorModelModulesFileUploadManager_QueueItem_initWithImActorModelModulesFileUploadManager_withLong_withNSString_withNSString_withDKActorRef_(self, outer$, rid, fileDescriptor, fileName, requestActor);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_QueueItem)

@implementation ImActorModelModulesFileUploadManager_StartUpload

- (instancetype)initWithLong:(jlong)rid
                withNSString:(NSString *)fileDescriptor
                withNSString:(NSString *)fileName {
  ImActorModelModulesFileUploadManager_StartUpload_initWithLong_withNSString_withNSString_(self, rid, fileDescriptor, fileName);
  return self;
}

- (jlong)getRid {
  return rid_;
}

- (NSString *)getFileDescriptor {
  return fileDescriptor_;
}

- (NSString *)getFileName {
  return fileName_;
}

@end

void ImActorModelModulesFileUploadManager_StartUpload_initWithLong_withNSString_withNSString_(ImActorModelModulesFileUploadManager_StartUpload *self, jlong rid, NSString *fileDescriptor, NSString *fileName) {
  (void) NSObject_init(self);
  self->rid_ = rid;
  self->fileDescriptor_ = fileDescriptor;
  self->fileName_ = fileName;
}

ImActorModelModulesFileUploadManager_StartUpload *new_ImActorModelModulesFileUploadManager_StartUpload_initWithLong_withNSString_withNSString_(jlong rid, NSString *fileDescriptor, NSString *fileName) {
  ImActorModelModulesFileUploadManager_StartUpload *self = [ImActorModelModulesFileUploadManager_StartUpload alloc];
  ImActorModelModulesFileUploadManager_StartUpload_initWithLong_withNSString_withNSString_(self, rid, fileDescriptor, fileName);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_StartUpload)

@implementation ImActorModelModulesFileUploadManager_BindUpload

- (instancetype)initWithLong:(jlong)rid
    withAMUploadFileCallback:(id<AMUploadFileCallback>)callback {
  ImActorModelModulesFileUploadManager_BindUpload_initWithLong_withAMUploadFileCallback_(self, rid, callback);
  return self;
}

- (jlong)getRid {
  return rid_;
}

- (id<AMUploadFileCallback>)getCallback {
  return callback_;
}

@end

void ImActorModelModulesFileUploadManager_BindUpload_initWithLong_withAMUploadFileCallback_(ImActorModelModulesFileUploadManager_BindUpload *self, jlong rid, id<AMUploadFileCallback> callback) {
  (void) NSObject_init(self);
  self->rid_ = rid;
  self->callback_ = callback;
}

ImActorModelModulesFileUploadManager_BindUpload *new_ImActorModelModulesFileUploadManager_BindUpload_initWithLong_withAMUploadFileCallback_(jlong rid, id<AMUploadFileCallback> callback) {
  ImActorModelModulesFileUploadManager_BindUpload *self = [ImActorModelModulesFileUploadManager_BindUpload alloc];
  ImActorModelModulesFileUploadManager_BindUpload_initWithLong_withAMUploadFileCallback_(self, rid, callback);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_BindUpload)

@implementation ImActorModelModulesFileUploadManager_UnbindUpload

- (instancetype)initWithLong:(jlong)rid
    withAMUploadFileCallback:(id<AMUploadFileCallback>)callback {
  ImActorModelModulesFileUploadManager_UnbindUpload_initWithLong_withAMUploadFileCallback_(self, rid, callback);
  return self;
}

- (jlong)getRid {
  return rid_;
}

- (id<AMUploadFileCallback>)getCallback {
  return callback_;
}

@end

void ImActorModelModulesFileUploadManager_UnbindUpload_initWithLong_withAMUploadFileCallback_(ImActorModelModulesFileUploadManager_UnbindUpload *self, jlong rid, id<AMUploadFileCallback> callback) {
  (void) NSObject_init(self);
  self->rid_ = rid;
  self->callback_ = callback;
}

ImActorModelModulesFileUploadManager_UnbindUpload *new_ImActorModelModulesFileUploadManager_UnbindUpload_initWithLong_withAMUploadFileCallback_(jlong rid, id<AMUploadFileCallback> callback) {
  ImActorModelModulesFileUploadManager_UnbindUpload *self = [ImActorModelModulesFileUploadManager_UnbindUpload alloc];
  ImActorModelModulesFileUploadManager_UnbindUpload_initWithLong_withAMUploadFileCallback_(self, rid, callback);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UnbindUpload)

@implementation ImActorModelModulesFileUploadManager_StopUpload

- (instancetype)initWithLong:(jlong)rid {
  ImActorModelModulesFileUploadManager_StopUpload_initWithLong_(self, rid);
  return self;
}

- (jlong)getRid {
  return rid_;
}

@end

void ImActorModelModulesFileUploadManager_StopUpload_initWithLong_(ImActorModelModulesFileUploadManager_StopUpload *self, jlong rid) {
  (void) NSObject_init(self);
  self->rid_ = rid;
}

ImActorModelModulesFileUploadManager_StopUpload *new_ImActorModelModulesFileUploadManager_StopUpload_initWithLong_(jlong rid) {
  ImActorModelModulesFileUploadManager_StopUpload *self = [ImActorModelModulesFileUploadManager_StopUpload alloc];
  ImActorModelModulesFileUploadManager_StopUpload_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_StopUpload)

@implementation ImActorModelModulesFileUploadManager_UploadTaskError

- (instancetype)initWithLong:(jlong)rid {
  ImActorModelModulesFileUploadManager_UploadTaskError_initWithLong_(self, rid);
  return self;
}

- (jlong)getRid {
  return rid_;
}

@end

void ImActorModelModulesFileUploadManager_UploadTaskError_initWithLong_(ImActorModelModulesFileUploadManager_UploadTaskError *self, jlong rid) {
  (void) NSObject_init(self);
  self->rid_ = rid;
}

ImActorModelModulesFileUploadManager_UploadTaskError *new_ImActorModelModulesFileUploadManager_UploadTaskError_initWithLong_(jlong rid) {
  ImActorModelModulesFileUploadManager_UploadTaskError *self = [ImActorModelModulesFileUploadManager_UploadTaskError alloc];
  ImActorModelModulesFileUploadManager_UploadTaskError_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UploadTaskError)

@implementation ImActorModelModulesFileUploadManager_UploadTaskProgress

- (instancetype)initWithLong:(jlong)rid
                   withFloat:(jfloat)progress {
  ImActorModelModulesFileUploadManager_UploadTaskProgress_initWithLong_withFloat_(self, rid, progress);
  return self;
}

- (jlong)getRid {
  return rid_;
}

- (jfloat)getProgress {
  return progress_;
}

@end

void ImActorModelModulesFileUploadManager_UploadTaskProgress_initWithLong_withFloat_(ImActorModelModulesFileUploadManager_UploadTaskProgress *self, jlong rid, jfloat progress) {
  (void) NSObject_init(self);
  self->rid_ = rid;
  self->progress_ = progress;
}

ImActorModelModulesFileUploadManager_UploadTaskProgress *new_ImActorModelModulesFileUploadManager_UploadTaskProgress_initWithLong_withFloat_(jlong rid, jfloat progress) {
  ImActorModelModulesFileUploadManager_UploadTaskProgress *self = [ImActorModelModulesFileUploadManager_UploadTaskProgress alloc];
  ImActorModelModulesFileUploadManager_UploadTaskProgress_initWithLong_withFloat_(self, rid, progress);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UploadTaskProgress)

@implementation ImActorModelModulesFileUploadManager_UploadTaskComplete

- (instancetype)initWithLong:(jlong)rid
         withAMFileReference:(AMFileReference *)location
   withAMFileSystemReference:(id<AMFileSystemReference>)reference {
  ImActorModelModulesFileUploadManager_UploadTaskComplete_initWithLong_withAMFileReference_withAMFileSystemReference_(self, rid, location, reference);
  return self;
}

- (jlong)getRid {
  return rid_;
}

- (id<AMFileSystemReference>)getReference {
  return reference_;
}

- (AMFileReference *)getLocation {
  return location_;
}

@end

void ImActorModelModulesFileUploadManager_UploadTaskComplete_initWithLong_withAMFileReference_withAMFileSystemReference_(ImActorModelModulesFileUploadManager_UploadTaskComplete *self, jlong rid, AMFileReference *location, id<AMFileSystemReference> reference) {
  (void) NSObject_init(self);
  self->rid_ = rid;
  self->location_ = location;
  self->reference_ = reference;
}

ImActorModelModulesFileUploadManager_UploadTaskComplete *new_ImActorModelModulesFileUploadManager_UploadTaskComplete_initWithLong_withAMFileReference_withAMFileSystemReference_(jlong rid, AMFileReference *location, id<AMFileSystemReference> reference) {
  ImActorModelModulesFileUploadManager_UploadTaskComplete *self = [ImActorModelModulesFileUploadManager_UploadTaskComplete alloc];
  ImActorModelModulesFileUploadManager_UploadTaskComplete_initWithLong_withAMFileReference_withAMFileSystemReference_(self, rid, location, reference);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UploadTaskComplete)

@implementation ImActorModelModulesFileUploadManager_UploadCompleted

- (instancetype)initWithLong:(jlong)rid
         withAMFileReference:(AMFileReference *)fileReference {
  ImActorModelModulesFileUploadManager_UploadCompleted_initWithLong_withAMFileReference_(self, rid, fileReference);
  return self;
}

- (jlong)getRid {
  return rid_;
}

- (AMFileReference *)getFileReference {
  return fileReference_;
}

@end

void ImActorModelModulesFileUploadManager_UploadCompleted_initWithLong_withAMFileReference_(ImActorModelModulesFileUploadManager_UploadCompleted *self, jlong rid, AMFileReference *fileReference) {
  (void) NSObject_init(self);
  self->rid_ = rid;
  self->fileReference_ = fileReference;
}

ImActorModelModulesFileUploadManager_UploadCompleted *new_ImActorModelModulesFileUploadManager_UploadCompleted_initWithLong_withAMFileReference_(jlong rid, AMFileReference *fileReference) {
  ImActorModelModulesFileUploadManager_UploadCompleted *self = [ImActorModelModulesFileUploadManager_UploadCompleted alloc];
  ImActorModelModulesFileUploadManager_UploadCompleted_initWithLong_withAMFileReference_(self, rid, fileReference);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UploadCompleted)

@implementation ImActorModelModulesFileUploadManager_UploadError

- (instancetype)initWithLong:(jlong)rid {
  ImActorModelModulesFileUploadManager_UploadError_initWithLong_(self, rid);
  return self;
}

- (jlong)getRid {
  return rid_;
}

@end

void ImActorModelModulesFileUploadManager_UploadError_initWithLong_(ImActorModelModulesFileUploadManager_UploadError *self, jlong rid) {
  (void) NSObject_init(self);
  self->rid_ = rid;
}

ImActorModelModulesFileUploadManager_UploadError *new_ImActorModelModulesFileUploadManager_UploadError_initWithLong_(jlong rid) {
  ImActorModelModulesFileUploadManager_UploadError *self = [ImActorModelModulesFileUploadManager_UploadError alloc];
  ImActorModelModulesFileUploadManager_UploadError_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_UploadError)

@implementation ImActorModelModulesFileUploadManager_RequestState

- (instancetype)initWithLong:(jlong)rid
    withAMUploadFileCallback:(id<AMUploadFileCallback>)callback {
  ImActorModelModulesFileUploadManager_RequestState_initWithLong_withAMUploadFileCallback_(self, rid, callback);
  return self;
}

- (jlong)getRid {
  return rid_;
}

- (id<AMUploadFileCallback>)getCallback {
  return callback_;
}

@end

void ImActorModelModulesFileUploadManager_RequestState_initWithLong_withAMUploadFileCallback_(ImActorModelModulesFileUploadManager_RequestState *self, jlong rid, id<AMUploadFileCallback> callback) {
  (void) NSObject_init(self);
  self->rid_ = rid;
  self->callback_ = callback;
}

ImActorModelModulesFileUploadManager_RequestState *new_ImActorModelModulesFileUploadManager_RequestState_initWithLong_withAMUploadFileCallback_(jlong rid, id<AMUploadFileCallback> callback) {
  ImActorModelModulesFileUploadManager_RequestState *self = [ImActorModelModulesFileUploadManager_RequestState alloc];
  ImActorModelModulesFileUploadManager_RequestState_initWithLong_withAMUploadFileCallback_(self, rid, callback);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_RequestState)

@implementation ImActorModelModulesFileUploadManager_PauseUpload

- (instancetype)initWithLong:(jlong)rid {
  ImActorModelModulesFileUploadManager_PauseUpload_initWithLong_(self, rid);
  return self;
}

- (jlong)getRid {
  return rid_;
}

@end

void ImActorModelModulesFileUploadManager_PauseUpload_initWithLong_(ImActorModelModulesFileUploadManager_PauseUpload *self, jlong rid) {
  (void) NSObject_init(self);
  self->rid_ = rid;
}

ImActorModelModulesFileUploadManager_PauseUpload *new_ImActorModelModulesFileUploadManager_PauseUpload_initWithLong_(jlong rid) {
  ImActorModelModulesFileUploadManager_PauseUpload *self = [ImActorModelModulesFileUploadManager_PauseUpload alloc];
  ImActorModelModulesFileUploadManager_PauseUpload_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_PauseUpload)

@implementation ImActorModelModulesFileUploadManager_ResumeUpload

- (instancetype)initWithLong:(jlong)rid {
  ImActorModelModulesFileUploadManager_ResumeUpload_initWithLong_(self, rid);
  return self;
}

- (jlong)getRid {
  return rid_;
}

@end

void ImActorModelModulesFileUploadManager_ResumeUpload_initWithLong_(ImActorModelModulesFileUploadManager_ResumeUpload *self, jlong rid) {
  (void) NSObject_init(self);
  self->rid_ = rid;
}

ImActorModelModulesFileUploadManager_ResumeUpload *new_ImActorModelModulesFileUploadManager_ResumeUpload_initWithLong_(jlong rid) {
  ImActorModelModulesFileUploadManager_ResumeUpload *self = [ImActorModelModulesFileUploadManager_ResumeUpload alloc];
  ImActorModelModulesFileUploadManager_ResumeUpload_initWithLong_(self, rid);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_ResumeUpload)

@implementation ImActorModelModulesFileUploadManager_$1

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0 {
  ImActorModelModulesFileUploadManager_$1_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$1_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$1 *self, id<AMUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$1 *new_ImActorModelModulesFileUploadManager_$1_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) {
  ImActorModelModulesFileUploadManager_$1 *self = [ImActorModelModulesFileUploadManager_$1 alloc];
  ImActorModelModulesFileUploadManager_$1_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$1)

@implementation ImActorModelModulesFileUploadManager_$2

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0 {
  ImActorModelModulesFileUploadManager_$2_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$2_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$2 *self, id<AMUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$2 *new_ImActorModelModulesFileUploadManager_$2_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) {
  ImActorModelModulesFileUploadManager_$2 *self = [ImActorModelModulesFileUploadManager_$2 alloc];
  ImActorModelModulesFileUploadManager_$2_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$2)

@implementation ImActorModelModulesFileUploadManager_$3

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0 {
  ImActorModelModulesFileUploadManager_$3_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$3_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$3 *self, id<AMUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$3 *new_ImActorModelModulesFileUploadManager_$3_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) {
  ImActorModelModulesFileUploadManager_$3 *self = [ImActorModelModulesFileUploadManager_$3 alloc];
  ImActorModelModulesFileUploadManager_$3_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$3)

@implementation ImActorModelModulesFileUploadManager_$4

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$callback_)) onUploading:val$progress_];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1 {
  ImActorModelModulesFileUploadManager_$4_initWithAMUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$4_initWithAMUploadFileCallback_withFloat_(ImActorModelModulesFileUploadManager_$4 *self, id<AMUploadFileCallback> capture$0, jfloat capture$1) {
  self->val$callback_ = capture$0;
  self->val$progress_ = capture$1;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$4 *new_ImActorModelModulesFileUploadManager_$4_initWithAMUploadFileCallback_withFloat_(id<AMUploadFileCallback> capture$0, jfloat capture$1) {
  ImActorModelModulesFileUploadManager_$4 *self = [ImActorModelModulesFileUploadManager_$4 alloc];
  ImActorModelModulesFileUploadManager_$4_initWithAMUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$4)

@implementation ImActorModelModulesFileUploadManager_$5

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0 {
  ImActorModelModulesFileUploadManager_$5_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$5_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$5 *self, id<AMUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$5 *new_ImActorModelModulesFileUploadManager_$5_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) {
  ImActorModelModulesFileUploadManager_$5 *self = [ImActorModelModulesFileUploadManager_$5 alloc];
  ImActorModelModulesFileUploadManager_$5_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$5)

@implementation ImActorModelModulesFileUploadManager_$6

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0 {
  ImActorModelModulesFileUploadManager_$6_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$6_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$6 *self, id<AMUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$6 *new_ImActorModelModulesFileUploadManager_$6_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) {
  ImActorModelModulesFileUploadManager_$6 *self = [ImActorModelModulesFileUploadManager_$6 alloc];
  ImActorModelModulesFileUploadManager_$6_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$6)

@implementation ImActorModelModulesFileUploadManager_$7

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$callback_)) onUploading:val$progress_];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1 {
  ImActorModelModulesFileUploadManager_$7_initWithAMUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$7_initWithAMUploadFileCallback_withFloat_(ImActorModelModulesFileUploadManager_$7 *self, id<AMUploadFileCallback> capture$0, jfloat capture$1) {
  self->val$callback_ = capture$0;
  self->val$progress_ = capture$1;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$7 *new_ImActorModelModulesFileUploadManager_$7_initWithAMUploadFileCallback_withFloat_(id<AMUploadFileCallback> capture$0, jfloat capture$1) {
  ImActorModelModulesFileUploadManager_$7 *self = [ImActorModelModulesFileUploadManager_$7 alloc];
  ImActorModelModulesFileUploadManager_$7_initWithAMUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$7)

@implementation ImActorModelModulesFileUploadManager_$8

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$callback_)) onUploading:0];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0 {
  ImActorModelModulesFileUploadManager_$8_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$8_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$8 *self, id<AMUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$8 *new_ImActorModelModulesFileUploadManager_$8_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) {
  ImActorModelModulesFileUploadManager_$8 *self = [ImActorModelModulesFileUploadManager_$8 alloc];
  ImActorModelModulesFileUploadManager_$8_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$8)

@implementation ImActorModelModulesFileUploadManager_$9

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0 {
  ImActorModelModulesFileUploadManager_$9_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$9_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$9 *self, id<AMUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$9 *new_ImActorModelModulesFileUploadManager_$9_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) {
  ImActorModelModulesFileUploadManager_$9 *self = [ImActorModelModulesFileUploadManager_$9 alloc];
  ImActorModelModulesFileUploadManager_$9_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$9)

@implementation ImActorModelModulesFileUploadManager_$10

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$callback_)) onNotUploading];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0 {
  ImActorModelModulesFileUploadManager_$10_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$10_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$10 *self, id<AMUploadFileCallback> capture$0) {
  self->val$callback_ = capture$0;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$10 *new_ImActorModelModulesFileUploadManager_$10_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) {
  ImActorModelModulesFileUploadManager_$10 *self = [ImActorModelModulesFileUploadManager_$10 alloc];
  ImActorModelModulesFileUploadManager_$10_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$10)

@implementation ImActorModelModulesFileUploadManager_$11

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$fileCallback_)) onUploading:val$progress_];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0
                                   withFloat:(jfloat)capture$1 {
  ImActorModelModulesFileUploadManager_$11_initWithAMUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$11_initWithAMUploadFileCallback_withFloat_(ImActorModelModulesFileUploadManager_$11 *self, id<AMUploadFileCallback> capture$0, jfloat capture$1) {
  self->val$fileCallback_ = capture$0;
  self->val$progress_ = capture$1;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$11 *new_ImActorModelModulesFileUploadManager_$11_initWithAMUploadFileCallback_withFloat_(id<AMUploadFileCallback> capture$0, jfloat capture$1) {
  ImActorModelModulesFileUploadManager_$11 *self = [ImActorModelModulesFileUploadManager_$11 alloc];
  ImActorModelModulesFileUploadManager_$11_initWithAMUploadFileCallback_withFloat_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$11)

@implementation ImActorModelModulesFileUploadManager_$12

- (void)run {
  [((id<AMUploadFileCallback>) nil_chk(val$fileCallback_)) onUploaded];
}

- (instancetype)initWithAMUploadFileCallback:(id<AMUploadFileCallback>)capture$0 {
  ImActorModelModulesFileUploadManager_$12_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$12_initWithAMUploadFileCallback_(ImActorModelModulesFileUploadManager_$12 *self, id<AMUploadFileCallback> capture$0) {
  self->val$fileCallback_ = capture$0;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$12 *new_ImActorModelModulesFileUploadManager_$12_initWithAMUploadFileCallback_(id<AMUploadFileCallback> capture$0) {
  ImActorModelModulesFileUploadManager_$12 *self = [ImActorModelModulesFileUploadManager_$12 alloc];
  ImActorModelModulesFileUploadManager_$12_initWithAMUploadFileCallback_(self, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$12)

@implementation ImActorModelModulesFileUploadManager_$13

- (ImActorModelModulesFileUploadTask *)create {
  return new_ImActorModelModulesFileUploadTask_initWithLong_withNSString_withNSString_withDKActorRef_withImActorModelModulesModules_(((ImActorModelModulesFileUploadManager_QueueItem *) nil_chk(val$finalPendingQueue_))->rid_, val$finalPendingQueue_->fileDescriptor_, val$finalPendingQueue_->fileName_, [this$0_ self__], [this$0_ modules]);
}

- (instancetype)initWithImActorModelModulesFileUploadManager:(ImActorModelModulesFileUploadManager *)outer$
          withImActorModelModulesFileUploadManager_QueueItem:(ImActorModelModulesFileUploadManager_QueueItem *)capture$0 {
  ImActorModelModulesFileUploadManager_$13_initWithImActorModelModulesFileUploadManager_withImActorModelModulesFileUploadManager_QueueItem_(self, outer$, capture$0);
  return self;
}

@end

void ImActorModelModulesFileUploadManager_$13_initWithImActorModelModulesFileUploadManager_withImActorModelModulesFileUploadManager_QueueItem_(ImActorModelModulesFileUploadManager_$13 *self, ImActorModelModulesFileUploadManager *outer$, ImActorModelModulesFileUploadManager_QueueItem *capture$0) {
  self->this$0_ = outer$;
  self->val$finalPendingQueue_ = capture$0;
  (void) NSObject_init(self);
}

ImActorModelModulesFileUploadManager_$13 *new_ImActorModelModulesFileUploadManager_$13_initWithImActorModelModulesFileUploadManager_withImActorModelModulesFileUploadManager_QueueItem_(ImActorModelModulesFileUploadManager *outer$, ImActorModelModulesFileUploadManager_QueueItem *capture$0) {
  ImActorModelModulesFileUploadManager_$13 *self = [ImActorModelModulesFileUploadManager_$13 alloc];
  ImActorModelModulesFileUploadManager_$13_initWithImActorModelModulesFileUploadManager_withImActorModelModulesFileUploadManager_QueueItem_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelModulesFileUploadManager_$13)
