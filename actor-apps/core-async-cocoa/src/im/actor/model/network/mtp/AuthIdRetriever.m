//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-apps/core/src/main/java/im/actor/model/network/mtp/AuthIdRetriever.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/NetworkProvider.h"
#include "im/actor/model/droidkit/bser/DataInput.h"
#include "im/actor/model/droidkit/bser/DataOutput.h"
#include "im/actor/model/log/Log.h"
#include "im/actor/model/network/ActorApi.h"
#include "im/actor/model/network/Connection.h"
#include "im/actor/model/network/ConnectionCallback.h"
#include "im/actor/model/network/ConnectionEndpoint.h"
#include "im/actor/model/network/CreateConnectionCallback.h"
#include "im/actor/model/network/Endpoints.h"
#include "im/actor/model/network/mtp/AuthIdRetriever.h"
#include "im/actor/model/util/ExponentialBackoff.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"

static NSString *MTAuthIdRetriever_TAG_ = @"AuthId";
J2OBJC_STATIC_FIELD_GETTER(MTAuthIdRetriever, TAG_, NSString *)

@interface MTAuthIdRetriever_$1 : NSObject < AMConnectionCallback > {
 @public
  IOSBooleanArray *val$isFinished_;
  id<MTAuthIdRetriever_AuthIdCallback> val$callback_;
}

- (void)onConnectionRedirectWithHost:(NSString *)host
                            withPort:(jint)port
                         withTimeout:(jint)timeout;

- (void)onMessageWithData:(IOSByteArray *)data
               withOffset:(jint)offset
               withLength:(jint)len;

- (void)onConnectionDie;

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0
withMTAuthIdRetriever_AuthIdCallback:(id<MTAuthIdRetriever_AuthIdCallback>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(MTAuthIdRetriever_$1)

J2OBJC_FIELD_SETTER(MTAuthIdRetriever_$1, val$isFinished_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(MTAuthIdRetriever_$1, val$callback_, id<MTAuthIdRetriever_AuthIdCallback>)

__attribute__((unused)) static void MTAuthIdRetriever_$1_initWithBooleanArray_withMTAuthIdRetriever_AuthIdCallback_(MTAuthIdRetriever_$1 *self, IOSBooleanArray *capture$0, id<MTAuthIdRetriever_AuthIdCallback> capture$1);

__attribute__((unused)) static MTAuthIdRetriever_$1 *new_MTAuthIdRetriever_$1_initWithBooleanArray_withMTAuthIdRetriever_AuthIdCallback_(IOSBooleanArray *capture$0, id<MTAuthIdRetriever_AuthIdCallback> capture$1) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(MTAuthIdRetriever_$1)

@interface MTAuthIdRetriever_$2 : NSObject < AMCreateConnectionCallback > {
 @public
  IOSBooleanArray *val$isFinished_;
  AMExponentialBackoff *val$backoff_;
  id<MTAuthIdRetriever_AuthIdCallback> val$callback_;
}

- (void)onConnectionCreatedWithConnection:(id<AMConnection>)connection;

- (void)onConnectionCreateError;

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0
            withAMExponentialBackoff:(AMExponentialBackoff *)capture$1
withMTAuthIdRetriever_AuthIdCallback:(id<MTAuthIdRetriever_AuthIdCallback>)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(MTAuthIdRetriever_$2)

J2OBJC_FIELD_SETTER(MTAuthIdRetriever_$2, val$isFinished_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(MTAuthIdRetriever_$2, val$backoff_, AMExponentialBackoff *)
J2OBJC_FIELD_SETTER(MTAuthIdRetriever_$2, val$callback_, id<MTAuthIdRetriever_AuthIdCallback>)

__attribute__((unused)) static void MTAuthIdRetriever_$2_initWithBooleanArray_withAMExponentialBackoff_withMTAuthIdRetriever_AuthIdCallback_(MTAuthIdRetriever_$2 *self, IOSBooleanArray *capture$0, AMExponentialBackoff *capture$1, id<MTAuthIdRetriever_AuthIdCallback> capture$2);

__attribute__((unused)) static MTAuthIdRetriever_$2 *new_MTAuthIdRetriever_$2_initWithBooleanArray_withAMExponentialBackoff_withMTAuthIdRetriever_AuthIdCallback_(IOSBooleanArray *capture$0, AMExponentialBackoff *capture$1, id<MTAuthIdRetriever_AuthIdCallback> capture$2) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(MTAuthIdRetriever_$2)

@implementation MTAuthIdRetriever

+ (void)requestAuthIdWithAMEndpoints:(AMEndpoints *)endpoints
               withAMNetworkProvider:(id<AMNetworkProvider>)networkProvider
                             withInt:(jint)minDelay
                             withInt:(jint)maxDelay
                             withInt:(jint)maxFailureCount
withMTAuthIdRetriever_AuthIdCallback:(id<MTAuthIdRetriever_AuthIdCallback>)callback {
  MTAuthIdRetriever_requestAuthIdWithAMEndpoints_withAMNetworkProvider_withInt_withInt_withInt_withMTAuthIdRetriever_AuthIdCallback_(endpoints, networkProvider, minDelay, maxDelay, maxFailureCount, callback);
}

- (instancetype)init {
  MTAuthIdRetriever_init(self);
  return self;
}

@end

void MTAuthIdRetriever_requestAuthIdWithAMEndpoints_withAMNetworkProvider_withInt_withInt_withInt_withMTAuthIdRetriever_AuthIdCallback_(AMEndpoints *endpoints, id<AMNetworkProvider> networkProvider, jint minDelay, jint maxDelay, jint maxFailureCount, id<MTAuthIdRetriever_AuthIdCallback> callback) {
  MTAuthIdRetriever_initialize();
  AMLog_dWithNSString_withNSString_(MTAuthIdRetriever_TAG_, @"Requesting AuthId");
  IOSBooleanArray *isFinished = [IOSBooleanArray newArrayWithLength:1];
  AMExponentialBackoff *backoff = new_AMExponentialBackoff_initWithInt_withInt_withInt_(maxDelay, minDelay, maxFailureCount);
  *IOSBooleanArray_GetRef(isFinished, 0) = NO;
  [((id<AMNetworkProvider>) nil_chk(networkProvider)) createConnectionWithId:0 withMTVersion:AMActorApi_MTPROTO_VERSION withApiMajor:AMActorApi_API_MAJOR_VERSION withApiMinor:AMActorApi_API_MINOR_VERSION withEndpoint:[((AMEndpoints *) nil_chk(endpoints)) fetchEndpoint] withCallback:new_MTAuthIdRetriever_$1_initWithBooleanArray_withMTAuthIdRetriever_AuthIdCallback_(isFinished, callback) withCreateCallback:new_MTAuthIdRetriever_$2_initWithBooleanArray_withAMExponentialBackoff_withMTAuthIdRetriever_AuthIdCallback_(isFinished, backoff, callback)];
}

void MTAuthIdRetriever_init(MTAuthIdRetriever *self) {
  (void) NSObject_init(self);
}

MTAuthIdRetriever *new_MTAuthIdRetriever_init() {
  MTAuthIdRetriever *self = [MTAuthIdRetriever alloc];
  MTAuthIdRetriever_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MTAuthIdRetriever)

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(MTAuthIdRetriever_AuthIdCallback)

@implementation MTAuthIdRetriever_$1

- (void)onConnectionRedirectWithHost:(NSString *)host
                            withPort:(jint)port
                         withTimeout:(jint)timeout {
  if (!IOSBooleanArray_Get(nil_chk(val$isFinished_), 0)) {
    *IOSBooleanArray_GetRef(val$isFinished_, 0) = YES;
    [((id<MTAuthIdRetriever_AuthIdCallback>) nil_chk(val$callback_)) onFailure];
    AMLog_dWithNSString_withNSString_(MTAuthIdRetriever_get_TAG_(), @"Unable to create connection");
  }
}

- (void)onMessageWithData:(IOSByteArray *)data
               withOffset:(jint)offset
               withLength:(jint)len {
  if (IOSBooleanArray_Get(nil_chk(val$isFinished_), 0)) {
    return;
  }
  @try {
    BSDataInput *dataInput = new_BSDataInput_initWithByteArray_withInt_withInt_(data, offset, len);
    jlong pAuthId = [dataInput readLong];
    jlong pSessionId = [dataInput readLong];
    jlong messageId = [dataInput readLong];
    IOSByteArray *payload = [dataInput readProtoBytes];
    BSDataInput *msg = new_BSDataInput_initWithByteArray_withInt_withInt_(payload, 0, ((IOSByteArray *) nil_chk(payload))->size_);
    jint header = [msg readByte];
    jlong authId = [msg readLong];
    if (!IOSBooleanArray_Get(val$isFinished_, 0)) {
      *IOSBooleanArray_GetRef(val$isFinished_, 0) = YES;
      [((id<MTAuthIdRetriever_AuthIdCallback>) nil_chk(val$callback_)) onSuccessWithLong:authId];
      AMLog_dWithNSString_withNSString_(MTAuthIdRetriever_get_TAG_(), JreStrcat("$J", @"Auth Id loaded: ", authId));
      return;
    }
  }
  @catch (JavaLangException *e) {
    AMLog_dWithNSString_withNSString_(MTAuthIdRetriever_get_TAG_(), @"Error during parsing auth id response");
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @throw new_JavaLangRuntimeException_init();
}

- (void)onConnectionDie {
  if (!IOSBooleanArray_Get(nil_chk(val$isFinished_), 0)) {
    *IOSBooleanArray_GetRef(val$isFinished_, 0) = YES;
    [((id<MTAuthIdRetriever_AuthIdCallback>) nil_chk(val$callback_)) onFailure];
    AMLog_dWithNSString_withNSString_(MTAuthIdRetriever_get_TAG_(), @"Connection dies");
  }
}

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0
withMTAuthIdRetriever_AuthIdCallback:(id<MTAuthIdRetriever_AuthIdCallback>)capture$1 {
  MTAuthIdRetriever_$1_initWithBooleanArray_withMTAuthIdRetriever_AuthIdCallback_(self, capture$0, capture$1);
  return self;
}

@end

void MTAuthIdRetriever_$1_initWithBooleanArray_withMTAuthIdRetriever_AuthIdCallback_(MTAuthIdRetriever_$1 *self, IOSBooleanArray *capture$0, id<MTAuthIdRetriever_AuthIdCallback> capture$1) {
  self->val$isFinished_ = capture$0;
  self->val$callback_ = capture$1;
  (void) NSObject_init(self);
}

MTAuthIdRetriever_$1 *new_MTAuthIdRetriever_$1_initWithBooleanArray_withMTAuthIdRetriever_AuthIdCallback_(IOSBooleanArray *capture$0, id<MTAuthIdRetriever_AuthIdCallback> capture$1) {
  MTAuthIdRetriever_$1 *self = [MTAuthIdRetriever_$1 alloc];
  MTAuthIdRetriever_$1_initWithBooleanArray_withMTAuthIdRetriever_AuthIdCallback_(self, capture$0, capture$1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MTAuthIdRetriever_$1)

@implementation MTAuthIdRetriever_$2

- (void)onConnectionCreatedWithConnection:(id<AMConnection>)connection {
  if (IOSBooleanArray_Get(nil_chk(val$isFinished_), 0)) {
    return;
  }
  AMLog_dWithNSString_withNSString_(MTAuthIdRetriever_get_TAG_(), @"Connection created");
  [((AMExponentialBackoff *) nil_chk(val$backoff_)) onSuccess];
  @try {
    BSDataOutput *output = new_BSDataOutput_init();
    [output writeLongWithLong:0];
    [output writeLongWithLong:0];
    [output writeLongWithLong:0];
    [output writeVarIntWithLong:1];
    [output writeByteWithInt:(jint) 0xF0];
    IOSByteArray *data = [output toByteArray];
    [((id<AMConnection>) nil_chk(connection)) postWithData:data withOffset:0 withLength:((IOSByteArray *) nil_chk(data))->size_];
  }
  @catch (JavaLangException *e) {
    AMLog_dWithNSString_withNSString_(MTAuthIdRetriever_get_TAG_(), @"Error during requesting auth id");
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    if (!IOSBooleanArray_Get(val$isFinished_, 0)) {
      *IOSBooleanArray_GetRef(val$isFinished_, 0) = YES;
      [((id<MTAuthIdRetriever_AuthIdCallback>) nil_chk(val$callback_)) onFailure];
    }
  }
}

- (void)onConnectionCreateError {
  if (!IOSBooleanArray_Get(nil_chk(val$isFinished_), 0)) {
    *IOSBooleanArray_GetRef(val$isFinished_, 0) = YES;
    [((id<MTAuthIdRetriever_AuthIdCallback>) nil_chk(val$callback_)) onFailure];
    AMLog_dWithNSString_withNSString_(MTAuthIdRetriever_get_TAG_(), @"Unable to create connection");
  }
}

- (instancetype)initWithBooleanArray:(IOSBooleanArray *)capture$0
            withAMExponentialBackoff:(AMExponentialBackoff *)capture$1
withMTAuthIdRetriever_AuthIdCallback:(id<MTAuthIdRetriever_AuthIdCallback>)capture$2 {
  MTAuthIdRetriever_$2_initWithBooleanArray_withAMExponentialBackoff_withMTAuthIdRetriever_AuthIdCallback_(self, capture$0, capture$1, capture$2);
  return self;
}

@end

void MTAuthIdRetriever_$2_initWithBooleanArray_withAMExponentialBackoff_withMTAuthIdRetriever_AuthIdCallback_(MTAuthIdRetriever_$2 *self, IOSBooleanArray *capture$0, AMExponentialBackoff *capture$1, id<MTAuthIdRetriever_AuthIdCallback> capture$2) {
  self->val$isFinished_ = capture$0;
  self->val$backoff_ = capture$1;
  self->val$callback_ = capture$2;
  (void) NSObject_init(self);
}

MTAuthIdRetriever_$2 *new_MTAuthIdRetriever_$2_initWithBooleanArray_withAMExponentialBackoff_withMTAuthIdRetriever_AuthIdCallback_(IOSBooleanArray *capture$0, AMExponentialBackoff *capture$1, id<MTAuthIdRetriever_AuthIdCallback> capture$2) {
  MTAuthIdRetriever_$2 *self = [MTAuthIdRetriever_$2 alloc];
  MTAuthIdRetriever_$2_initWithBooleanArray_withAMExponentialBackoff_withMTAuthIdRetriever_AuthIdCallback_(self, capture$0, capture$1, capture$2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MTAuthIdRetriever_$2)
