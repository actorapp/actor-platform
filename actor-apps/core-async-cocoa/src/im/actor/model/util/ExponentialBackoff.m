//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-platform/actor-apps/core/src/main/java/im/actor/model/util/ExponentialBackoff.java
//


#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/actors/Environment.h"
#include "im/actor/model/util/AtomicIntegerCompat.h"
#include "im/actor/model/util/ExponentialBackoff.h"
#include "java/util/Random.h"

#define AMExponentialBackoff_MIN_DELAY 100
#define AMExponentialBackoff_MAX_DELAY 15000
#define AMExponentialBackoff_MAX_FAILURE_COUNT 50

@interface AMExponentialBackoff () {
 @public
  AMAtomicIntegerCompat *currentFailureCount_;
  JavaUtilRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(AMExponentialBackoff, currentFailureCount_, AMAtomicIntegerCompat *)
J2OBJC_FIELD_SETTER(AMExponentialBackoff, random_, JavaUtilRandom *)

J2OBJC_STATIC_FIELD_GETTER(AMExponentialBackoff, MIN_DELAY, jint)

J2OBJC_STATIC_FIELD_GETTER(AMExponentialBackoff, MAX_DELAY, jint)

J2OBJC_STATIC_FIELD_GETTER(AMExponentialBackoff, MAX_FAILURE_COUNT, jint)

@implementation AMExponentialBackoff

- (jlong)exponentialWait {
  jlong maxDelay = AMExponentialBackoff_MIN_DELAY + ((AMExponentialBackoff_MAX_DELAY - AMExponentialBackoff_MIN_DELAY) / AMExponentialBackoff_MAX_FAILURE_COUNT) * [((AMAtomicIntegerCompat *) nil_chk(currentFailureCount_)) get];
  @synchronized(random_) {
    return J2ObjCFpToLong(([((JavaUtilRandom *) nil_chk(random_)) nextFloat] * maxDelay));
  }
}

- (void)onFailure {
  jint val = [((AMAtomicIntegerCompat *) nil_chk(currentFailureCount_)) incrementAndGet];
  if (val > 50) {
    [currentFailureCount_ compareAndSetWithInt:val withInt:AMExponentialBackoff_MAX_FAILURE_COUNT];
  }
}

- (void)onSuccess {
  [self reset];
}

- (void)reset {
  [((AMAtomicIntegerCompat *) nil_chk(currentFailureCount_)) setWithInt:0];
}

- (instancetype)init {
  AMExponentialBackoff_init(self);
  return self;
}

@end

void AMExponentialBackoff_init(AMExponentialBackoff *self) {
  (void) NSObject_init(self);
  self->currentFailureCount_ = DKEnvironment_createAtomicIntWithInt_(1);
  self->random_ = new_JavaUtilRandom_init();
}

AMExponentialBackoff *new_AMExponentialBackoff_init() {
  AMExponentialBackoff *self = [AMExponentialBackoff alloc];
  AMExponentialBackoff_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMExponentialBackoff)
