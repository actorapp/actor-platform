//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-apps/core/src/main/java/im/actor/model/droidkit/json/JSONTokener.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/bser/DataInput.h"
#include "im/actor/model/droidkit/json/JSONArray.h"
#include "im/actor/model/droidkit/json/JSONException.h"
#include "im/actor/model/droidkit/json/JSONObject.h"
#include "im/actor/model/droidkit/json/JSONTokener.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"

@interface ImActorModelDroidkitJsonJSONTokener () {
 @public
  jlong character_;
  jboolean eof_;
  jlong index_;
  jlong line_;
  jchar previous_;
  BSDataInput *reader_;
  jboolean usePrevious_;
}

@end

J2OBJC_FIELD_SETTER(ImActorModelDroidkitJsonJSONTokener, reader_, BSDataInput *)

static NSString *ImActorModelDroidkitJsonJSONTokener_END_VALUES_ = @",:]}/\\\"[{;=#";
J2OBJC_STATIC_FIELD_GETTER(ImActorModelDroidkitJsonJSONTokener, END_VALUES_, NSString *)

@implementation ImActorModelDroidkitJsonJSONTokener

- (instancetype)initWithBSDataInput:(BSDataInput *)reader {
  ImActorModelDroidkitJsonJSONTokener_initWithBSDataInput_(self, reader);
  return self;
}

- (instancetype)initWithNSString:(NSString *)s {
  ImActorModelDroidkitJsonJSONTokener_initWithNSString_(self, s);
  return self;
}

- (void)back {
  if (self->usePrevious_ || self->index_ <= 0) {
    @throw new_ImActorModelDroidkitJsonJSONException_initWithNSString_(@"Stepping back two steps is not supported");
  }
  self->index_ -= 1;
  self->character_ -= 1;
  self->usePrevious_ = YES;
  self->eof_ = NO;
}

+ (jint)dehexcharWithChar:(jchar)c {
  return ImActorModelDroidkitJsonJSONTokener_dehexcharWithChar_(c);
}

- (jboolean)end {
  return self->eof_ && !self->usePrevious_;
}

- (jboolean)more {
  [self next];
  if ([self end]) {
    return NO;
  }
  [self back];
  return YES;
}

- (jchar)next {
  jint c;
  if (self->usePrevious_) {
    self->usePrevious_ = NO;
    c = self->previous_;
  }
  else {
    @try {
      c = [((BSDataInput *) nil_chk(self->reader_)) readByte];
    }
    @catch (JavaIoIOException *exception) {
      @throw new_ImActorModelDroidkitJsonJSONException_initWithJavaLangThrowable_(exception);
    }
    if (c <= 0) {
      self->eof_ = YES;
      c = 0;
    }
  }
  self->index_ += 1;
  if (self->previous_ == 0x000d) {
    self->line_ += 1;
    self->character_ = c == 0x000a ? 0 : 1;
  }
  else if (c == 0x000a) {
    self->line_ += 1;
    self->character_ = 0;
  }
  else {
    self->character_ += 1;
  }
  self->previous_ = (jchar) c;
  return self->previous_;
}

- (jchar)nextWithChar:(jchar)c {
  jchar n = [self next];
  if (n != c) {
    @throw [self syntaxErrorWithNSString:JreStrcat("$C$CC", @"Expected '", c, @"' and instead saw '", n, '\'')];
  }
  return n;
}

- (NSString *)nextWithInt:(jint)n {
  if (n == 0) {
    return @"";
  }
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:n];
  jint pos = 0;
  while (pos < n) {
    *IOSCharArray_GetRef(chars, pos) = [self next];
    if ([self end]) {
      @throw [self syntaxErrorWithNSString:@"Substring bounds error"];
    }
    pos += 1;
  }
  return [NSString stringWithCharacters:chars];
}

- (jchar)nextClean {
  for (; ; ) {
    jchar c = [self next];
    if (c == 0 || c > ' ') {
      return c;
    }
  }
}

- (NSString *)nextStringWithChar:(jchar)quote {
  jchar c;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (; ; ) {
    c = [self next];
    switch (c) {
      case 0:
      case 0x000a:
      case 0x000d:
      @throw [self syntaxErrorWithNSString:@"Unterminated string"];
      case '\\':
      c = [self next];
      switch (c) {
        case 'b':
        (void) [sb appendWithChar:0x0008];
        break;
        case 't':
        (void) [sb appendWithChar:0x0009];
        break;
        case 'n':
        (void) [sb appendWithChar:0x000a];
        break;
        case 'f':
        (void) [sb appendWithChar:0x000c];
        break;
        case 'r':
        (void) [sb appendWithChar:0x000d];
        break;
        case 'u':
        (void) [sb appendWithChar:(jchar) JavaLangInteger_parseIntWithNSString_withInt_([self nextWithInt:4], 16)];
        break;
        case '"':
        case '\'':
        case '\\':
        case '/':
        (void) [sb appendWithChar:c];
        break;
        default:
        @throw [self syntaxErrorWithNSString:@"Illegal escape."];
      }
      break;
      default:
      if (c == quote) {
        return [sb description];
      }
      (void) [sb appendWithChar:c];
    }
  }
}

- (NSString *)nextToWithChar:(jchar)delimiter {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (; ; ) {
    jchar c = [self next];
    if (c == delimiter || c == 0 || c == 0x000a || c == 0x000d) {
      if (c != 0) {
        [self back];
      }
      return [((NSString *) nil_chk([sb description])) trim];
    }
    (void) [sb appendWithChar:c];
  }
}

- (NSString *)nextToWithNSString:(NSString *)delimiters {
  jchar c;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (; ; ) {
    c = [self next];
    if ([((NSString *) nil_chk(delimiters)) contains:JreStrcat("C", c)] || c == 0 || c == 0x000a || c == 0x000d) {
      if (c != 0) {
        [self back];
      }
      return [((NSString *) nil_chk([sb description])) trim];
    }
    (void) [sb appendWithChar:c];
  }
}

- (id)nextValue {
  jchar c = [self nextClean];
  NSString *string;
  switch (c) {
    case '"':
    case '\'':
    return [self nextStringWithChar:c];
    case '{':
    [self back];
    return new_ImActorModelDroidkitJsonJSONObject_initWithImActorModelDroidkitJsonJSONTokener_(self);
    case '[':
    [self back];
    return new_ImActorModelDroidkitJsonJSONArray_initWithImActorModelDroidkitJsonJSONTokener_(self);
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  while (c >= ' ' && ![((NSString *) nil_chk(ImActorModelDroidkitJsonJSONTokener_END_VALUES_)) contains:JreStrcat("C", c)]) {
    (void) [sb appendWithChar:c];
    c = [self next];
  }
  [self back];
  string = [((NSString *) nil_chk([sb description])) trim];
  if ([@"" isEqual:string]) {
    @throw [self syntaxErrorWithNSString:@"Missing value"];
  }
  return ImActorModelDroidkitJsonJSONObject_stringToValueWithNSString_(string);
}

- (ImActorModelDroidkitJsonJSONException *)syntaxErrorWithNSString:(NSString *)message {
  return new_ImActorModelDroidkitJsonJSONException_initWithNSString_(JreStrcat("$$", message, [self description]));
}

- (NSString *)description {
  return JreStrcat("$J$J$JC", @" at ", self->index_, @" [character ", self->character_, @" line ", self->line_, ']');
}

@end

void ImActorModelDroidkitJsonJSONTokener_initWithBSDataInput_(ImActorModelDroidkitJsonJSONTokener *self, BSDataInput *reader) {
  (void) NSObject_init(self);
  self->reader_ = reader;
  self->eof_ = NO;
  self->usePrevious_ = NO;
  self->previous_ = 0;
  self->index_ = 0;
  self->character_ = 1;
  self->line_ = 1;
}

ImActorModelDroidkitJsonJSONTokener *new_ImActorModelDroidkitJsonJSONTokener_initWithBSDataInput_(BSDataInput *reader) {
  ImActorModelDroidkitJsonJSONTokener *self = [ImActorModelDroidkitJsonJSONTokener alloc];
  ImActorModelDroidkitJsonJSONTokener_initWithBSDataInput_(self, reader);
  return self;
}

void ImActorModelDroidkitJsonJSONTokener_initWithNSString_(ImActorModelDroidkitJsonJSONTokener *self, NSString *s) {
  (void) ImActorModelDroidkitJsonJSONTokener_initWithBSDataInput_(self, new_BSDataInput_initWithByteArray_([((NSString *) nil_chk(s)) getBytes]));
}

ImActorModelDroidkitJsonJSONTokener *new_ImActorModelDroidkitJsonJSONTokener_initWithNSString_(NSString *s) {
  ImActorModelDroidkitJsonJSONTokener *self = [ImActorModelDroidkitJsonJSONTokener alloc];
  ImActorModelDroidkitJsonJSONTokener_initWithNSString_(self, s);
  return self;
}

jint ImActorModelDroidkitJsonJSONTokener_dehexcharWithChar_(jchar c) {
  ImActorModelDroidkitJsonJSONTokener_initialize();
  if (c >= '0' && c <= '9') {
    return c - '0';
  }
  if (c >= 'A' && c <= 'F') {
    return c - ('A' - 10);
  }
  if (c >= 'a' && c <= 'f') {
    return c - ('a' - 10);
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ImActorModelDroidkitJsonJSONTokener)
