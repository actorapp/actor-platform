//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-apps/core/src/main/java/im/actor/model/entity/Peer.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/droidkit/bser/Bser.h"
#include "im/actor/model/droidkit/bser/BserObject.h"
#include "im/actor/model/droidkit/bser/BserValues.h"
#include "im/actor/model/droidkit/bser/BserWriter.h"
#include "im/actor/model/entity/Peer.h"
#include "im/actor/model/entity/PeerType.h"
#include "java/io/IOException.h"

@interface AMPeer () {
 @public
  AMPeerTypeEnum *peerType_;
  jint peerId_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(AMPeer, peerType_, AMPeerTypeEnum *)

__attribute__((unused)) static void AMPeer_init(AMPeer *self);

__attribute__((unused)) static AMPeer *new_AMPeer_init() NS_RETURNS_RETAINED;

@implementation AMPeer

+ (AMPeer *)fromBytesWithByteArray:(IOSByteArray *)data {
  return AMPeer_fromBytesWithByteArray_(data);
}

+ (AMPeer *)fromUniqueIdWithLong:(jlong)uid {
  return AMPeer_fromUniqueIdWithLong_(uid);
}

+ (AMPeer *)userWithInt:(jint)uid {
  return AMPeer_userWithInt_(uid);
}

+ (AMPeer *)groupWithInt:(jint)gid {
  return AMPeer_groupWithInt_(gid);
}

- (instancetype)initWithAMPeerTypeEnum:(AMPeerTypeEnum *)peerType
                               withInt:(jint)peerId {
  AMPeer_initWithAMPeerTypeEnum_withInt_(self, peerType, peerId);
  return self;
}

- (instancetype)init {
  AMPeer_init(self);
  return self;
}

- (jlong)getUnuqueId {
  jint type;
  switch ([peerType_ ordinal]) {
    default:
    case AMPeerType_PRIVATE:
    type = 0;
    break;
    case AMPeerType_GROUP:
    type = 1;
    break;
  }
  return ((jlong) peerId_ & (jlong) 0xFFFFFFFFLL) + (LShift64(((jlong) type & (jlong) 0xFFFFFFFFLL), 32));
}

- (AMPeerTypeEnum *)getPeerType {
  return peerType_;
}

- (jint)getPeerId {
  return peerId_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return YES;
  if (o == nil || [self getClass] != [o getClass]) return NO;
  AMPeer *peer = (AMPeer *) check_class_cast(o, [AMPeer class]);
  if (peerId_ != ((AMPeer *) nil_chk(peer))->peerId_) return NO;
  if (peerType_ != peer->peerType_) return NO;
  return YES;
}

- (NSUInteger)hash {
  jint result = ((jint) [((AMPeerTypeEnum *) nil_chk(peerType_)) hash]);
  result = 31 * result + peerId_;
  return result;
}

- (void)parseWithBSBserValues:(BSBserValues *)values {
  peerId_ = [((BSBserValues *) nil_chk(values)) getIntWithInt:1];
  switch ([values getIntWithInt:2]) {
    default:
    case 1:
    peerType_ = AMPeerTypeEnum_get_PRIVATE();
    break;
    case 3:
    peerType_ = AMPeerTypeEnum_get_GROUP();
    break;
  }
}

- (void)serializeWithBSBserWriter:(BSBserWriter *)writer {
  [((BSBserWriter *) nil_chk(writer)) writeIntWithInt:1 withInt:peerId_];
  switch ([peerType_ ordinal]) {
    default:
    case AMPeerType_PRIVATE:
    [writer writeIntWithInt:2 withInt:1];
    break;
    case AMPeerType_GROUP:
    [writer writeIntWithInt:2 withInt:3];
    break;
  }
}

- (NSString *)description {
  return JreStrcat("$@$IC", @"{type:", peerType_, @", id:", peerId_, '}');
}

@end

AMPeer *AMPeer_fromBytesWithByteArray_(IOSByteArray *data) {
  AMPeer_initialize();
  return ((AMPeer *) BSBser_parseWithBSBserObject_withByteArray_(new_AMPeer_init(), data));
}

AMPeer *AMPeer_fromUniqueIdWithLong_(jlong uid) {
  AMPeer_initialize();
  jint id_ = (jint) (uid & (jlong) 0xFFFFFFFFLL);
  jint type = (jint) ((RShift64(uid, 32)) & (jlong) 0xFFFFFFFFLL);
  switch (type) {
    default:
    case 0:
    return new_AMPeer_initWithAMPeerTypeEnum_withInt_(AMPeerTypeEnum_get_PRIVATE(), id_);
    case 1:
    return new_AMPeer_initWithAMPeerTypeEnum_withInt_(AMPeerTypeEnum_get_GROUP(), id_);
  }
}

AMPeer *AMPeer_userWithInt_(jint uid) {
  AMPeer_initialize();
  return new_AMPeer_initWithAMPeerTypeEnum_withInt_(AMPeerTypeEnum_get_PRIVATE(), uid);
}

AMPeer *AMPeer_groupWithInt_(jint gid) {
  AMPeer_initialize();
  return new_AMPeer_initWithAMPeerTypeEnum_withInt_(AMPeerTypeEnum_get_GROUP(), gid);
}

void AMPeer_initWithAMPeerTypeEnum_withInt_(AMPeer *self, AMPeerTypeEnum *peerType, jint peerId) {
  (void) BSBserObject_init(self);
  self->peerType_ = peerType;
  self->peerId_ = peerId;
}

AMPeer *new_AMPeer_initWithAMPeerTypeEnum_withInt_(AMPeerTypeEnum *peerType, jint peerId) {
  AMPeer *self = [AMPeer alloc];
  AMPeer_initWithAMPeerTypeEnum_withInt_(self, peerType, peerId);
  return self;
}

void AMPeer_init(AMPeer *self) {
  (void) BSBserObject_init(self);
}

AMPeer *new_AMPeer_init() {
  AMPeer *self = [AMPeer alloc];
  AMPeer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMPeer)
