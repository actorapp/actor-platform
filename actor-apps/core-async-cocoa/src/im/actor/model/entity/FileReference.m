//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-platform/actor-apps/core/src/main/java/im/actor/model/entity/FileReference.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/api/FileLocation.h"
#include "im/actor/model/droidkit/bser/BserValues.h"
#include "im/actor/model/droidkit/bser/BserWriter.h"
#include "im/actor/model/entity/FileReference.h"
#include "im/actor/model/entity/WrapperEntity.h"
#include "java/io/IOException.h"

#define AMFileReference_RECORD_ID 10

@interface AMFileReference () {
 @public
  jint fileSize_;
  NSString *fileName_;
}

@end

J2OBJC_FIELD_SETTER(AMFileReference, fileName_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(AMFileReference, RECORD_ID, jint)

@implementation AMFileReference

- (instancetype)initWithAPFileLocation:(APFileLocation *)fileLocation
                          withNSString:(NSString *)fileName
                               withInt:(jint)fileSize {
  AMFileReference_initWithAPFileLocation_withNSString_withInt_(self, fileLocation, fileName, fileSize);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)data {
  AMFileReference_initWithByteArray_(self, data);
  return self;
}

- (APFileLocation *)getFileLocation {
  return [self getWrapped];
}

- (jint)getFileSize {
  return fileSize_;
}

- (jlong)getFileId {
  return [((APFileLocation *) nil_chk([self getWrapped])) getFileId];
}

- (jlong)getAccessHash {
  return [((APFileLocation *) nil_chk([self getWrapped])) getAccessHash];
}

- (NSString *)getFileName {
  return fileName_;
}

- (void)parseWithBSBserValues:(BSBserValues *)values {
  if (![((BSBserValues *) nil_chk(values)) getBoolWithInt:5 withBoolean:NO]) {
    jlong fileId = [values getLongWithInt:1];
    jlong accessHash = [values getLongWithInt:2];
    [self setWrappedWithBSBserObject:new_APFileLocation_initWithLong_withLong_(fileId, accessHash)];
  }
  [super parseWithBSBserValues:values];
  fileSize_ = [values getIntWithInt:3];
  fileName_ = [values getStringWithInt:4];
}

- (void)serializeWithBSBserWriter:(BSBserWriter *)writer {
  [((BSBserWriter *) nil_chk(writer)) writeBoolWithInt:5 withBoolean:YES];
  [writer writeIntWithInt:3 withInt:fileSize_];
  [writer writeStringWithInt:4 withNSString:fileName_];
  [super serializeWithBSBserWriter:writer];
}

- (jboolean)isEqual:(id)o {
  if (self == o) return YES;
  if (o == nil || [self getClass] != [o getClass]) return NO;
  AMFileReference *that = (AMFileReference *) check_class_cast(o, [AMFileReference class]);
  if ([((APFileLocation *) nil_chk([self getWrapped])) getFileId] != [((APFileLocation *) nil_chk([((AMFileReference *) nil_chk(that)) getWrapped])) getFileId]) return NO;
  return YES;
}

- (NSUInteger)hash {
  return (jint) ([((APFileLocation *) nil_chk([self getWrapped])) getFileId] ^ (URShift64([((APFileLocation *) nil_chk([self getWrapped])) getFileId], 32)));
}

- (APFileLocation *)createInstance {
  return new_APFileLocation_init();
}

@end

void AMFileReference_initWithAPFileLocation_withNSString_withInt_(AMFileReference *self, APFileLocation *fileLocation, NSString *fileName, jint fileSize) {
  (void) AMWrapperEntity_initWithInt_withBSBserObject_(self, AMFileReference_RECORD_ID, fileLocation);
  self->fileSize_ = fileSize;
  self->fileName_ = fileName;
}

AMFileReference *new_AMFileReference_initWithAPFileLocation_withNSString_withInt_(APFileLocation *fileLocation, NSString *fileName, jint fileSize) {
  AMFileReference *self = [AMFileReference alloc];
  AMFileReference_initWithAPFileLocation_withNSString_withInt_(self, fileLocation, fileName, fileSize);
  return self;
}

void AMFileReference_initWithByteArray_(AMFileReference *self, IOSByteArray *data) {
  (void) AMWrapperEntity_initWithInt_withByteArray_(self, AMFileReference_RECORD_ID, data);
}

AMFileReference *new_AMFileReference_initWithByteArray_(IOSByteArray *data) {
  AMFileReference *self = [AMFileReference alloc];
  AMFileReference_initWithByteArray_(self, data);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AMFileReference)
