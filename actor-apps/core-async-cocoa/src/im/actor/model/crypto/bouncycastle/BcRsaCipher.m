//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ex3ndr/Develop/actor-proprietary/actor-apps/core-crypto/src/main/java/im/actor/model/crypto/bouncycastle/BcRsaCipher.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "im/actor/model/crypto/bouncycastle/BcRsaCipher.h"
#include "im/actor/model/crypto/bouncycastle/BcRsaEncryptCipher.h"
#include "im/actor/model/crypto/bouncycastle/RandomProvider.h"
#include "im/actor/model/crypto/encoding/PKS8RsaPrivateKey.h"
#include "java/lang/Exception.h"
#include "java/math/BigInteger.h"
#include "org/bouncycastle/crypto/AsymmetricBlockCipher.h"
#include "org/bouncycastle/crypto/digests/SHA1Digest.h"
#include "org/bouncycastle/crypto/encodings/OAEPEncoding.h"
#include "org/bouncycastle/crypto/engines/RSAEngine.h"
#include "org/bouncycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/bouncycastle/crypto/params/ParametersWithRandom.h"
#include "org/bouncycastle/crypto/params/RSAKeyParameters.h"

@interface BCBcRsaCipher () {
 @public
  id<OrgBouncycastleCryptoAsymmetricBlockCipher> cipher_BcRsaCipher_;
}

@end

J2OBJC_FIELD_SETTER(BCBcRsaCipher, cipher_BcRsaCipher_, id<OrgBouncycastleCryptoAsymmetricBlockCipher>)

@implementation BCBcRsaCipher

- (instancetype)initWithBCRandomProvider:(id<BCRandomProvider>)random
                           withByteArray:(IOSByteArray *)publicKey
                           withByteArray:(IOSByteArray *)privateKey {
  BCBcRsaCipher_initWithBCRandomProvider_withByteArray_withByteArray_(self, random, publicKey, privateKey);
  return self;
}

- (IOSByteArray *)decryptWithByteArray:(IOSByteArray *)sourceData {
  @synchronized(self) {
    if (cipher_BcRsaCipher_ == nil) {
      return nil;
    }
    @try {
      return [((id<OrgBouncycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_BcRsaCipher_)) processBlockWithByteArray:sourceData withInt:0 withInt:((IOSByteArray *) nil_chk(sourceData))->size_];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      return nil;
    }
  }
}

@end

void BCBcRsaCipher_initWithBCRandomProvider_withByteArray_withByteArray_(BCBcRsaCipher *self, id<BCRandomProvider> random, IOSByteArray *publicKey, IOSByteArray *privateKey) {
  (void) BCBcRsaEncryptCipher_initWithBCRandomProvider_withByteArray_(self, random, publicKey);
  @try {
    BCPKS8RsaPrivateKey *pks8RsaPrivateKey = new_BCPKS8RsaPrivateKey_initWithByteArray_(privateKey);
    OrgBouncycastleCryptoParamsAsymmetricKeyParameter *keyParameter = new_OrgBouncycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(YES, [pks8RsaPrivateKey getModulus], [pks8RsaPrivateKey getExponent]);
    self->cipher_BcRsaCipher_ = new_OrgBouncycastleCryptoEncodingsOAEPEncoding_initWithOrgBouncycastleCryptoAsymmetricBlockCipher_withOrgBouncycastleCryptoDigest_(new_OrgBouncycastleCryptoEnginesRSAEngine_init(), new_OrgBouncycastleCryptoDigestsSHA1Digest_init());
    [self->cipher_BcRsaCipher_ init__WithBoolean:NO withOrgBouncycastleCryptoParamsParametersWithRandom:new_OrgBouncycastleCryptoParamsParametersWithRandom_initWithOrgBouncycastleCryptoCipherParameters_withBCRandomProvider_(keyParameter, random)];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

BCBcRsaCipher *new_BCBcRsaCipher_initWithBCRandomProvider_withByteArray_withByteArray_(id<BCRandomProvider> random, IOSByteArray *publicKey, IOSByteArray *privateKey) {
  BCBcRsaCipher *self = [BCBcRsaCipher alloc];
  BCBcRsaCipher_initWithBCRandomProvider_withByteArray_withByteArray_(self, random, publicKey, privateKey);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BCBcRsaCipher)
