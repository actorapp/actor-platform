package im.actor.core.api;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.runtime.bser.*;
import im.actor.runtime.collections.*;

import static im.actor.runtime.bser.Utils.*;

import im.actor.core.network.parser.*;

import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;

import com.google.j2objc.annotations.ObjectiveCName;

import java.io.IOException;
import java.util.List;
import java.util.ArrayList;

public class ApiEncryptionPublicKeyGroup extends BserObject {

    private int keyGroupId;
    private List<ApiEncryptionPublicKey> publicKeys;

    public ApiEncryptionPublicKeyGroup(int keyGroupId, @NotNull List<ApiEncryptionPublicKey> publicKeys) {
        this.keyGroupId = keyGroupId;
        this.publicKeys = publicKeys;
    }

    public ApiEncryptionPublicKeyGroup() {

    }

    public int getKeyGroupId() {
        return this.keyGroupId;
    }

    @NotNull
    public List<ApiEncryptionPublicKey> getPublicKeys() {
        return this.publicKeys;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.keyGroupId = values.getInt(1);
        List<ApiEncryptionPublicKey> _publicKeys = new ArrayList<ApiEncryptionPublicKey>();
        for (int i = 0; i < values.getRepeatedCount(4); i++) {
            _publicKeys.add(new ApiEncryptionPublicKey());
        }
        this.publicKeys = values.getRepeatedObj(4, _publicKeys);
        if (values.hasRemaining()) {
            setUnmappedObjects(values.buildRemaining());
        }
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        writer.writeInt(1, this.keyGroupId);
        writer.writeRepeatedObj(4, this.publicKeys);
        if (this.getUnmappedObjects() != null) {
            SparseArray<Object> unmapped = this.getUnmappedObjects();
            for (int i = 0; i < unmapped.size(); i++) {
                int key = unmapped.keyAt(i);
                writer.writeUnmapped(key, unmapped.get(key));
            }
        }
    }

    @Override
    public String toString() {
        String res = "struct EncryptionPublicKeyGroup{";
        res += "keyGroupId=" + this.keyGroupId;
        res += "}";
        return res;
    }

}
