package im.actor.core.api.rpc;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.runtime.bser.*;
import im.actor.runtime.collections.*;
import static im.actor.runtime.bser.Utils.*;
import im.actor.core.network.parser.*;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import com.google.j2objc.annotations.ObjectiveCName;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import im.actor.core.api.*;

public class RequestEditUserLocalName extends Request<ResponseSeq> {

    public static final int HEADER = 0x60;
    public static RequestEditUserLocalName fromBytes(byte[] data) throws IOException {
        return Bser.parse(new RequestEditUserLocalName(), data);
    }

    private int uid;
    private long accessHash;
    private String name;

    public RequestEditUserLocalName(int uid, long accessHash, @NotNull String name) {
        this.uid = uid;
        this.accessHash = accessHash;
        this.name = name;
    }

    public RequestEditUserLocalName() {

    }

    public int getUid() {
        return this.uid;
    }

    public long getAccessHash() {
        return this.accessHash;
    }

    @NotNull
    public String getName() {
        return this.name;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.uid = values.getInt(1);
        this.accessHash = values.getLong(2);
        this.name = values.getString(3);
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        writer.writeInt(1, this.uid);
        writer.writeLong(2, this.accessHash);
        if (this.name == null) {
            throw new IOException();
        }
        writer.writeString(3, this.name);
    }

    @Override
    public String toString() {
        String res = "rpc EditUserLocalName{";
        res += "uid=" + this.uid;
        res += ", name=" + this.name;
        res += "}";
        return res;
    }

    @Override
    public int getHeaderKey() {
        return HEADER;
    }
}
