package im.actor.core.api;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.runtime.bser.*;
import im.actor.runtime.collections.*;
import static im.actor.runtime.bser.Utils.*;
import im.actor.core.network.parser.*;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import com.google.j2objc.annotations.ObjectiveCName;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;

public class ApiUser extends BserObject {

    private int id;
    private long accessHash;
    private String name;
    private String localName;
    private ApiSex sex;
    private ApiAvatar avatar;
    private List<ApiContactRecord> contactInfo;
    private Boolean isBot;
    private String nick;
    private String about;
    private String external;
    private List<String> preferredLanguages;
    private String timeZone;

    public ApiUser(int id, long accessHash, @NotNull String name, @Nullable String localName, @Nullable ApiSex sex, @Nullable ApiAvatar avatar, @NotNull List<ApiContactRecord> contactInfo, @Nullable Boolean isBot, @Nullable String nick, @Nullable String about, @Nullable String external, @NotNull List<String> preferredLanguages, @Nullable String timeZone) {
        this.id = id;
        this.accessHash = accessHash;
        this.name = name;
        this.localName = localName;
        this.sex = sex;
        this.avatar = avatar;
        this.contactInfo = contactInfo;
        this.isBot = isBot;
        this.nick = nick;
        this.about = about;
        this.external = external;
        this.preferredLanguages = preferredLanguages;
        this.timeZone = timeZone;
    }

    public ApiUser() {

    }

    public int getId() {
        return this.id;
    }

    public long getAccessHash() {
        return this.accessHash;
    }

    @NotNull
    public String getName() {
        return this.name;
    }

    @Nullable
    public String getLocalName() {
        return this.localName;
    }

    @Nullable
    public ApiSex getSex() {
        return this.sex;
    }

    @Nullable
    public ApiAvatar getAvatar() {
        return this.avatar;
    }

    @NotNull
    public List<ApiContactRecord> getContactInfo() {
        return this.contactInfo;
    }

    @Nullable
    public Boolean isBot() {
        return this.isBot;
    }

    @Nullable
    public String getNick() {
        return this.nick;
    }

    @Nullable
    public String getAbout() {
        return this.about;
    }

    @Nullable
    public String getExternal() {
        return this.external;
    }

    @NotNull
    public List<String> getPreferredLanguages() {
        return this.preferredLanguages;
    }

    @Nullable
    public String getTimeZone() {
        return this.timeZone;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.id = values.getInt(1);
        this.accessHash = values.getLong(2);
        this.name = values.getString(3);
        this.localName = values.optString(4);
        int val_sex = values.getInt(5, 0);
        if (val_sex != 0) {
            this.sex = ApiSex.parse(val_sex);
        }
        this.avatar = values.optObj(8, new ApiAvatar());
        List<ApiContactRecord> _contactInfo = new ArrayList<ApiContactRecord>();
        for (int i = 0; i < values.getRepeatedCount(12); i ++) {
            _contactInfo.add(new ApiContactRecord());
        }
        this.contactInfo = values.getRepeatedObj(12, _contactInfo);
        this.isBot = values.optBool(11);
        this.nick = values.optString(13);
        this.about = values.optString(14);
        this.external = values.optString(15);
        this.preferredLanguages = values.getRepeatedString(16);
        this.timeZone = values.optString(17);
        if (values.hasRemaining()) {
            setUnmappedObjects(values.buildRemaining());
        }
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        writer.writeInt(1, this.id);
        writer.writeLong(2, this.accessHash);
        if (this.name == null) {
            throw new IOException();
        }
        writer.writeString(3, this.name);
        if (this.localName != null) {
            writer.writeString(4, this.localName);
        }
        if (this.sex != null) {
            writer.writeInt(5, this.sex.getValue());
        }
        if (this.avatar != null) {
            writer.writeObject(8, this.avatar);
        }
        writer.writeRepeatedObj(12, this.contactInfo);
        if (this.isBot != null) {
            writer.writeBool(11, this.isBot);
        }
        if (this.nick != null) {
            writer.writeString(13, this.nick);
        }
        if (this.about != null) {
            writer.writeString(14, this.about);
        }
        if (this.external != null) {
            writer.writeString(15, this.external);
        }
        writer.writeRepeatedString(16, this.preferredLanguages);
        if (this.timeZone != null) {
            writer.writeString(17, this.timeZone);
        }
        if (this.getUnmappedObjects() != null) {
            SparseArray<Object> unmapped = this.getUnmappedObjects();
            for (int i = 0; i < unmapped.size(); i++) {
                int key = unmapped.keyAt(i);
                writer.writeUnmapped(key, unmapped.get(key));
            }
        }
    }

    @Override
    public String toString() {
        String res = "struct User{";
        res += "id=" + this.id;
        res += ", name=" + this.name;
        res += ", localName=" + this.localName;
        res += ", sex=" + this.sex;
        res += ", avatar=" + (this.avatar != null ? "set":"empty");
        res += ", contactInfo=" + this.contactInfo.size();
        res += ", isBot=" + this.isBot;
        res += ", nick=" + this.nick;
        res += ", about=" + this.about;
        res += ", external=" + this.external;
        res += ", preferredLanguages=" + this.preferredLanguages;
        res += ", timeZone=" + this.timeZone;
        res += "}";
        return res;
    }

}
