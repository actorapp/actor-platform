package im.actor.core.api.rpc;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.runtime.bser.*;
import im.actor.runtime.collections.*;
import static im.actor.runtime.bser.Utils.*;
import im.actor.core.network.parser.*;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import com.google.j2objc.annotations.ObjectiveCName;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import im.actor.core.api.*;

public class RequestCreateSurvey extends Request<ResponseVoid> {

    public static final int HEADER = 0x8b;
    public static RequestCreateSurvey fromBytes(byte[] data) throws IOException {
        return Bser.parse(new RequestCreateSurvey(), data);
    }

    private ApiSurvey survey;
    private List<ApiSurveyAnswer> answers;

    public RequestCreateSurvey(@NotNull ApiSurvey survey, @NotNull List<ApiSurveyAnswer> answers) {
        this.survey = survey;
        this.answers = answers;
    }

    public RequestCreateSurvey() {

    }

    @NotNull
    public ApiSurvey getSurvey() {
        return this.survey;
    }

    @NotNull
    public List<ApiSurveyAnswer> getAnswers() {
        return this.answers;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.survey = values.getObj(1, new ApiSurvey());
        List<ApiSurveyAnswer> _answers = new ArrayList<ApiSurveyAnswer>();
        for (int i = 0; i < values.getRepeatedCount(2); i ++) {
            _answers.add(new ApiSurveyAnswer());
        }
        this.answers = values.getRepeatedObj(2, _answers);
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        if (this.survey == null) {
            throw new IOException();
        }
        writer.writeObject(1, this.survey);
        writer.writeRepeatedObj(2, this.answers);
    }

    @Override
    public String toString() {
        String res = "rpc CreateSurvey{";
        res += "}";
        return res;
    }

    @Override
    public int getHeaderKey() {
        return HEADER;
    }
}
