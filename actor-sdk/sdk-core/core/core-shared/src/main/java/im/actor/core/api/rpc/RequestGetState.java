package im.actor.core.api.rpc;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.runtime.bser.*;
import im.actor.runtime.collections.*;
import static im.actor.runtime.bser.Utils.*;
import im.actor.core.network.parser.*;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import com.google.j2objc.annotations.ObjectiveCName;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import im.actor.core.api.*;

public class RequestGetState extends Request<ResponseSeq> {

    public static final int HEADER = 0x9;
    public static RequestGetState fromBytes(byte[] data) throws IOException {
        return Bser.parse(new RequestGetState(), data);
    }

    private List<ApiUpdateOptimization> optimizations;

    public RequestGetState(@NotNull List<ApiUpdateOptimization> optimizations) {
        this.optimizations = optimizations;
    }

    public RequestGetState() {

    }

    @NotNull
    public List<ApiUpdateOptimization> getOptimizations() {
        return this.optimizations;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.optimizations = new ArrayList<ApiUpdateOptimization>();
        for (int b : values.getRepeatedInt(1)) {
            optimizations.add(ApiUpdateOptimization.parse(b));
        }
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        for (ApiUpdateOptimization i : this.optimizations) {
            writer.writeInt(1, i.getValue());
        }
    }

    @Override
    public String toString() {
        String res = "rpc GetState{";
        res += "optimizations=" + this.optimizations;
        res += "}";
        return res;
    }

    @Override
    public int getHeaderKey() {
        return HEADER;
    }
}
