package im.actor.core.api;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.runtime.bser.*;
import im.actor.runtime.collections.*;
import static im.actor.runtime.bser.Utils.*;
import im.actor.core.network.parser.*;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import com.google.j2objc.annotations.ObjectiveCName;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;

public class ApiGroupPre extends BserObject {

    private ApiGroup group;
    private int groupFatherId;
    private List<ApiGroup> childrens;

    public ApiGroupPre(@NotNull ApiGroup group, int groupFatherId, @NotNull List<ApiGroup> childrens) {
        this.group = group;
        this.groupFatherId = groupFatherId;
        this.childrens = childrens;
    }

    public ApiGroupPre() {

    }

    @NotNull
    public ApiGroup getGroup() {
        return this.group;
    }

    public int getGroupFatherId() {
        return this.groupFatherId;
    }

    @NotNull
    public List<ApiGroup> getChildrens() {
        return this.childrens;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.group = values.getObj(1, new ApiGroup());
        this.groupFatherId = values.getInt(2);
        List<ApiGroup> _childrens = new ArrayList<ApiGroup>();
        for (int i = 0; i < values.getRepeatedCount(3); i ++) {
            _childrens.add(new ApiGroup());
        }
        this.childrens = values.getRepeatedObj(3, _childrens);
        if (values.hasRemaining()) {
            setUnmappedObjects(values.buildRemaining());
        }
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        if (this.group == null) {
            throw new IOException();
        }
        writer.writeObject(1, this.group);
        writer.writeInt(2, this.groupFatherId);
        writer.writeRepeatedObj(3, this.childrens);
        if (this.getUnmappedObjects() != null) {
            SparseArray<Object> unmapped = this.getUnmappedObjects();
            for (int i = 0; i < unmapped.size(); i++) {
                int key = unmapped.keyAt(i);
                writer.writeUnmapped(key, unmapped.get(key));
            }
        }
    }

    @Override
    public String toString() {
        String res = "struct GroupPre{";
        res += "}";
        return res;
    }

}
