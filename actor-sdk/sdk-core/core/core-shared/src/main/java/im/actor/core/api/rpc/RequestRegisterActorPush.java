package im.actor.core.api.rpc;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.runtime.bser.*;
import im.actor.runtime.collections.*;
import static im.actor.runtime.bser.Utils.*;
import im.actor.core.network.parser.*;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import com.google.j2objc.annotations.ObjectiveCName;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;
import im.actor.core.api.*;

public class RequestRegisterActorPush extends Request<ResponseVoid> {

    public static final int HEADER = 0xa0f;
    public static RequestRegisterActorPush fromBytes(byte[] data) throws IOException {
        return Bser.parse(new RequestRegisterActorPush(), data);
    }

    private String endpoint;
    private List<ApiEncryptionKey> encryptionKeys;

    public RequestRegisterActorPush(@NotNull String endpoint, @NotNull List<ApiEncryptionKey> encryptionKeys) {
        this.endpoint = endpoint;
        this.encryptionKeys = encryptionKeys;
    }

    public RequestRegisterActorPush() {

    }

    @NotNull
    public String getEndpoint() {
        return this.endpoint;
    }

    @NotNull
    public List<ApiEncryptionKey> getEncryptionKeys() {
        return this.encryptionKeys;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.endpoint = values.getString(1);
        List<ApiEncryptionKey> _encryptionKeys = new ArrayList<ApiEncryptionKey>();
        for (int i = 0; i < values.getRepeatedCount(2); i ++) {
            _encryptionKeys.add(new ApiEncryptionKey());
        }
        this.encryptionKeys = values.getRepeatedObj(2, _encryptionKeys);
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        if (this.endpoint == null) {
            throw new IOException();
        }
        writer.writeString(1, this.endpoint);
        writer.writeRepeatedObj(2, this.encryptionKeys);
    }

    @Override
    public String toString() {
        String res = "rpc RegisterActorPush{";
        res += "endpoint=" + this.endpoint;
        res += ", encryptionKeys=" + this.encryptionKeys;
        res += "}";
        return res;
    }

    @Override
    public int getHeaderKey() {
        return HEADER;
    }
}
