{
  "aliases": [
    {
      "type": "bytes",
      "alias": "seq_state"
    }
  ],
  "obj-c-prefix": "AM",
  "java-package": "im.actor.api",
  "sections": [
    {
      "title": "Authentication",
      "package": "auth",
      "doc": [
        "<p>Actor now support only one way for authentication - by SMS or phone call.</p>",
        "<p>Authorization steps:",
        "<ol>",
        "<li>Request SMS Code by calling RequestAuthCode</li>",
        "<li>If SMS arrives than send Authorization code in SignIn/SignUp</li>",
        "<li>If sms doesn't arrive for a long time - request phone activation by ",
        "   calling AuthCodeCall</li>",
        "</ol>",
        "</p>",
        "Some rules<br/>",
        "If RequestAuthCode return isRegistered = false than use SignUp method else SignIn.<br/>",
        "If on any step API return PHONE_CODE_EXPIRED than application MUST start ",
        "authorization process from begining.<br/>",
        "Each client MUST send valid RSA 2048 bit PublicKey encoded in x.509 format.<br/>"
      ],
      "items": [
        {
          "type": "rpc",
          "content": {
            "name": "AuthCode",
            "header": 1,
            "response": {
              "type": "anonymous",
              "header": 2,
              "attributes": [
                {
                  "type": "string",
                  "id": 1,
                  "name": "smsHash"
                },
                {
                  "type": "bool",
                  "id": 2,
                  "name": "isRegistered"
                }
              ]
            },
            "doc": [
              "Requesting SMS auth code",
              {
                "type": "reference",
                "argument": "phoneNumber",
                "description": "Phone number in international format"
              },
              {
                "type": "reference",
                "argument": "appId",
                "description": "Application ID"
              },
              {
                "type": "reference",
                "argument": "apiKey",
                "description": "Application API key"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "phoneNumber"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "appId"
              },
              {
                "type": "string",
                "id": 3,
                "name": "apiKey"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "AuthCodeCall",
            "header": 90,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Requesting Phone activation",
              {
                "type": "reference",
                "argument": "phoneNumber",
                "description": "Phone number in international format"
              },
              {
                "type": "reference",
                "argument": "smsHash",
                "description": "Code request hash from RequestAuthCode"
              },
              {
                "type": "reference",
                "argument": "appId",
                "description": "Application ID"
              },
              {
                "type": "reference",
                "argument": "apiKey",
                "description": "Application API key"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "phoneNumber"
              },
              {
                "type": "string",
                "id": 2,
                "name": "smsHash"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "appId"
              },
              {
                "type": "string",
                "id": 4,
                "name": "apiKey"
              }
            ]
          }
        },
        {
          "type": "response",
          "content": {
            "name": "Auth",
            "header": 5,
            "doc": [
              "Authentication result",
              {
                "type": "reference",
                "argument": "publicKeyHash",
                "description": "  Public Key Hash of current authentication"
              },
              {
                "type": "reference",
                "argument": "user",
                "description": "  The authenticated User"
              },
              {
                "type": "reference",
                "argument": "config",
                "description": "  Current config of server"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "publicKeyHash"
              },
              {
                "type": {
                  "type": "struct",
                  "childType": "User"
                },
                "id": 2,
                "name": "user"
              },
              {
                "type": {
                  "type": "struct",
                  "childType": "Config"
                },
                "id": 3,
                "name": "config"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "SignIn",
            "header": 3,
            "response": {
              "type": "reference",
              "name": "Auth"
            },
            "doc": [
              "Performing user signin",
              {
                "type": "reference",
                "argument": "phoneNumber",
                "description": "Phone number in international format"
              },
              {
                "type": "reference",
                "argument": "smsHash",
                "description": "Code request hash from RequestAuthCode"
              },
              {
                "type": "reference",
                "argument": "smsCode",
                "description": "Confirmation code from SMS"
              },
              {
                "type": "reference",
                "argument": "publicKey",
                "description": "Device RSA 2048 bit public key in x.509 format"
              },
              {
                "type": "reference",
                "argument": "deviceHash",
                "description": "Hash of device unique id and app bundle id. Used for autologout users when app is reinstalled"
              },
              {
                "type": "reference",
                "argument": "deviceTitle",
                "description": "Device title like 'Steven's iPhone'"
              },
              {
                "type": "reference",
                "argument": "appId",
                "description": "Application ID"
              },
              {
                "type": "reference",
                "argument": "appKey",
                "description": "Application API key"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "phoneNumber"
              },
              {
                "type": "string",
                "id": 2,
                "name": "smsHash"
              },
              {
                "type": "string",
                "id": 3,
                "name": "smsCode"
              },
              {
                "type": "bytes",
                "id": 4,
                "name": "publicKey"
              },
              {
                "type": "bytes",
                "id": 5,
                "name": "deviceHash"
              },
              {
                "type": "string",
                "id": 6,
                "name": "deviceTitle"
              },
              {
                "type": "int32",
                "id": 7,
                "name": "appId"
              },
              {
                "type": "string",
                "id": 8,
                "name": "appKey"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "SignUp",
            "header": 4,
            "response": {
              "type": "reference",
              "name": "Auth"
            },
            "doc": [
              "Performing user signup. If user perform signup on already registered user it just override previous",
              "profile information",
              {
                "type": "reference",
                "argument": "phoneNumber",
                "description": "Phone number in international format"
              },
              {
                "type": "reference",
                "argument": "smsHash",
                "description": "Code request hash from RequestAuthCode"
              },
              {
                "type": "reference",
                "argument": "smsCode",
                "description": "Confirmation code from SMS"
              },
              {
                "type": "reference",
                "argument": "name",
                "description": "User name"
              },
              {
                "type": "reference",
                "argument": "publicKey",
                "description": "Device RSA 2048 bit public key in x.509 format"
              },
              {
                "type": "reference",
                "argument": "deviceHash",
                "description": "Hash of device unique id and app bundle id. Used for autologout users when app is reinstalled"
              },
              {
                "type": "reference",
                "argument": "deviceTitle",
                "description": "Device title like 'Steven's iPhone'"
              },
              {
                "type": "reference",
                "argument": "appId",
                "description": "Application ID"
              },
              {
                "type": "reference",
                "argument": "appKey",
                "description": "pplication API key"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "phoneNumber"
              },
              {
                "type": "string",
                "id": 2,
                "name": "smsHash"
              },
              {
                "type": "string",
                "id": 3,
                "name": "smsCode"
              },
              {
                "type": "string",
                "id": 4,
                "name": "name"
              },
              {
                "type": "bytes",
                "id": 6,
                "name": "publicKey"
              },
              {
                "type": "bytes",
                "id": 7,
                "name": "deviceHash"
              },
              {
                "type": "string",
                "id": 8,
                "name": "deviceTitle"
              },
              {
                "type": "int32",
                "id": 9,
                "name": "appId"
              },
              {
                "type": "string",
                "id": 10,
                "name": "appKey"
              },
              {
                "type": "bool",
                "id": 11,
                "name": "isSilent"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "AuthItem",
            "doc": [
              "Authentication session",
              {
                "type": "reference",
                "argument": "id",
                "description": "  Unuque ID of session"
              },
              {
                "type": "reference",
                "argument": "authHolder",
                "description": "  holder of session. 0 - this device, 1 - other."
              },
              {
                "type": "reference",
                "argument": "appId",
                "description": "  Application Id (user in SignIn/SignUp)"
              },
              {
                "type": "reference",
                "argument": "appTitle",
                "description": "  Title of application"
              },
              {
                "type": "reference",
                "argument": "deviceTitle",
                "description": "  Title of device"
              },
              {
                "type": "reference",
                "argument": "authTime",
                "description": "  Time of session creating"
              },
              {
                "type": "reference",
                "argument": "authLocation",
                "description": "  two-letter country code of session create"
              },
              {
                "type": "reference",
                "argument": "latitude",
                "description": "  optional latitude of auth if available"
              },
              {
                "type": "reference",
                "argument": "longitude",
                "description": "  optional longitude of auth if available"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "id"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "authHolder"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "appId"
              },
              {
                "type": "string",
                "id": 4,
                "name": "appTitle"
              },
              {
                "type": "string",
                "id": 5,
                "name": "deviceTitle"
              },
              {
                "type": "int32",
                "id": 6,
                "name": "authTime"
              },
              {
                "type": "string",
                "id": 7,
                "name": "authLocation"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": "double"
                },
                "id": 8,
                "name": "latitude"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": "double"
                },
                "id": 9,
                "name": "longitude"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "GetAuth",
            "header": 80,
            "response": {
              "type": "anonymous",
              "header": 81,
              "attributes": [
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "AuthItem"
                    }
                  },
                  "id": 1,
                  "name": "userAuths"
                }
              ]
            },
            "doc": [
              "Getting of all active user's authentication sessions"
            ],
            "attributes": []
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "RemoveAuth",
            "header": 82,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Logout on specified user's session",
              {
                "type": "reference",
                "argument": "id",
                "description": "id from AuthItem"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "id"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "RemoveAllOtherAuths",
            "header": 83,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Logout on all exept current sessions"
            ],
            "attributes": []
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "Logout",
            "header": 84,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Logout current session"
            ],
            "attributes": []
          }
        }
      ]
    },
    {
      "title": "Users",
      "package": "users",
      "doc": [
        "Users are objects that secured by accessHash. You can't load user profile by it's id.",
        "You can't send message to user without finding it's object in Updates or by calling",
        "method for user search, contacts import or some other methods.",
        " ",
        "Applications need to keep all Users information forever.",
        " ",
        "Each User have optional localName - name of user that was set by current user and can be changed",
        "any time by calling EditUserLocalName method."
      ],
      "items": [
        {
          "type": "comment",
          "content": "Model"
        },
        {
          "type": "enum",
          "content": {
            "name": "Sex",
            "values": [
              {
                "name": "Unknown",
                "id": 1
              },
              {
                "name": "Male",
                "id": 2
              },
              {
                "name": "Female",
                "id": 3
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "User",
            "doc": [
              "Main user object",
              {
                "type": "reference",
                "argument": "id",
                "description": "  uid"
              },
              {
                "type": "reference",
                "argument": "accessHash",
                "description": "  user's access hash"
              },
              {
                "type": "reference",
                "argument": "name",
                "description": "  user's name"
              },
              {
                "type": "reference",
                "argument": "localName",
                "description": "  user's local name"
              },
              {
                "type": "reference",
                "argument": "sex",
                "description": "  optional sex of user"
              },
              {
                "type": "reference",
                "argument": "keyHashes",
                "description": "  key hashes of user"
              },
              {
                "type": "reference",
                "argument": "phone",
                "description": "  Phone number of user"
              },
              {
                "type": "reference",
                "argument": "avatar",
                "description": "  avatar of user"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "id"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "accessHash"
              },
              {
                "type": "string",
                "id": 3,
                "name": "name"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": "string"
                },
                "id": 4,
                "name": "localName"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "enum",
                    "childType": "Sex"
                  }
                },
                "id": 5,
                "name": "sex"
              },
              {
                "type": {
                  "type": "list",
                  "childType": "int64"
                },
                "id": 6,
                "name": "keyHashes"
              },
              {
                "type": "int64",
                "id": 7,
                "name": "phone"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "struct",
                    "childType": "Avatar"
                  }
                },
                "id": 8,
                "name": "avatar"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "EditUserLocalName",
            "header": 96,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Renaming of user's visible name",
              {
                "type": "reference",
                "argument": "uid",
                "description": "target User's uid"
              },
              {
                "type": "reference",
                "argument": "accessHash",
                "description": "User's accessHash"
              },
              {
                "type": "reference",
                "argument": "name",
                "description": "New user name"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "accessHash"
              },
              {
                "type": "string",
                "id": 3,
                "name": "name"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "UserAvatarChanged",
            "header": 16,
            "doc": [
              "Update about avatar changed",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  user's uid"
              },
              {
                "type": "reference",
                "argument": "avatar",
                "description": "  user's new avatar"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "struct",
                    "childType": "Avatar"
                  }
                },
                "id": 2,
                "name": "avatar"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "UserNameChanged",
            "header": 32,
            "doc": [
              "Update about name changed",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  user's uid"
              },
              {
                "type": "reference",
                "argument": "name",
                "description": "  user's name"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "string",
                "id": 2,
                "name": "name"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "UserLocalNameChanged",
            "header": 51,
            "doc": [
              "Update about local name changed",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  user's uid"
              },
              {
                "type": "reference",
                "argument": "localName",
                "description": "  new user's local name"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": "string"
                },
                "id": 2,
                "name": "localName"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Profile",
      "package": "profile",
      "items": [
        {
          "type": "rpc",
          "content": {
            "name": "EditName",
            "header": 53,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Changing account's name",
              {
                "type": "reference",
                "argument": "name",
                "description": "New name"
              }
            ],
            "attributes": [
              {
                "type": "string",
                "id": 1,
                "name": "name"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "EditAvatar",
            "header": 31,
            "response": {
              "type": "reference",
              "name": "AvatarChanged"
            },
            "doc": [
              "Changing account's avatar",
              {
                "type": "reference",
                "argument": "fileLocation",
                "description": "File Location of uploaded unencrypted avatar"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "FileLocation"
                },
                "id": 1,
                "name": "fileLocation"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "RemoveAvatar",
            "header": 91,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Removing account's avatar"
            ],
            "attributes": []
          }
        }
      ]
    },
    {
      "title": "Contacts",
      "package": "contacts",
      "doc": [
        "Before working with contact list is is useful to import contacts from phone first by calling",
        "method ImportContacts#0x07.",
        " ",
        "All phone numbers MUST be preprocessed before import by some library (like libphonenumber)",
        "and build international phone number depending on current users phone and/or locale.",
        " ",
        "For loading contact list from server use GetContacts#0x57. ",
        "If during this call there are some updates about contact list change",
        "it is recommended to call it again. Also applications need to sync contacts on application start.",
        " ",
        "For searching for users without adding to contacts list use method FindContacts#0x70.",
        " ",
        "For adding/deleting contacts AddContact#0x72 and DeleteContact#0x59."
      ],
      "items": [
        {
          "type": "comment",
          "content": "Import"
        },
        {
          "type": "struct",
          "content": {
            "name": "PhoneToImport",
            "doc": [
              "Phone for import",
              {
                "type": "reference",
                "argument": "phoneNumber",
                "description": "  phone number for import in international format"
              },
              {
                "type": "reference",
                "argument": "name",
                "description": "  optional name for contact"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "phoneNumber"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": "string"
                },
                "id": 2,
                "name": "name"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "EmailToImport",
            "doc": [
              "Email for import",
              {
                "type": "reference",
                "argument": "email",
                "description": "  email for importing"
              },
              {
                "type": "reference",
                "argument": "name",
                "description": "  optional name for contact"
              }
            ],
            "attributes": [
              {
                "type": "string",
                "id": 1,
                "name": "email"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": "string"
                },
                "id": 2,
                "name": "name"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "ImportContacts",
            "header": 7,
            "response": {
              "type": "anonymous",
              "header": 8,
              "attributes": [
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "User"
                    }
                  },
                  "id": 1,
                  "name": "users"
                },
                {
                  "type": "int32",
                  "id": 2,
                  "name": "seq"
                },
                {
                  "type": {
                    "type": "alias",
                    "childType": "seq_state"
                  },
                  "id": 3,
                  "name": "state"
                }
              ]
            },
            "doc": [
              "Importing phones and emails for building contact list",
              "Maximum amount of items for import per method call equals to 100.",
              {
                "type": "reference",
                "argument": "phones",
                "description": "Phones for import"
              },
              {
                "type": "reference",
                "argument": "emails",
                "description": "Emails for import"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "PhoneToImport"
                  }
                },
                "id": 1,
                "name": "phones"
              },
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "EmailToImport"
                  }
                },
                "id": 2,
                "name": "emails"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "comment",
          "content": "Working with list"
        },
        {
          "type": "rpc",
          "content": {
            "name": "GetContacts",
            "header": 87,
            "response": {
              "type": "anonymous",
              "header": 88,
              "attributes": [
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "User"
                    }
                  },
                  "id": 1,
                  "name": "users"
                },
                {
                  "type": "bool",
                  "id": 2,
                  "name": "isNotChanged"
                }
              ]
            },
            "doc": [
              "Getting current contact list",
              "SHA256 hash of list of a comma-separated list of contact UIDs in ascending ",
              "order may be passed in contactsHash parameter. ",
              "If the contact list was not changed, isNotChanged will be true.",
              {
                "type": "reference",
                "argument": "contactsHash",
                "description": "Hash of saved list in application"
              }
            ],
            "attributes": [
              {
                "type": "string",
                "id": 1,
                "name": "contactsHash"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "RemoveContact",
            "header": 89,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Removing contact from contact list",
              {
                "type": "reference",
                "argument": "uid",
                "description": "Contact's UID"
              },
              {
                "type": "reference",
                "argument": "accessHash",
                "description": "Contact's AccessHash"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "accessHash"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "AddContact",
            "header": 114,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Adding contact to contact list",
              {
                "type": "reference",
                "argument": "uid",
                "description": "Contact's UID"
              },
              {
                "type": "reference",
                "argument": "accessHash",
                "description": "Contact's AccessHash"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "accessHash"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "SearchContacts",
            "header": 112,
            "response": {
              "type": "anonymous",
              "header": 113,
              "attributes": [
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "User"
                    }
                  },
                  "id": 1,
                  "name": "users"
                }
              ]
            },
            "doc": [
              "Searching contacts by user's query"
            ],
            "attributes": [
              {
                "type": "string",
                "id": 1,
                "name": "request"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "update",
          "content": {
            "name": "ContactRegistered",
            "header": 5,
            "doc": [
              "Update about contact registration",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  contact's uid"
              },
              {
                "type": "reference",
                "argument": "isSilent",
                "description": "  is registration silent. If this value is true then don't show notification about registration"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  date of registration"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "bool",
                "id": 2,
                "name": "isSilent"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "ContactsAdded",
            "header": 40,
            "doc": [
              "Update about contacts added",
              {
                "type": "reference",
                "argument": "uids",
                "description": "  added contacts"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "list",
                  "childType": "int32"
                },
                "id": 1,
                "name": "uids"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "ContactsRemoved",
            "header": 41,
            "doc": [
              "Update about contacts removed",
              {
                "type": "reference",
                "argument": "uids",
                "description": "  removed contacts"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "list",
                  "childType": "int32"
                },
                "id": 1,
                "name": "uids"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Messaging",
      "package": "messaging",
      "doc": [
        "Actor can work with encrypted and plain messages in one conversation. For both types of messages API",
        "contains a bit different methods. Also encrypted and plain messages have different schemes.",
        "<h3>Messages</h3>",
        "Message entity contains:",
        "<ul>",
        "<li>PeerType - group chat or private</li>",
        "<li>PeerId - group or user id of conversation</li>",
        "<li>RandomId - unique id of message that generated by sender. In Encrypted messages random id is encrypted.</li>",
        "<li>Date - date of message (calculated on server)</li>",
        "<li>Content</li>",
        "</ul>",
        "<h3>Message content</h3>",
        "Message can be one of three basic types of messages: Text Message, File Message and Service message.",
        "All messages can contain extensions. For example we can send text message and add markdown extension with ",
        "formatted text in markdown and clients that support this extension will show markdown, and that clients that",
        "not supported extension then show simple text. File messages can have photo, video or voice extensions.",
        "Service message can have extensions extensions such as \"user added\", \"group created\", \"avatar changed\", etc.",
        "<h3>Send messages</h3>",
        "Sending messages looks same for encrypted and plain messages. Client MUST prepare all required data",
        "before sending message (for example FastThumb for photo/video/documents) and call required methods. ",
        "Encrypted messages differs here only by a little different scheme and encryption.",
        "<h3>WRONG_KEYS and incorrect keys</h3>",
        "For sending encrypted messages client MUST send messages encrypted for all own and receivers keys.",
        "If client send encryption with missing, old or incorrect keys it will receive WRONG_KEYS.",
        "In WRONG_KEYS you need to deserialize relatedData from RpcError to WrongKeysErrorData",
        "and get detailed information about keys. Sometimes there are some broken keys on server and client can't ",
        "encrypt messages with it than client MUST send empty encrypted key in request elsewhere API return WRONG_KEYS.",
        "<h3>Encrypted messages and New Devices</h3>",
        "When you send message to someone and when he registered with new device there are no way to receive old encrypted",
        "messages on new device and because of this there are a problem about read/delivery statuses. ",
        "Alice send messages to Bob, but Bob lose his device and  buy new iPhone and installed Actor.",
        "Alice receive notification about new device and send another message. Bob open chat with Alice and",
        "send read status with maximum message read date. Alice will mark all sent messages as read and one that",
        "was not delivered. We can use status notifications per message, but in VERY heavy conversations it will be",
        "a lot of unnecessary traffic. For resolving this small issue we have different ways of message statuses",
        "for encrypted and plain messages. Also it is recomended to mark all undelivered messages on new device update as ",
        "not devered with warring sign.",
        "<h3>Message Read and Delivery</h3>",
        "There are two different ways for read and delivery statuses for encrypted and plain messages.",
        "For encrypted messages used status change by RandomId and for plain messages used by maximum",
        "date of read/delivered message."
      ],
      "items": [
        {
          "type": "comment",
          "content": "Model"
        },
        {
          "type": "struct",
          "content": {
            "name": "MessageContent",
            "doc": [
              "Content of message",
              {
                "type": "reference",
                "argument": "type",
                "description": "  type of content. 1 => TextMessage, 2 => ServiceMessage, 3 => FileMessage"
              },
              {
                "type": "reference",
                "argument": "content",
                "description": "  serialized content of message"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "type"
              },
              {
                "type": {
                  "type": "trait",
                  "childType": "Message"
                },
                "id": 2,
                "name": "content"
              }
            ]
          }
        },
        {
          "type": "trait",
          "content": {
            "name": "Message",
            "attributes": []
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "TextMessage",
            "doc": [
              "Text message",
              {
                "type": "reference",
                "argument": "text",
                "description": "  the text"
              },
              {
                "type": "reference",
                "argument": "extType",
                "description": "  type of extension. Now there are no extensions."
              },
              {
                "type": "reference",
                "argument": "ext",
                "description": "  Optional bytes of extension"
              }
            ],
            "trait": {
              "name": "Message",
              "key": 1
            },
            "attributes": [
              {
                "type": "string",
                "id": 1,
                "name": "text"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "extType"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": "bytes"
                },
                "id": 3,
                "name": "ext"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "ServiceMessage",
            "doc": [
              "Service message",
              {
                "type": "reference",
                "argument": "text",
                "description": "  service message text"
              },
              {
                "type": "reference",
                "argument": "extType",
                "description": "  extension type. 0x01 => ServiceExUserAdded, 0x02 => ServiceExUserKicked, 0x03 => ServiveExUserLeft, 0x04 => ServiceExGroupCreated, 0x05 => ServiceExGroupChangedTitle, 0x06 => ServiceExGroupChangedAvatar"
              }
            ],
            "trait": {
              "name": "Message",
              "key": 2
            },
            "attributes": [
              {
                "type": "string",
                "id": 1,
                "name": "text"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "extType"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "trait",
                    "childType": "ServiceExtension"
                  }
                },
                "id": 3,
                "name": "ext"
              }
            ]
          }
        },
        {
          "type": "trait",
          "content": {
            "name": "ServiceExtension",
            "attributes": []
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "ServiceExUserAdded",
            "doc": [
              "Service message about adding user to group",
              {
                "type": "reference",
                "argument": "addedUid",
                "description": "  added user id"
              }
            ],
            "trait": {
              "name": "ServiceExtension",
              "key": 1
            },
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "addedUid"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "ServiceExUserKicked",
            "doc": [
              "Service message about kicking user from group",
              {
                "type": "reference",
                "argument": "kickedUid",
                "description": "  kicked user id"
              }
            ],
            "trait": {
              "name": "ServiceExtension",
              "key": 2
            },
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "kickedUid"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "ServiceExUserLeft",
            "doc": [
              "Service message about user left group"
            ],
            "trait": {
              "name": "ServiceExtension",
              "key": 3
            },
            "attributes": []
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "ServiceExGroupCreated",
            "doc": [
              "Service message about group creating"
            ],
            "trait": {
              "name": "ServiceExtension",
              "key": 4
            },
            "attributes": []
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "ServiceExChangedTitle",
            "doc": [
              "Service message about group title change"
            ],
            "trait": {
              "name": "ServiceExtension",
              "key": 5
            },
            "attributes": [
              {
                "type": "string",
                "id": 1,
                "name": "title"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "ServiceExChangedAvatar",
            "doc": [
              "Service message about avatar change"
            ],
            "trait": {
              "name": "ServiceExtension",
              "key": 6
            },
            "attributes": [
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "struct",
                    "childType": "Avatar"
                  }
                },
                "id": 1,
                "name": "avatar"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "FileMessage",
            "doc": [
              "File message",
              {
                "type": "reference",
                "argument": "fileId",
                "description": "  file id"
              },
              {
                "type": "reference",
                "argument": "accessHash",
                "description": "  file access hash"
              },
              {
                "type": "reference",
                "argument": "fileSize",
                "description": "  file size"
              },
              {
                "type": "reference",
                "argument": "name",
                "description": "  name of file"
              },
              {
                "type": "reference",
                "argument": "mimeType",
                "description": "  mimetype of file"
              },
              {
                "type": "reference",
                "argument": "thumb",
                "description": "  optional thumb of file. JPEG less that 90x90 with 60-70 quality."
              },
              {
                "type": "reference",
                "argument": "extType",
                "description": "  Extension type"
              },
              {
                "type": "reference",
                "argument": "ext",
                "description": "  Extension"
              }
            ],
            "trait": {
              "name": "Message",
              "key": 3
            },
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "fileId"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "accessHash"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "fileSize"
              },
              {
                "type": "string",
                "id": 4,
                "name": "name"
              },
              {
                "type": "string",
                "id": 5,
                "name": "mimeType"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "struct",
                    "childType": "FastThumb"
                  }
                },
                "id": 6,
                "name": "thumb"
              },
              {
                "type": "int32",
                "id": 7,
                "name": "extType"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": "bytes"
                },
                "id": 8,
                "name": "ext"
              }
            ]
          }
        },
        {
          "type": "trait",
          "content": {
            "name": "FileExtension",
            "attributes": []
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "FileExPhoto",
            "doc": [
              "File photo extension",
              {
                "type": "reference",
                "argument": "w",
                "description": "  image width"
              },
              {
                "type": "reference",
                "argument": "h",
                "description": "  image height"
              }
            ],
            "trait": {
              "name": "FileExtension",
              "key": 1
            },
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "w"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "h"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "FileExVideo",
            "doc": [
              "File video extension",
              {
                "type": "reference",
                "argument": "w",
                "description": "  video width"
              },
              {
                "type": "reference",
                "argument": "h",
                "description": "  video height"
              },
              {
                "type": "reference",
                "argument": "duration",
                "description": "  video duration"
              }
            ],
            "trait": {
              "name": "FileExtension",
              "key": 2
            },
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "w"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "h"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "duration"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "FileExVoice",
            "doc": [
              "File voice extension",
              {
                "type": "reference",
                "argument": "duration",
                "description": "  voice duration"
              }
            ],
            "trait": {
              "name": "FileExtension",
              "key": 3
            },
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "duration"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "struct",
          "content": {
            "name": "WrongKeysErrorData",
            "doc": [
              "Error's Related data for WRRONG_KEYS in sendMessage",
              {
                "type": "reference",
                "argument": "newKeys",
                "description": "  added keys to user"
              },
              {
                "type": "reference",
                "argument": "removedKeys",
                "description": "  disabled keys"
              },
              {
                "type": "reference",
                "argument": "invalidKeys",
                "description": "  invalid keys"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "UserKey"
                  }
                },
                "id": 1,
                "name": "newKeys"
              },
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "UserKey"
                  }
                },
                "id": 2,
                "name": "removedKeys"
              },
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "UserKey"
                  }
                },
                "id": 3,
                "name": "invalidKeys"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "response",
          "content": {
            "name": "MessageSent",
            "header": 115,
            "doc": [
              "Response about message sent",
              {
                "type": "reference",
                "argument": "seq",
                "description": "  Sequence number in update sequence"
              },
              {
                "type": "reference",
                "argument": "state",
                "description": "  Seuqnce state value"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  date of message"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "seq"
              },
              {
                "type": {
                  "type": "alias",
                  "childType": "seq_state"
                },
                "id": 2,
                "name": "state"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "EncryptedAesKey",
            "doc": [
              "Encrypted AES key for encrypted messages",
              {
                "type": "reference",
                "argument": "keyHash",
                "description": "  hash of public key of encrypted aes key"
              },
              {
                "type": "reference",
                "argument": "aesEncryptedKey",
                "description": "  encrypted aes key"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "keyHash"
              },
              {
                "type": "bytes",
                "id": 2,
                "name": "aesEncryptedKey"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "SendEncryptedMessage",
            "header": 14,
            "response": {
              "type": "reference",
              "name": "MessageSent"
            },
            "doc": [
              "Sending encrypted message",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Destination peer for message"
              },
              {
                "type": "reference",
                "argument": "rid",
                "description": "Message random id (generated on client side)"
              },
              {
                "type": "reference",
                "argument": "encryptedMessage",
                "description": "message encrypted by random aes key"
              },
              {
                "type": "reference",
                "argument": "keys",
                "description": "encrypted aes keys for receivers devices"
              },
              {
                "type": "reference",
                "argument": "ownKeys",
                "description": "encrypted aes keys for own devices"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "rid"
              },
              {
                "type": "bytes",
                "id": 4,
                "name": "encryptedMessage"
              },
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "EncryptedAesKey"
                  }
                },
                "id": 5,
                "name": "keys"
              },
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "EncryptedAesKey"
                  }
                },
                "id": 6,
                "name": "ownKeys"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "SendMessage",
            "header": 92,
            "response": {
              "type": "reference",
              "name": "MessageSent"
            },
            "doc": [
              "Sending plain message",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Destination peer for message (now supported only user's peer)"
              },
              {
                "type": "reference",
                "argument": "rid",
                "description": "Message random id (generated on clien side)"
              },
              {
                "type": "reference",
                "argument": "message",
                "description": "The message"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "rid"
              },
              {
                "type": {
                  "type": "struct",
                  "childType": "MessageContent"
                },
                "id": 4,
                "name": "message"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "EncryptedReceived",
            "header": 116,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Confirmation of encrypted message receive by device",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Destination peer"
              },
              {
                "type": "reference",
                "argument": "rid",
                "description": "Message random id"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "rid"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "EncryptedRead",
            "header": 117,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Marking encrypted message as read",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Destination peer"
              },
              {
                "type": "reference",
                "argument": "rid",
                "description": "Message random id"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "rid"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "MessageReceived",
            "header": 55,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Confirmation of plain message receive by device",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Destination peer"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "Maximum date of received messages"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "MessageRead",
            "header": 57,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Marking plain messages as read",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Destination peer"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "Maximum date of read messages"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "DeleteMessage",
            "header": 98,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Deleting messages",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Destination peer"
              },
              {
                "type": "reference",
                "argument": "rids",
                "description": "Message random id"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": {
                  "type": "list",
                  "childType": "int64"
                },
                "id": 3,
                "name": "rids"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "ClearChat",
            "header": 99,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Clearing of conversation (without removing dialog from dialogs list)",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Conversation peer"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "DeleteChat",
            "header": 100,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Deleting of conversation (also leave group for group conversations)",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Conversation peer"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "comment",
          "content": "Logic"
        },
        {
          "type": "update",
          "content": {
            "name": "EncryptedMessage",
            "header": 1,
            "doc": [
              "Update about encrypted message",
              {
                "type": "reference",
                "argument": "peer",
                "description": "  Destination peer"
              },
              {
                "type": "reference",
                "argument": "senderUid",
                "description": "  sender of message"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  date of message"
              },
              {
                "type": "reference",
                "argument": "keyHash",
                "description": "  device's public key hash"
              },
              {
                "type": "reference",
                "argument": "aesEncryptedKey",
                "description": "  Encrypted key for current device"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "senderUid"
              },
              {
                "type": "int64",
                "id": 6,
                "name": "date"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "keyHash"
              },
              {
                "type": "bytes",
                "id": 4,
                "name": "aesEncryptedKey"
              },
              {
                "type": "bytes",
                "id": 5,
                "name": "message"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "Message",
            "header": 55,
            "doc": [
              "Update about plain message"
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "senderUid"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "date"
              },
              {
                "type": "int64",
                "id": 4,
                "name": "rid"
              },
              {
                "type": {
                  "type": "struct",
                  "childType": "MessageContent"
                },
                "id": 5,
                "name": "message"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "MessageSent",
            "header": 4,
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "rid"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "comment",
          "content": "Encrypted"
        },
        {
          "type": "update",
          "content": {
            "name": "EncryptedReceived",
            "header": 18,
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "rid"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "receivedDate"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "EncryptedRead",
            "header": 52,
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "rid"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "readDate"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "EncryptedReadByMe",
            "header": 53,
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "rid"
              }
            ]
          }
        },
        {
          "type": "comment",
          "content": "Plain"
        },
        {
          "type": "update",
          "content": {
            "name": "MessageReceived",
            "header": 54,
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "date"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "receivedDate"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "MessageRead",
            "header": 19,
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "date"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "readDate"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "MessageReadByMe",
            "header": 50,
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "comment",
          "content": "Message deletions"
        },
        {
          "type": "update",
          "content": {
            "name": "MessageDelete",
            "header": 46,
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": {
                  "type": "list",
                  "childType": "int64"
                },
                "id": 2,
                "name": "rids"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "ChatClear",
            "header": 47,
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "ChatDelete",
            "header": 48,
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Groups",
      "package": "groups",
      "items": [
        {
          "type": "struct",
          "content": {
            "name": "Group",
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "id"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "accessHash"
              },
              {
                "type": "string",
                "id": 3,
                "name": "title"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "struct",
                    "childType": "Avatar"
                  }
                },
                "id": 4,
                "name": "avatar"
              },
              {
                "type": "bool",
                "id": 6,
                "name": "isMember"
              },
              {
                "type": "int32",
                "id": 8,
                "name": "adminUid"
              },
              {
                "type": {
                  "type": "list",
                  "childType": "int32"
                },
                "id": 9,
                "name": "members"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "rpc",
          "content": {
            "name": "CreateGroup",
            "header": 65,
            "response": {
              "type": "anonymous",
              "header": 66,
              "attributes": [
                {
                  "type": {
                    "type": "struct",
                    "childType": "GroupOutPeer"
                  },
                  "id": 1,
                  "name": "groupPeer"
                },
                {
                  "type": "int32",
                  "id": 3,
                  "name": "seq"
                },
                {
                  "type": {
                    "type": "alias",
                    "childType": "seq_state"
                  },
                  "id": 4,
                  "name": "state"
                },
                {
                  "type": {
                    "type": "list",
                    "childType": "int32"
                  },
                  "id": 5,
                  "name": "users"
                }
              ]
            },
            "doc": [
              "Creating group chat",
              {
                "type": "reference",
                "argument": "rid",
                "description": "Random Id for avoiding double create"
              },
              {
                "type": "reference",
                "argument": "title",
                "description": "Group title"
              },
              {
                "type": "reference",
                "argument": "users",
                "description": "Members of group"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "rid"
              },
              {
                "type": "string",
                "id": 2,
                "name": "title"
              },
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "UserOutPeer"
                  }
                },
                "id": 3,
                "name": "users"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "EditGroupTitle",
            "header": 85,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Changing group title",
              {
                "type": "reference",
                "argument": "groupPeer",
                "description": "Group's peer"
              },
              {
                "type": "reference",
                "argument": "title",
                "description": "new group title"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "GroupOutPeer"
                },
                "id": 1,
                "name": "groupPeer"
              },
              {
                "type": "string",
                "id": 3,
                "name": "title"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "EditGroupAvatar",
            "header": 86,
            "response": {
              "type": "reference",
              "name": "AvatarChanged"
            },
            "doc": [
              "Changing group avatar",
              {
                "type": "reference",
                "argument": "groupPeer",
                "description": "Group's peer"
              },
              {
                "type": "reference",
                "argument": "fileLocation",
                "description": "uploaded file for avatar"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "GroupOutPeer"
                },
                "id": 1,
                "name": "groupPeer"
              },
              {
                "type": {
                  "type": "struct",
                  "childType": "FileLocation"
                },
                "id": 3,
                "name": "fileLocation"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "RemoveGroupAvatar",
            "header": 101,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Removing group avatar",
              {
                "type": "reference",
                "argument": "groupPeer",
                "description": "Group's peer"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "GroupOutPeer"
                },
                "id": 1,
                "name": "groupPeer"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "InviteUsers",
            "header": 69,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Inviting users to group",
              {
                "type": "reference",
                "argument": "groupPeer",
                "description": "Group's peer"
              },
              {
                "type": "reference",
                "argument": "users",
                "description": "Users for invitation"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "GroupOutPeer"
                },
                "id": 1,
                "name": "groupPeer"
              },
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "UserOutPeer"
                  }
                },
                "id": 3,
                "name": "users"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "LeaveGroup",
            "header": 70,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Leaving group",
              {
                "type": "reference",
                "argument": "groupPeer",
                "description": "Group's peer"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "GroupOutPeer"
                },
                "id": 1,
                "name": "groupPeer"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "DeleteGroup",
            "header": 97,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Leaving and deleting group (similar to DeleteChat)",
              {
                "type": "reference",
                "argument": "groupPeer",
                "description": "Group's peer"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "GroupOutPeer"
                },
                "id": 1,
                "name": "groupPeer"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "RemoveUsers",
            "header": 71,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Removing users from group",
              {
                "type": "reference",
                "argument": "groupPeer",
                "description": "Group's peer"
              },
              {
                "type": "reference",
                "argument": "users",
                "description": "users for removing"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "GroupOutPeer"
                },
                "id": 1,
                "name": "groupPeer"
              },
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "UserOutPeer"
                  }
                },
                "id": 3,
                "name": "users"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "update",
          "content": {
            "name": "GroupInvite",
            "header": 36,
            "doc": [
              "Update about inviting current user to group",
              {
                "type": "reference",
                "argument": "groupId",
                "description": "  Group Id"
              },
              {
                "type": "reference",
                "argument": "inviteUid",
                "description": "  Inviter UID. If equals to current uid than group created by user."
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  Date of creating"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "groupId"
              },
              {
                "type": "int32",
                "id": 5,
                "name": "inviteUid"
              },
              {
                "type": "int64",
                "id": 8,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "GroupUserAdded",
            "header": 21,
            "doc": [
              "Update about adding user to group",
              {
                "type": "reference",
                "argument": "groupId",
                "description": "  Group Id"
              },
              {
                "type": "reference",
                "argument": "uid",
                "description": "  Added user ID"
              },
              {
                "type": "reference",
                "argument": "inviterUid",
                "description": "  Inviter user ID"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  Date of adding user to group"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "groupId"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "uid"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "inviterUid"
              },
              {
                "type": "int64",
                "id": 4,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "GroupUserLeave",
            "header": 23,
            "doc": [
              "Update about leaving user",
              {
                "type": "reference",
                "argument": "groupId",
                "description": "  Group Id"
              },
              {
                "type": "reference",
                "argument": "uid",
                "description": "  User's ID"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  Date of user leave"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "groupId"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "GroupUserKick",
            "header": 24,
            "doc": [
              "Update about kicking user",
              {
                "type": "reference",
                "argument": "groupId",
                "description": "  Group Id"
              },
              {
                "type": "reference",
                "argument": "uid",
                "description": "  Kicked user's ID"
              },
              {
                "type": "reference",
                "argument": "kickerUid",
                "description": "  Kicker user's ID"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  Date of user kick"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "groupId"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "uid"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "kickerUid"
              },
              {
                "type": "int64",
                "id": 4,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "GroupMembersUpdate",
            "header": 44,
            "doc": [
              "Silent group members update",
              {
                "type": "reference",
                "argument": "groupId",
                "description": "  Group Id"
              },
              {
                "type": "reference",
                "argument": "members",
                "description": "  New members list"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "groupId"
              },
              {
                "type": {
                  "type": "list",
                  "childType": "int32"
                },
                "id": 2,
                "name": "members"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "GroupTitleChanged",
            "header": 38,
            "doc": [
              "Update about group title change",
              {
                "type": "reference",
                "argument": "groupId",
                "description": "  Group Id"
              },
              {
                "type": "reference",
                "argument": "uid",
                "description": "  Changer UID"
              },
              {
                "type": "reference",
                "argument": "title",
                "description": "  New Title of group"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  Date of title change"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "groupId"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "uid"
              },
              {
                "type": "string",
                "id": 3,
                "name": "title"
              },
              {
                "type": "int64",
                "id": 4,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "GroupAvatarChanged",
            "header": 39,
            "doc": [
              "Update about group avatar change",
              {
                "type": "reference",
                "argument": "groupId",
                "description": "  Group Id"
              },
              {
                "type": "reference",
                "argument": "uid",
                "description": "  Avatar changer uid"
              },
              {
                "type": "reference",
                "argument": "avatar",
                "description": "  New Avatar. If null then avatar is removed"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  Date of avatar change"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "groupId"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "uid"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "struct",
                    "childType": "Avatar"
                  }
                },
                "id": 3,
                "name": "avatar"
              },
              {
                "type": "int64",
                "id": 4,
                "name": "date"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Message and Dialogs lists",
      "package": "conversations",
      "doc": [
        "<h1>Overview</h1>",
        "Actor can work with encrypted and plain messages and encrypted messages does not appear in history,",
        "but it affects conversation lists.",
        "<h1>Messages ordering</h1>",
        "Server provide date in milliseconds for accurate ordering of incoming messages in applications. ",
        "NOTHING can move conversation on conversation list down on list. For example if you clean chat or delete top message",
        "for the conversation conversation keep its position. Some events doesn't move conversation to top",
        "of conversations list. For example leaving chat or new device notification doesn't move it up.",
        "<h1>Deleting of messages</h1>",
        "For deletion of messages either plain or encrypted there is method MessageDelete#0x62 deletion.",
        "Deletion of message is irreversible for now.",
        "<h1>Deleting and clearing of conversation</h1>",
        "Clearing of conversation deletes all messages in conversation and clears top message in conversation list.",
        "Deletion of conversation deletes all messages and removes conversation from conversations list.",
        "For sync this operations there are updates ChatDelete#0x30 and ChatClear#0x2F.",
        "Deletion by ChatDelete of group causes automatic group leaving.",
        "<h1>Loading history</h1>",
        "For loading conversation list use method LoadDialogs#0x68. ",
        "When top message in conversation is encrypted than dialog item will contain empty text. Dialog item contains",
        "two dates - visual and sort, visual used for displaying date and sort for sorting dialog in dialog list.",
        " ",
        "For loading history of conversation use method LoadHistory#0x68.",
        " ",
        "Loading initial list are called with zero startDate and after loading more messages ",
        "we will use maximum date from messages for startDate value."
      ],
      "items": [
        {
          "type": "struct",
          "content": {
            "name": "HistoryMessage",
            "doc": [
              "Message from history",
              {
                "type": "reference",
                "argument": "senderUid",
                "description": "  Sender of mesasge"
              },
              {
                "type": "reference",
                "argument": "rid",
                "description": "  Random Id of message"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  Date of message"
              },
              {
                "type": "reference",
                "argument": "message",
                "description": "  Content of message"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "senderUid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "rid"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "date"
              },
              {
                "type": {
                  "type": "struct",
                  "childType": "MessageContent"
                },
                "id": 5,
                "name": "message"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "LoadHistory",
            "header": 118,
            "response": {
              "type": "anonymous",
              "header": 119,
              "attributes": [
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "HistoryMessage"
                    }
                  },
                  "id": 1,
                  "name": "history"
                },
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "User"
                    }
                  },
                  "id": 2,
                  "name": "users"
                }
              ]
            },
            "doc": [
              "Loading history of chat",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Peer of conversation"
              },
              {
                "type": "reference",
                "argument": "startDate",
                "description": "start date of messages for loading or 0 for loading from start"
              },
              {
                "type": "reference",
                "argument": "limit",
                "description": "maximum amount of messages (max is 100)"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "startDate"
              },
              {
                "type": "int32",
                "id": 4,
                "name": "limit"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "struct",
          "content": {
            "name": "Dialog",
            "doc": [
              "Conversation from history",
              {
                "type": "reference",
                "argument": "peer",
                "description": "  Peer of conversation"
              },
              {
                "type": "reference",
                "argument": "unreadCount",
                "description": "  plain messages unread messages count"
              },
              {
                "type": "reference",
                "argument": "sortDate",
                "description": "  date of conversation for sorting"
              },
              {
                "type": "reference",
                "argument": "senderUid",
                "description": "  Sender of top message (may be zero)"
              },
              {
                "type": "reference",
                "argument": "rid",
                "description": "  Random ID of top message (may be zero)"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  Date of top message (can't be zero)"
              },
              {
                "type": "reference",
                "argument": "message",
                "description": "  Content of message"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "unreadCount"
              },
              {
                "type": "int64",
                "id": 4,
                "name": "sortDate"
              },
              {
                "type": "int32",
                "id": 5,
                "name": "senderUid"
              },
              {
                "type": "int64",
                "id": 6,
                "name": "rid"
              },
              {
                "type": "int64",
                "id": 7,
                "name": "date"
              },
              {
                "type": {
                  "type": "struct",
                  "childType": "MessageContent"
                },
                "id": 8,
                "name": "message"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "LoadDialogs",
            "header": 104,
            "response": {
              "type": "anonymous",
              "header": 105,
              "attributes": [
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "Group"
                    }
                  },
                  "id": 1,
                  "name": "groups"
                },
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "User"
                    }
                  },
                  "id": 2,
                  "name": "users"
                },
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "Dialog"
                    }
                  },
                  "id": 3,
                  "name": "dialogs"
                }
              ]
            },
            "doc": [
              "Loading conversation history",
              {
                "type": "reference",
                "argument": "startDate",
                "description": "start date of conversation loading"
              },
              {
                "type": "reference",
                "argument": "limit",
                "description": "limit maximum amount of messages (max is 100)"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "startDate"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "limit"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Encryption",
      "package": "encryption",
      "doc": [
        "When user authenticates application send it's RSA public key for receiving encrypted messages.",
        "Each public key has keyHash that calculated on server side.",
        "Before sending encrypted messages application need to download all required receiver's and own",
        "public keys"
      ],
      "items": [
        {
          "type": "struct",
          "content": {
            "name": "UserKey",
            "doc": [
              "User public key reference",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  User ID"
              },
              {
                "type": "reference",
                "argument": "keyHash",
                "description": "  Public key hash"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "keyHash"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "PublicKey",
            "doc": [
              "Public Key",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  Key's User Id"
              },
              {
                "type": "reference",
                "argument": "keyHash",
                "description": "  hash of user's key"
              },
              {
                "type": "reference",
                "argument": "key",
                "description": "  RSA Public Key in x.509 format"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "keyHash"
              },
              {
                "type": "bytes",
                "id": 3,
                "name": "key"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "NewDevice",
            "header": 2,
            "doc": [
              "Update about new public key of user",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  User's ID"
              },
              {
                "type": "reference",
                "argument": "keyHash",
                "description": "  Public key hash"
              },
              {
                "type": "reference",
                "argument": "key",
                "description": "  optional RSA Public Key in x.509 format"
              },
              {
                "type": "reference",
                "argument": "date",
                "description": "  Date of adding new key"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "keyHash"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": "bytes"
                },
                "id": 3,
                "name": "key"
              },
              {
                "type": "int64",
                "id": 4,
                "name": "date"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "RemovedDevice",
            "header": 37,
            "doc": [
              "Update about removing public key of user",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  User's ID"
              },
              {
                "type": "reference",
                "argument": "keyHash",
                "description": "  Key Hash of removed key"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "keyHash"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "struct",
          "content": {
            "name": "PublicKeyRequest",
            "doc": [
              "Request for download public key",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  uiser's ID"
              },
              {
                "type": "reference",
                "argument": "accessHash",
                "description": "  Access Hash of User"
              },
              {
                "type": "reference",
                "argument": "keyHash",
                "description": "  Public Key hash"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "accessHash"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "keyHash"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "GetPublicKeys",
            "header": 6,
            "response": {
              "type": "anonymous",
              "header": 24,
              "attributes": [
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "PublicKey"
                    }
                  },
                  "id": 1,
                  "name": "keys"
                }
              ]
            },
            "doc": [
              "Loading required publick keys",
              {
                "type": "reference",
                "argument": "keys",
                "description": "key requests"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "PublicKeyRequest"
                  }
                },
                "id": 1,
                "name": "keys"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Typing and Online",
      "package": "weak",
      "items": [
        {
          "type": "rpc",
          "content": {
            "name": "Typing",
            "header": 27,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Sending typing notification",
              {
                "type": "reference",
                "argument": "peer",
                "description": "Destination peer"
              },
              {
                "type": "reference",
                "argument": "typingType",
                "description": "typing type."
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "OutPeer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "typingType"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "SetOnline",
            "header": 29,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Sending online state",
              {
                "type": "reference",
                "argument": "isOnline",
                "description": "is user online"
              },
              {
                "type": "reference",
                "argument": "timeout",
                "description": "timeout of online state"
              }
            ],
            "attributes": [
              {
                "type": "bool",
                "id": 1,
                "name": "isOnline"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "timeout"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "update",
          "content": {
            "name": "Typing",
            "header": 6,
            "doc": [
              "Update about user's typing",
              {
                "type": "reference",
                "argument": "peer",
                "description": "  Conversation peer"
              },
              {
                "type": "reference",
                "argument": "uid",
                "description": "  User's id"
              },
              {
                "type": "reference",
                "argument": "typingType",
                "description": "  Type of typing"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Peer"
                },
                "id": 1,
                "name": "peer"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "uid"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "typingType"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "UserOnline",
            "header": 7,
            "doc": [
              "Update about user became online",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  User's Id"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "UserOffline",
            "header": 8,
            "doc": [
              "Update about user became offline",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  User's id"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "UserLastSeen",
            "header": 9,
            "doc": [
              "Update about user's last seen state",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  User's id"
              },
              {
                "type": "reference",
                "argument": "time",
                "description": "  Last seen time"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "time"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "GroupOnline",
            "header": 33,
            "doc": [
              "Update about group online change",
              {
                "type": "reference",
                "argument": "groupId",
                "description": "  Group id"
              },
              {
                "type": "reference",
                "argument": "count",
                "description": "  current online user's count"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "groupId"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "count"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Media and Files",
      "package": "files",
      "items": [
        {
          "type": "struct",
          "content": {
            "name": "FileLocation",
            "doc": [
              "Location of file on server",
              {
                "type": "reference",
                "argument": "fileId",
                "description": "  Unique Id of file"
              },
              {
                "type": "reference",
                "argument": "accessHash",
                "description": "  Access hash of file"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "fileId"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "accessHash"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "AvatarImage",
            "doc": [
              "Avatar Image",
              {
                "type": "reference",
                "argument": "fileLocation",
                "description": "  Location of file"
              },
              {
                "type": "reference",
                "argument": "width",
                "description": "  Width of avatar image"
              },
              {
                "type": "reference",
                "argument": "height",
                "description": "  Height of avatar image"
              },
              {
                "type": "reference",
                "argument": "fileSize",
                "description": "  Size of file"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "FileLocation"
                },
                "id": 1,
                "name": "fileLocation"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "width"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "height"
              },
              {
                "type": "int32",
                "id": 4,
                "name": "fileSize"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "Avatar",
            "doc": [
              "Avatar of User or Group",
              {
                "type": "reference",
                "argument": "smallImage",
                "description": "  Optional small image of avatar box in 100x100"
              },
              {
                "type": "reference",
                "argument": "largeImage",
                "description": "  Optional large image of avatar box in 200x200"
              },
              {
                "type": "reference",
                "argument": "fullImage",
                "description": "  Optional full screen image of avatar"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "struct",
                    "childType": "AvatarImage"
                  }
                },
                "id": 1,
                "name": "smallImage"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "struct",
                    "childType": "AvatarImage"
                  }
                },
                "id": 2,
                "name": "largeImage"
              },
              {
                "type": {
                  "type": "opt",
                  "childType": {
                    "type": "struct",
                    "childType": "AvatarImage"
                  }
                },
                "id": 3,
                "name": "fullImage"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "FastThumb",
            "doc": [
              "Fast thumb of media messages. Less than 90x90 and compressed by JPEG with low quality",
              {
                "type": "reference",
                "argument": "w",
                "description": "  Width of thumb"
              },
              {
                "type": "reference",
                "argument": "h",
                "description": "  Height of thump"
              },
              {
                "type": "reference",
                "argument": "thumb",
                "description": "  compressed image data"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "w"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "h"
              },
              {
                "type": "bytes",
                "id": 3,
                "name": "thumb"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "GetFile",
            "header": 16,
            "response": {
              "type": "anonymous",
              "header": 17,
              "attributes": [
                {
                  "type": "bytes",
                  "id": 1,
                  "name": "payload"
                }
              ]
            },
            "doc": [
              "Downloading file part",
              {
                "type": "reference",
                "argument": "fileLocation",
                "description": "location of file"
              },
              {
                "type": "reference",
                "argument": "offset",
                "description": "offset in file in bytes"
              },
              {
                "type": "reference",
                "argument": "limit",
                "description": "maximum size of file part"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "FileLocation"
                },
                "id": 1,
                "name": "fileLocation"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "offset"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "limit"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "struct",
          "content": {
            "name": "UploadConfig",
            "doc": [
              "Reference for upload session",
              {
                "type": "reference",
                "argument": "serverData",
                "description": "  server related data for upload"
              }
            ],
            "attributes": [
              {
                "type": "bytes",
                "id": 1,
                "name": "serverData"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "StartUpload",
            "header": 18,
            "response": {
              "type": "anonymous",
              "header": 19,
              "attributes": [
                {
                  "type": {
                    "type": "struct",
                    "childType": "UploadConfig"
                  },
                  "id": 1,
                  "name": "config"
                }
              ]
            },
            "doc": [
              "Starting file upload"
            ],
            "attributes": []
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "UploadPart",
            "header": 20,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Uploading part of file",
              {
                "type": "reference",
                "argument": "blockIndex",
                "description": "index of block"
              },
              {
                "type": "reference",
                "argument": "payload",
                "description": "block payload"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "UploadConfig"
                },
                "id": 1,
                "name": "config"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "blockIndex"
              },
              {
                "type": "bytes",
                "id": 3,
                "name": "payload"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "CompleteUpload",
            "header": 22,
            "response": {
              "type": "anonymous",
              "header": 23,
              "attributes": [
                {
                  "type": {
                    "type": "struct",
                    "childType": "FileLocation"
                  },
                  "id": 1,
                  "name": "location"
                }
              ]
            },
            "doc": [
              "Complete uploading",
              {
                "type": "reference",
                "argument": "config",
                "description": "Upload configuration"
              },
              {
                "type": "reference",
                "argument": "blocksCount",
                "description": "blocks count"
              },
              {
                "type": "reference",
                "argument": "crc32",
                "description": "crc32 of uploaded file"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "UploadConfig"
                },
                "id": 1,
                "name": "config"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "blocksCount"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "crc32"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Push",
      "package": "push",
      "doc": [
        "Vendor's pushes for receiving push notifications.",
        "Push notification contains current sequence number of main sequence."
      ],
      "items": [
        {
          "type": "rpc",
          "content": {
            "name": "RegisterGooglePush",
            "header": 51,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Registering push token on server",
              {
                "type": "reference",
                "argument": "projectId",
                "description": "Project Id of token"
              },
              {
                "type": "reference",
                "argument": "token",
                "description": "token value"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "projectId"
              },
              {
                "type": "string",
                "id": 2,
                "name": "token"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "RegisterApplePush",
            "header": 76,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Registering apple push on server",
              {
                "type": "reference",
                "argument": "apnsKey",
                "description": "apns key id"
              },
              {
                "type": "reference",
                "argument": "token",
                "description": "token value"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "apnsKey"
              },
              {
                "type": "string",
                "id": 2,
                "name": "token"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "UnregisterPush",
            "header": 52,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Unregister push"
            ],
            "attributes": []
          }
        }
      ]
    },
    {
      "title": "Peers",
      "package": "peers",
      "doc": [
        "Peer is an identificator of specific conversation."
      ],
      "items": [
        {
          "type": "enum",
          "content": {
            "name": "PeerType",
            "values": [
              {
                "name": "Private",
                "id": 1
              },
              {
                "name": "Group",
                "id": 2
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "Peer",
            "doc": [
              "Peer",
              {
                "type": "reference",
                "argument": "type",
                "description": "  Peer Type"
              },
              {
                "type": "reference",
                "argument": "id",
                "description": "  Peer Id"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "enum",
                  "childType": "PeerType"
                },
                "id": 1,
                "name": "type"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "id"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "OutPeer",
            "doc": [
              "Out peer with access hash",
              {
                "type": "reference",
                "argument": "type",
                "description": "  Peer Type"
              },
              {
                "type": "reference",
                "argument": "id",
                "description": "  Peer Id"
              },
              {
                "type": "reference",
                "argument": "accessHash",
                "description": "  Peer access hash"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "enum",
                  "childType": "PeerType"
                },
                "id": 1,
                "name": "type"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "id"
              },
              {
                "type": "int64",
                "id": 3,
                "name": "accessHash"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "UserOutPeer",
            "doc": [
              "User's out peer",
              {
                "type": "reference",
                "argument": "uid",
                "description": "  User's id"
              },
              {
                "type": "reference",
                "argument": "accessHash",
                "description": "  User's access hash"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "uid"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "accessHash"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "GroupOutPeer",
            "doc": [
              "Group's out peer",
              {
                "type": "reference",
                "argument": "groupId",
                "description": "  Group's Id"
              },
              {
                "type": "reference",
                "argument": "accessHash",
                "description": "  Group's access hash"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "groupId"
              },
              {
                "type": "int64",
                "id": 2,
                "name": "accessHash"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Sequence and Updates",
      "package": "sequence",
      "doc": [
        "Each device has it's own update sequence. At the begining application request initial sequence state by",
        "calling GetState. On each application restart or NewSessionCreated application calls GetDifference for receiving",
        "updates in update sequence.",
        "GetState and GetDifference automatically subscribes session to receiving updates in session.",
        "Each update has seq and state. Seq is sequental index of updated and used for detecting of holes in update sequence",
        "(because of server failure or session die) on client side.",
        "All updates needed to be processed in partucular order according to seq values.",
        "In some updates there can be references to users that are not available at client yer. In this case application need",
        "to ignore such update and init getting difference."
      ],
      "items": [
        {
          "type": "update_box",
          "content": {
            "name": "SeqUpdate",
            "header": 13,
            "doc": [
              "Sequence update",
              {
                "type": "reference",
                "argument": "seq",
                "description": "  Sequence number of update"
              },
              {
                "type": "reference",
                "argument": "state",
                "description": "  Sequece state of update"
              },
              {
                "type": "reference",
                "argument": "updateHeader",
                "description": "  header of update"
              },
              {
                "type": "reference",
                "argument": "update",
                "description": "  The update"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "seq"
              },
              {
                "type": {
                  "type": "alias",
                  "childType": "seq_state"
                },
                "id": 2,
                "name": "state"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "updateHeader"
              },
              {
                "type": "bytes",
                "id": 4,
                "name": "update"
              }
            ]
          }
        },
        {
          "type": "update_box",
          "content": {
            "name": "FatSeqUpdate",
            "header": 73,
            "doc": [
              "Fat sequence update with additional data",
              {
                "type": "reference",
                "argument": "seq",
                "description": "  Sequence number of update"
              },
              {
                "type": "reference",
                "argument": "state",
                "description": "  Sequence state of update"
              },
              {
                "type": "reference",
                "argument": "updateHeader",
                "description": "  header of update"
              },
              {
                "type": "reference",
                "argument": "update",
                "description": "  The update"
              },
              {
                "type": "reference",
                "argument": "users",
                "description": "  Users that are referenced in update "
              },
              {
                "type": "reference",
                "argument": "groups",
                "description": "  Groups that are referenced in update"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "seq"
              },
              {
                "type": {
                  "type": "alias",
                  "childType": "seq_state"
                },
                "id": 2,
                "name": "state"
              },
              {
                "type": "int32",
                "id": 3,
                "name": "updateHeader"
              },
              {
                "type": "bytes",
                "id": 4,
                "name": "update"
              },
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "User"
                  }
                },
                "id": 5,
                "name": "users"
              },
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "Group"
                  }
                },
                "id": 6,
                "name": "groups"
              }
            ]
          }
        },
        {
          "type": "update_box",
          "content": {
            "name": "WeakUpdate",
            "header": 26,
            "doc": [
              "Out of sequence update (for typing and online statuses)",
              {
                "type": "reference",
                "argument": "date",
                "description": "  Date of update"
              },
              {
                "type": "reference",
                "argument": "updateHeader",
                "description": "  Header of update"
              },
              {
                "type": "reference",
                "argument": "update",
                "description": "  The update"
              }
            ],
            "attributes": [
              {
                "type": "int64",
                "id": 1,
                "name": "date"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "updateHeader"
              },
              {
                "type": "bytes",
                "id": 3,
                "name": "update"
              }
            ]
          }
        },
        {
          "type": "update_box",
          "content": {
            "name": "SeqUpdateTooLong",
            "header": 25,
            "doc": [
              "Notification about requiring performing manual GetDifference"
            ],
            "attributes": []
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "rpc",
          "content": {
            "name": "GetState",
            "header": 9,
            "response": {
              "type": "reference",
              "name": "Seq"
            },
            "doc": [
              "Get main sequence state"
            ],
            "attributes": []
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "DifferenceUpdate",
            "doc": [
              "Update from GetDifference",
              {
                "type": "reference",
                "argument": "updateHeader",
                "description": "  Header of update"
              },
              {
                "type": "reference",
                "argument": "update",
                "description": "  The update"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "updateHeader"
              },
              {
                "type": "bytes",
                "id": 2,
                "name": "update"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "GetDifference",
            "header": 11,
            "response": {
              "type": "anonymous",
              "header": 12,
              "attributes": [
                {
                  "type": "int32",
                  "id": 1,
                  "name": "seq"
                },
                {
                  "type": {
                    "type": "alias",
                    "childType": "seq_state"
                  },
                  "id": 2,
                  "name": "state"
                },
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "User"
                    }
                  },
                  "id": 3,
                  "name": "users"
                },
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "Group"
                    }
                  },
                  "id": 6,
                  "name": "groups"
                },
                {
                  "type": {
                    "type": "list",
                    "childType": {
                      "type": "struct",
                      "childType": "DifferenceUpdate"
                    }
                  },
                  "id": 4,
                  "name": "updates"
                },
                {
                  "type": "bool",
                  "id": 5,
                  "name": "needMode"
                }
              ]
            },
            "doc": [
              "Getting difference of sequence"
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "seq"
              },
              {
                "type": {
                  "type": "alias",
                  "childType": "seq_state"
                },
                "id": 2,
                "name": "state"
              }
            ]
          }
        },
        {
          "type": "empty"
        },
        {
          "type": "rpc",
          "content": {
            "name": "SubscribeToOnline",
            "header": 32,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Subscribing for users online",
              {
                "type": "reference",
                "argument": "users",
                "description": "Users for subscription"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "UserOutPeer"
                  }
                },
                "id": 1,
                "name": "users"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "SubscribeFromOnline",
            "header": 33,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Removing subscription for users online",
              {
                "type": "reference",
                "argument": "users",
                "description": "Users of subscriptions"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "UserOutPeer"
                  }
                },
                "id": 1,
                "name": "users"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "SubscribeToGroupOnline",
            "header": 74,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Subscribing for groups online",
              {
                "type": "reference",
                "argument": "groups",
                "description": "Groups for subscription"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "GroupOutPeer"
                  }
                },
                "id": 1,
                "name": "groups"
              }
            ]
          }
        },
        {
          "type": "rpc",
          "content": {
            "name": "SubscribeFromGroupOnline",
            "header": 75,
            "response": {
              "type": "reference",
              "name": "Void"
            },
            "doc": [
              "Removing subscription for groups online",
              {
                "type": "reference",
                "argument": "groups",
                "description": "Groups of subscriptions"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "list",
                  "childType": {
                    "type": "struct",
                    "childType": "GroupOutPeer"
                  }
                },
                "id": 1,
                "name": "groups"
              }
            ]
          }
        }
      ]
    },
    {
      "title": "Miscellaneous",
      "package": "misc",
      "items": [
        {
          "type": "response",
          "content": {
            "name": "Void",
            "header": 50,
            "doc": [
              "Empty response"
            ],
            "attributes": []
          }
        },
        {
          "type": "response",
          "content": {
            "name": "Seq",
            "header": 72,
            "doc": [
              "Sequence response. Methods that return this value must process response in particular order",
              {
                "type": "reference",
                "argument": "seq",
                "description": "  Sequence number of response"
              },
              {
                "type": "reference",
                "argument": "state",
                "description": "  Sequence state of response"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "seq"
              },
              {
                "type": {
                  "type": "alias",
                  "childType": "seq_state"
                },
                "id": 2,
                "name": "state"
              }
            ]
          }
        },
        {
          "type": "response",
          "content": {
            "name": "AvatarChanged",
            "header": 68,
            "doc": [
              "Response of Group or Profile avatar change",
              {
                "type": "reference",
                "argument": "avatar",
                "description": "  new avatar"
              },
              {
                "type": "reference",
                "argument": "seq",
                "description": "  Sequence number of response"
              },
              {
                "type": "reference",
                "argument": "state",
                "description": "  Sequence state of response"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Avatar"
                },
                "id": 1,
                "name": "avatar"
              },
              {
                "type": "int32",
                "id": 2,
                "name": "seq"
              },
              {
                "type": {
                  "type": "alias",
                  "childType": "seq_state"
                },
                "id": 3,
                "name": "state"
              }
            ]
          }
        },
        {
          "type": "struct",
          "content": {
            "name": "Config",
            "doc": [
              "Configuration of system",
              {
                "type": "reference",
                "argument": "maxGroupSize",
                "description": "  Current maximum group size"
              }
            ],
            "attributes": [
              {
                "type": "int32",
                "id": 1,
                "name": "maxGroupSize"
              }
            ]
          }
        },
        {
          "type": "update",
          "content": {
            "name": "Config",
            "header": 42,
            "doc": [
              "Update about config change",
              {
                "type": "reference",
                "argument": "config",
                "description": "  new config"
              }
            ],
            "attributes": [
              {
                "type": {
                  "type": "struct",
                  "childType": "Config"
                },
                "id": 1,
                "name": "config"
              }
            ]
          }
        }
      ]
    }
  ]
}