syntax = "proto2";

package im.actor.server;

option (scalapb.options) = {
    import: "im.actor.server.api.TypeMappers._"
    import: "scala.collection.JavaConversions._"
};

import "scalapb/scalapb.proto";
import "model.proto";
import "sequence.proto";

message DialogCommands {

    message Envelope {
        required Peer peer = 1;
        oneof payload {
            WriteMessage write_message = 2;
            SendMessage send_message = 3;
            MessageReceived message_received = 4;
            MessageRead message_read = 5;
            Show show = 6;
            Hide hide = 7;
            Delete delete = 8;
            SetReaction set_reaction = 9;
            RemoveReaction remove_reaction = 10;
            WriteMessageSelf write_message_self = 11;
            Favourite favourite = 12;
            Unfavourite unfavourite = 13;
        }
    }

    message WriteMessage {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 6;
        required Peer dest = 7;
        required int64 date = 3;
        required int64 random_id = 4;
        required bytes message = 5 [(scalapb.field).type = "im.actor.api.rpc.messaging.ApiMessage"];
    }

    message WriteMessageAck {}

    message WriteMessageSelf {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer dest = 1;
        required int32 senderUserId = 6;
        required int64 date = 3;
        required int64 random_id = 4;
        required bytes message = 5 [(scalapb.field).type = "im.actor.api.rpc.messaging.ApiMessage"];
    }

    message WriteMessageSelfAck {}

    message SendMessage {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 7;
        required Peer dest = 8;
        required int32 sender_auth_sid = 3;
        required int64 date = 9;
        required int64 random_id = 4;
        required bytes message = 5 [(scalapb.field).type = "im.actor.api.rpc.messaging.ApiMessage"];
        required bool is_fat = 6;
    }

    message SendMessageAck {}

    message MessageReceived {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 4;
        required Peer dest = 5;
        required int64 date = 3;
        required int64 now = 6;
    }

    message MessageReceivedAck {}

    message MessageRead {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 5;
        required Peer dest = 6;
        required int32 reader_auth_sid = 3;
        required int64 date = 4;
        required int64 now = 7;
    }

    message MessageReadAck {}

    message Show {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer dest = 1;
    }

    message Hide {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer dest = 1;
    }

    message Favourite {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer dest = 1;
    }

    message Unfavourite {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer dest = 1;
    }

    message Delete {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer dest = 1;
    }

    message SetReaction {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 1;
        required Peer dest = 2;
        required int32 client_auth_sid = 5;
        required int64 random_id = 4;
        required string code = 3;
    }

    message SetReactionAck {
        required SeqState seqstate = 1;
        repeated MessageReaction reactions = 2;
    }

    message RemoveReaction {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 1;
        required Peer dest = 2;
        required int32 client_auth_sid = 5;
        required int64 random_id = 4;
        required string code = 3;
    }

    message RemoveReactionAck {
        required SeqState seqstate = 1;
        repeated MessageReaction reactions = 2;
    }
}