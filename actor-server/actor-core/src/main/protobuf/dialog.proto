syntax = "proto2";

package im.actor.server;

option (scalapb.options) = {
    import: "im.actor.server.api.TypeMappers._"
    import: "scala.collection.JavaConversions._"
};

import "scalapb/scalapb.proto";
import "model.proto";
import "sequence.proto";

enum DialogGroupType {
    Favourites = 1;
    DirectMessages = 2;
    Groups = 3;
}

message DialogInfo {
    required Peer peer = 3;
    required int32 counter = 1;
    required int64 date = 2 [(scalapb.field).type = "java.time.Instant"];
}

message DialogGroup {
    required DialogGroupType typ = 1;
    repeated DialogInfo dialogs = 2;
}

message DialogRootEvents {
    message Created {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootEvent";

        required int64 ts = 1 [(scalapb.field).type = "java.time.Instant"];
        required Peer peer = 2;
    }

    message Archived {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootEvent";

        required int64 ts = 1 [(scalapb.field).type = "java.time.Instant"];
        required Peer peer = 2;
    }

    message Unarchived {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootEvent";

        required int64 ts = 1 [(scalapb.field).type = "java.time.Instant"];
        required Peer peer = 2;
    }

    message Shown {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootEvent";

        required int64 ts = 1 [(scalapb.field).type = "java.time.Instant"];
        required Peer peer = 2;
    }

    message Favourited {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootEvent";

        required int64 ts = 1 [(scalapb.field).type = "java.time.Instant"];
        required Peer peer = 2;
    }

    message Unfavourited {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootEvent";

        required int64 ts = 1 [(scalapb.field).type = "java.time.Instant"];
        required Peer peer = 2;
    }
}

message DialogRootCommands {
    message Unarchive {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootCommand";

        required Peer dest = 1;
        optional int32 client_auth_sid = 2;
    }

    message Archive {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootCommand";

        required Peer dest = 1;
        optional int32 client_auth_sid = 2;
    }

    message Favourite {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootCommand";

        required Peer dest = 1;
        optional int32 client_auth_sid = 2;
    }

    message Unfavourite {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootCommand";

        required Peer dest = 1;
        optional int32 client_auth_sid = 2;
    }

    message Delete {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootCommand";

        required Peer dest = 1;
    }
}

message DialogRootQueries {
    message GetCounter {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootQuery";
    }

    message GetCounterResponse {
        required int32 counter = 1;
    }

    message GetDialogGroups {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogRootQuery";
    }

    message GetDialogGroupsResponse {
        repeated DialogGroup groups = 1;
    }
}

message DialogEnvelope {
    required Peer peer = 1;
    oneof command {
        DialogCommands.WriteMessage write_message = 2;
        DialogCommands.SendMessage send_message = 3;
        DialogCommands.MessageReceived message_received = 4;
        DialogCommands.MessageRead message_read = 5;
        DialogCommands.SetReaction set_reaction = 9;
        DialogCommands.RemoveReaction remove_reaction = 10;
        DialogCommands.WriteMessageSelf write_message_self = 11;
        DialogCommands.UpdateCounters update_counters = 14;
    }
    oneof query {
        DialogQueries.GetCounter get_counter = 15;
        DialogQueries.GetInfo get_info = 16;
    }
}

message DialogCommands {
    message WriteMessage {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 6;
        required Peer dest = 7;
        required int64 date = 3;
        required int64 random_id = 4;
        required bytes message = 5 [(scalapb.field).type = "im.actor.api.rpc.messaging.ApiMessage"];
    }

    message WriteMessageAck {}

    message WriteMessageSelf {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer dest = 1;
        required int32 senderUserId = 6;
        required int64 date = 3;
        required int64 random_id = 4;
        required bytes message = 5 [(scalapb.field).type = "im.actor.api.rpc.messaging.ApiMessage"];
    }

    message WriteMessageSelfAck {}

    message SendMessage {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 7;
        required Peer dest = 8;
        required int32 sender_auth_sid = 3;
        optional int64 sender_auth_id = 11;
        optional int64 date = 9;
        required int64 random_id = 4;
        required bytes message = 5 [(scalapb.field).type = "im.actor.api.rpc.messaging.ApiMessage"];
        optional int64 access_hash = 10;
        required bool is_fat = 6;
        optional int32 for_user_id = 12;
    }

    message SendMessageAck {}

    message MessageReceived {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 4;
        required Peer dest = 5;
        required int64 date = 3;
        required int64 now = 6;
    }

    message MessageReceivedAck {}

    message MessageRead {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 5;
        required Peer dest = 6;
        required int32 reader_auth_sid = 3;
        required int64 date = 4;
        required int64 now = 7;
    }

    message MessageReadAck {}

    message SetReaction {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 1;
        required Peer dest = 2;
        required int32 client_auth_sid = 5;
        required int64 random_id = 4;
        required string code = 3;
    }

    message SetReactionAck {
        required SeqState seqstate = 1;
        repeated MessageReaction reactions = 2;
    }

    message RemoveReaction {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 1;
        required Peer dest = 2;
        required int32 client_auth_sid = 5;
        required int64 random_id = 4;
        required string code = 3;
    }

    message RemoveReactionAck {
        required SeqState seqstate = 1;
        repeated MessageReaction reactions = 2;
    }

    message UpdateCounters {
        option (scalapb.message).extends = "im.actor.server.dialog.DirectDialogCommand";

        required Peer origin = 1;
        required Peer dest = 2;
    }

    message UpdateCountersAck {}
}

message DialogQueries {
    message GetCounter {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogQuery";
    }

    message GetCounterResponse {
        required int32 counter = 1;
    }

    message GetInfo {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogQuery";
    }

    message GetInfoResponse {
        required DialogInfo info = 1;
    }
}

message DialogEvents {
    message NewMessage {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogEvent";

        required int64 random_id = 2;
        required int64 date = 1 [(scalapb.field).type = "java.time.Instant"];
        required bool is_incoming = 3;
    }

    message MessagesRead {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogEvent";

        required int64 date = 1 [(scalapb.field).type = "java.time.Instant"];
    }
}