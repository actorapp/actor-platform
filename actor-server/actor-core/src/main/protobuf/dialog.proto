syntax = "proto2";

package im.actor.server;

option (scalapb.options) = {
    import: "im.actor.server.api.TypeMappers._"
    import: "scala.collection.JavaConversions._"
};

import "scalapb/scalapb.proto";
import "model.proto";

message DialogCommands {

    message Envelope {
        required Peer peer = 1;
        oneof payload {
            WriteMessage write_message = 2;
            SendMessage send_message = 3;
            MessageReceived message_received = 4;
            MessageRead message_read = 5;
        }
    }

    message WriteMessage {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer origin = 6;
        required Peer dest = 7;
        required int64 date = 3;
        required int64 random_id = 4;
        required bytes message = 5 [(scalapb.field).type = "im.actor.api.rpc.messaging.ApiMessage"];
    }

    message WriteMessageAck {}

    message SendMessage {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer origin = 7;
        required Peer dest = 8;
        required int32 sender_auth_sid = 3;
        required int64 date = 9;
        required int64 random_id = 4;
        required bytes message = 5 [(scalapb.field).type = "im.actor.api.rpc.messaging.ApiMessage"];
        required bool is_fat = 6;
    }

    message SendMessageAck {}

    message MessageReceived {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer origin = 4;
        required Peer dest = 5;
        required int64 date = 3;
        required int64 now = 6;
    }

    message MessageReceivedAck {}

    message MessageRead {
        option (scalapb.message).extends = "im.actor.server.dialog.DialogCommand";

        required Peer origin = 5;
        required Peer dest = 6;
        required int32 reader_auth_sid = 3;
        required int64 date = 4;
        required int64 now = 7;
    }

    message MessageReadAck {}

}