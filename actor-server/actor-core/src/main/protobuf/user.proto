syntax = "proto2";

package im.actor.server;

option (scalapb.options) = {
    import: "im.actor.server.api.TypeMappers._"
    import: "scala.collection.JavaConversions._"
};

import "scalapb/scalapb.proto";

import "sequence.proto";
import "file.proto";

message UserCommands {
    message NewAuth {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 2;
        required int64 auth_id = 1;
    }

    message NewAuthAck {}

    message RemoveAuth {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 2;
        required int64 auth_id = 1;
    }

    message RemoveAuthAck {}

    message Create {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 6;
        required string access_salt = 1;
        required string name = 2;
        required string country_code = 3;
        required int32 sex = 4 [(scalapb.field).type = "im.actor.api.rpc.users.ApiSex.ApiSex"];
        required bool is_bot = 5;
    }

    message CreateAck {}

    message AddPhone {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 1;
        required int64 phone = 2;
    }

    message AddPhoneAck {}

    message AddEmail {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 1;
        required string email = 2;
    }

    message AddEmailAck {}

    message Delete {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 1;
    }

    message DeleteAck {}

    message ChangeName {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 3;
        required string name = 1;
        required int64 client_auth_id = 2;
    }

    message ChangeCountryCode {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 2;
        required string country_code = 1;
    }

    message ChangeCountryCodeAck {}

    message EditLocalName {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 1;
        required int64 access_hash = 2;
        required string name = 3;
    }

    message BroadcastUpdate {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 10;
        required int32 header = 1;
        required bytes update = 2;
        repeated int32 user_ids = 3;
        repeated int32 group_ids = 4;
        optional string push_text = 5;
        optional bytes origin_peer = 6 [(scalapb.field).type = "im.actor.api.rpc.peers.ApiPeer"];
        required bool is_fat = 7;
        optional int64 exclude_auth_id = 8;
        optional int64 track_auth_id = 9;
    }

    message BroadcastUpdateResponse {
        optional SeqState seqstate = 1;
    }

    message UpdateAvatar {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 3;
        required int64 client_auth_id = 2;
        optional Avatar avatar = 4;
    }

    message UpdateAvatarAck {
        optional bytes avatar = 1 [(scalapb.field).type = "im.actor.api.rpc.files.ApiAvatar"];
        required SeqState seqstatedate = 2;
    }

    message ChangeNickname {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 1;
        required int64 client_auth_id = 2;
        optional string nickname = 3;
    }

    message ChangeAbout {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 1;
        required int64 client_auth_id = 2;
        optional string about = 3;
    }

}

message UserQueries {
    message GetAuthIds {
        option (scalapb.message).extends = "im.actor.server.user.UserQuery";

        required int32 user_id = 1;
    }

    message GetAuthIdsResponse {
        repeated int64 auth_ids = 1;
    }

    message GetApiStruct {
        option (scalapb.message).extends = "im.actor.server.user.UserQuery";

        required int32 user_id = 1;
        required int32 client_user_id = 2;
        required int64 client_auth_id = 3;
    }

    message GetApiStructResponse {
        required bytes struct = 1 [(scalapb.field).type = "im.actor.api.rpc.users.ApiUser"];
    }

    message GetContactRecords {
        option (scalapb.message).extends = "im.actor.server.user.UserQuery";

        required int32 user_id = 1;
    }

    message GetContactRecordsResponse {
        repeated int64 phones = 1;
        repeated string emails = 2;
    }

    message CheckAccessHash {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 1;
        required int64 sender_auth_id = 2;
        required int64 access_hash = 3;
    }

    message CheckAccessHashResponse {
        required bool is_correct = 1;
    }

    message GetAccessHash {
        option (scalapb.message).extends = "im.actor.server.user.UserCommand";

        required int32 user_id = 1;
        required int64 client_auth_id = 2;
    }

    message GetAccessHashResponse {
        required int64 access_hash = 1;
    }
}

message UserEvents {
    message AuthAdded {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";

        required int64 auth_id = 1;
    }

    message AuthRemoved {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";

        required int64 auth_id = 1;
    }

    message Created {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";

        required int32 user_id = 7;

        required string access_salt = 1;
        required string name = 2;
        required string country_code = 3;
        required int32 sex = 5 [(scalapb.field).type = "im.actor.api.rpc.users.ApiSex.ApiSex"];
        required bool is_bot = 6;
    }

    message PhoneAdded {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";

        required int64 phone = 1;
    }

    message EmailAdded {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";

        required string email = 1;
    }

    message CountryCodeChanged {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";

        required string country_code = 1;
    }

    message NameChanged {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";

        required string name = 1;
    }

    message Deleted {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";
    }

    message NicknameChanged {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";

        optional string nickname = 1;
    }

    message AboutChanged {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";

        optional string about = 1;
    }

    message AvatarUpdated {
        option (scalapb.message).extends = "im.actor.server.user.UserEvent";

        optional Avatar avatar = 1;
    }
}