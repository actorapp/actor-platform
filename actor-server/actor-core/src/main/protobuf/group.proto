syntax = "proto2";

package im.actor.server;

option (scalapb.options) = {
    import: "im.actor.server.api.TypeMappers._"
    import: "scala.collection.JavaConversions._"
};

import "scalapb/scalapb.proto";
import "file.proto";
import "sequence.proto";

enum GroupType {
    General = 1;
    Public = 2;
}

message GroupCommands {
    message Create {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 6;
        required GroupType typ = 7;
        required int32 creator_user_id = 1;
        required string title = 3;
        required int64 random_id = 4;
        repeated int32 user_ids = 5;
    }

    message CreateAck {
        required int64 access_hash = 1;
        required SeqState seqstate = 2;
        required int64 date = 4;
    }

    message CreateInternal {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 1;
        required GroupType typ = 2;
        required int32 creator_user_id = 3;
        required string title = 4;
        repeated int32 user_ids = 5;
        optional bool is_hidden = 7;
        optional bool is_history_shared = 8;
        repeated bytes extensions = 6 [(scalapb.field).type = "im.actor.api.rpc.misc.ApiExtension"];
    }

    message CreateInternalAck {
        required int64 access_hash = 1;
    }

    message Join {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 4;
        required int32 joining_user_id = 1;
        required int32 joining_user_auth_sid = 2;
        required int32 inviting_user_id = 3;
    }

    message Invite {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 5;
        required int32 invitee_user_id = 1;
        required int32 inviter_user_id = 2;
        required int64 random_id = 4;
    }

    message Kick {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 6;
        required int32 kicked_user_id = 1;
        required int32 kicker_user_id = 2;
        required int32 kicker_auth_sid = 3;
        required int64 random_id = 4;
    }

    message Leave {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 4;
        required int32 user_id = 1;
        required int32 auth_sid = 2;
        required int64 random_id = 3;
    }

    message UpdateAvatar {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 3;
        required int32 client_user_id = 1;
        optional Avatar avatar = 4;
        required int64 random_id = 5;
    }

    message UpdateAvatarAck {
        optional bytes avatar = 1 [(scalapb.field).type = "im.actor.api.rpc.files.ApiAvatar"];
        required SeqStateDate seqstatedate = 2;
    }

    message UpdateTitle {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 1;
        required int32 client_user_id = 2;
        required string title = 4;
        required int64 random_id = 5;
    }

    message MakePublic {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 1;
        optional string descrption = 2;
    }

    message MakePublicAck {}

    message ChangeTopic {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 1;
        required int32 client_user_id = 2;
        optional string topic = 4;
        required int64 random_id = 5;
    }

    message ChangeAbout {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 1;
        required int32 client_user_id = 2;
        optional string about = 4;
        required int64 random_id = 5;
    }

    message MakeUserAdmin {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 1;
        required int32 client_user_id = 2;
        required int32 candidate_user_id = 4;
    }

    message RevokeIntegrationToken {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 1;
        required int32 client_user_id = 2;
    }

    message RevokeIntegrationTokenAck {
        required string token = 1;
    }

    message JoinAfterFirstRead {
        option (scalapb.message).extends = "im.actor.server.group.GroupCommand";

        required int32 group_id = 1;
        required int32 joining_user_id = 2;
        required int32 joining_user_auth_sid = 3;
    }
}

message GroupQueries {
    message GetIntegrationToken {
        option (scalapb.message).extends = "im.actor.server.group.GroupQuery";

        required int32 group_id = 1;
        required int32 client_user_id = 2;
    }

    message GetIntegrationTokenInternal {
        option (scalapb.message).extends = "im.actor.server.group.GroupQuery";

        required int32 group_id = 1;
    }

    message GetIntegrationTokenResponse {
        optional string token = 1;
    }

    message GetApiStruct {
        option (scalapb.message).extends = "im.actor.server.group.GroupQuery";

        required int32 group_id = 1;
        required int32 client_user_id = 2;
    }

    message GetApiStructResponse {
        required bytes struct = 1 [(scalapb.field).type = "im.actor.api.rpc.groups.ApiGroup"];
    }

    message CheckAccessHash {
        option (scalapb.message).extends = "im.actor.server.group.GroupQuery";

        required int32 group_id = 1;
        required int64 access_hash = 2;
    }

    message CheckAccessHashResponse {
        required bool is_correct = 1;
    }

    message GetMembers {
        option (scalapb.message).extends = "im.actor.server.group.GroupQuery";

        required int32 group_id = 1;
    }

    message GetMembersResponse {
        repeated int32 member_ids = 1;
        repeated int32 invited_user_ids = 2;
        optional int32 bot_id = 3;
    }

    message IsPublic {
        option (scalapb.message).extends = "im.actor.server.group.GroupQuery";

        required int32 group_id = 1;
    }

    message IsPublicResponse {
        required bool is_public = 1;
    }

    message IsHistoryShared {
        option (scalapb.message).extends = "im.actor.server.group.GroupQuery";

        required int32 group_id = 1;
    }

    message IsHistorySharedResponse {
        required bool is_history_shared = 1;
    }

    message GetAccessHash {
        option (scalapb.message).extends = "im.actor.server.group.GroupQuery";

        required int32 group_id = 1;
    }

    message GetAccessHashResponse {
        required int64 access_hash = 1;
    }
}

message GroupEvents {
    message Created {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        required int32 group_id = 1;
        optional GroupType typ = 5 [default = General];
        required int32 creator_user_id = 2;
        required int64 access_hash = 3;
        required string title = 4;
        repeated int32 user_ids = 6;
        optional bool is_hidden = 8;
        optional bool is_history_shared = 9;
        repeated bytes extensions = 7  [(scalapb.field).type = "im.actor.api.rpc.misc.ApiExtension"];
    }

    message UserInvited {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        required int32 user_id = 1;
        required int32 inviter_user_id = 2;
    }

    message UserJoined {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        required int32 user_id = 1;
        required int32 inviter_user_id = 2;
    }

    message UserKicked {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        required int32 user_id = 1;
        required int32 kicker_user_id = 2;
        required int64 date = 3;
    }

    message UserLeft {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        required int32 user_id = 1;
        required int64 date = 2;
    }

    message BotAdded {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        required int32 user_id = 1;
        required string token = 2;
    }

    message AvatarUpdated {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        optional Avatar avatar = 1;
    }

    message TitleUpdated {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        required string title = 1;
    }

    message BecamePublic {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";
    }

    message AboutUpdated {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        optional string description = 1;
    }

    message TopicUpdated {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        optional string topic = 1;
    }

    message UserBecameAdmin {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        required int32 user_id = 1;
        required int32 promoter_user_id = 2;
    }

    message IntegrationTokenRevoked {
        option (scalapb.message).extends = "im.actor.server.group.GroupEvent";

        required string token = 1;
    }
}

