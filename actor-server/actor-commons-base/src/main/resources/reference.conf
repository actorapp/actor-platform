akka {
  extensions = ["akka.contrib.pattern.DistributedPubSubExtension"]

  loggers = ["akka.event.slf4j.Slf4jLogger"]

  log-config-on-start: on

  persistence {
    journal.plugin = "jdbc-journal"
    snapshot-store.plugin = "jdbc-snapshot-store"

    # Optionally Kafka
    # journal.plugin = "kafka-journal"
    # snapshot-store.plugin = "kafka-snapshot-store"
  }

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    extensions += ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "im.actor.server.commons.serialization.KryoSerializable" = kryo
      "akka.actor.ActorRef" = kryo
    }

    kryo {
      type = "graph"
      idstrategy = "incremental"

      serializer-pool-size = 16

      buffer-size = 4096

      max-buffer-size = -1

      use-manifests = false

      post-serialization-transformations = "off"

      implicit-registration-logging = true

      kryo-trace = false

      kryo-custom-serializer-init = "im.actor.server.commons.serialization.KryoInit"
    }
  }

  remote {
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2553
    }
  }

  cluster {
    seed-nodes = [ "akka.tcp://actor-server@127.0.0.1:2553" ]
  }
}

jdbc-journal {
  class = "akka.persistence.jdbc.journal.PostgresqlSyncWriteJournal"
}

jdbc-snapshot-store {
  class = "akka.persistence.jdbc.snapshot.PostgresqlSyncSnapshotStore"
}

jdbc-connection = {
  driverClassName: "org.postgresql.Driver"
  journalSchemaName: "public"
  journalTableName: "akka_journal"
  snapshotSchemaName: "public"
  snapshotTableName: "akka_snapshot"
  jndiPath: ""
  dataSourceName: ""
  journal-converter: "akka.persistence.jdbc.serialization.journal.Base64JournalConverter"
  snapshot-converter: "akka.persistence.jdbc.serialization.snapshot.Base64SnapshotConverter"
}