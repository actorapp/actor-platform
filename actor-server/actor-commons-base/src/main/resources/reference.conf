akka {
  extensions = ${akka.extensions} [
    "akka.contrib.pattern.DistributedPubSubExtension",
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$"
  ]

  loggers = ["akka.event.slf4j.Slf4jLogger"]

  persistence {
    journal.plugin = "jdbc-journal"
    snapshot-store.plugin = "jdbc-snapshot-store"

    # Optionally Kafka
    # journal.plugin = "kafka-journal"
    # snapshot-store.plugin = "kafka-snapshot-store"
  }

  actor {
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }

    serialization-bindings {
      "im.actor.server.commons.serialization.KryoSerializable" = kryo
      "akka.actor.ActorRef" = kryo
    }

    kryo {
      type = "graph"
      idstrategy = "incremental"

      serializer-pool-size = 16

      buffer-size = 4096

      max-buffer-size = -1

      use-manifests = false

      post-serialization-transformations = "off"

      implicit-registration-logging = true

      kryo-trace = false

      kryo-custom-serializer-init = "im.actor.server.commons.serialization.KryoInit"
    }
  }
}

jdbc-journal {
  class = "akka.persistence.jdbc.journal.PostgresqlSyncWriteJournal"
}

jdbc-snapshot-store {
  class = "akka.persistence.jdbc.snapshot.PostgresqlSyncSnapshotStore"
}


