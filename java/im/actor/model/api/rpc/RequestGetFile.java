package im.actor.model.api.rpc;
/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

/*
 *  Generated by the Actor API Scheme generator.  DO NOT EDIT!
 */

import im.actor.model.droidkit.bser.Bser;
import im.actor.model.droidkit.bser.BserObject;
import im.actor.model.droidkit.bser.BserValues;
import im.actor.model.droidkit.bser.BserWriter;
import static im.actor.model.droidkit.bser.Utils.*;
import java.io.IOException;
import im.actor.model.network.parser.*;
import java.util.List;
import java.util.ArrayList;
import im.actor.model.api.*;

public class RequestGetFile extends Request<ResponseGetFile> {

    public static final int HEADER = 0x10;
    public static RequestGetFile fromBytes(byte[] data) throws IOException {
        return Bser.parse(new RequestGetFile(), data);
    }

    private FileLocation fileLocation;
    private int offset;
    private int limit;

    public RequestGetFile(FileLocation fileLocation, int offset, int limit) {
        this.fileLocation = fileLocation;
        this.offset = offset;
        this.limit = limit;
    }

    public RequestGetFile() {

    }

    public FileLocation getFileLocation() {
        return this.fileLocation;
    }

    public int getOffset() {
        return this.offset;
    }

    public int getLimit() {
        return this.limit;
    }

    @Override
    public void parse(BserValues values) throws IOException {
        this.fileLocation = values.getObj(1, new FileLocation());
        this.offset = values.getInt(2);
        this.limit = values.getInt(3);
    }

    @Override
    public void serialize(BserWriter writer) throws IOException {
        if (this.fileLocation == null) {
            throw new IOException();
        }
        writer.writeObject(1, this.fileLocation);
        writer.writeInt(2, this.offset);
        writer.writeInt(3, this.limit);
    }

    @Override
    public String toString() {
        String res = "rpc GetFile{";
        res += "fileLocation=" + this.fileLocation;
        res += ", offset=" + this.offset;
        res += ", limit=" + this.limit;
        res += "}";
        return res;
    }

    @Override
    public int getHeaderKey() {
        return HEADER;
    }
}
